### Port conventions (though there are many, many exceptions)
# 81xx - grapl services (and some `wait-for-it` http servers)
# 82xx - TBD
# 83xx - grapl plugin services, like grapl-aws-plugins
# 84xx - debugger ports (see vsc_debugger.py)

version: "3.8"
volumes:
  dgraph_export:

x-common-variables:
  aws-region: &aws-region
    AWS_DEFAULT_REGION: ${AWS_REGION}  # boto3 prefers this one
    AWS_REGION: ${AWS_REGION}
  dgraph-env: &dgraph-env
    MG_ALPHAS: ${MG_ALPHAS}
  dynamodb-env: &dynamodb-env
    DYNAMODB_ACCESS_KEY_ID: "dummy_cred_aws_access_key_id"
    DYNAMODB_ACCESS_KEY_SECRET: "dummy_cred_aws_secret_access_key"
    DYNAMODB_ENDPOINT: ${DYNAMODB_ENDPOINT}
  # TODO: Ensure these are matched with what's in provision_local_identity_table.py
  dynamodb-mapping-tables: &dynamodb-mapping-tables
    ASSET_ID_MAPPINGS: ${BUCKET_PREFIX}-asset_id_mappings
    DYNAMIC_SESSION_TABLE: ${BUCKET_PREFIX}-dynamic_session_table
    FILE_HISTORY_TABLE: ${BUCKET_PREFIX}-file_history_table
    INBOUND_CONNECTION_HISTORY_TABLE: ${BUCKET_PREFIX}-inbound_connection_history_table
    IP_CONNECTION_HISTORY_TABLE: ${BUCKET_PREFIX}-ip_connection_history_table
    NETWORK_CONNECTION_HISTORY_TABLE: ${BUCKET_PREFIX}-network_connection_history_table
    OUTBOUND_CONNECTION_HISTORY_TABLE: ${BUCKET_PREFIX}-outbound_connection_history_table
    PROCESS_HISTORY_TABLE: ${BUCKET_PREFIX}-process_history_table
    STATIC_MAPPING_TABLE: ${BUCKET_PREFIX}-static_mapping_table
  log-level: &log-level
    GRAPL_LOG_LEVEL: "${GRAPL_LOG_LEVEL:-ERROR}"
    RUST_LOG: "${RUST_LOG:-ERROR}"
  s3-env: &s3-env
    S3_ACCESS_KEY_ID: "minioadmin"
    S3_ACCESS_KEY_SECRET: "minioadmin"
    S3_ENDPOINT: ${S3_ENDPOINT}
  sqs-env: &sqs-env
    SQS_ACCESS_KEY_ID: "dummy_cred_aws_access_key_id"
    SQS_ACCESS_KEY_SECRET: "dummy_cred_aws_secret_access_key"
    SQS_ENDPOINT: ${SQS_ENDPOINT}
  zookeeper-env: &zookeeper-env
    ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    ZOOKEEPER_TICK_TIME: 2000
  kafka-broker-env: &kafka-broker-env
    KAFKA_BROKER_ID: 1
    KAFKA_ZOOKEEPER_CONNECT: "${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}"
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
    KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    KAFKA_JMX_PORT: ${KAFKA_JMX_PORT}
    KAFKA_JMX_HOSTNAME: localhost

services:

  ########################################################################
  # Cloud Infrastructure Dependencies
  ########################################################################

  dgraph:
    tty: false
    image: dgraph/standalone:v20.07.1
    ports:
      - ${DGRAPH_ZERO_GRPC_PRIVATE_PORT}
      - ${DGRAPH_RATEL_HTTP_EXTERNAL_PUBLIC_PORT}
      - ${DGRAPH_ALPHA_HTTP_EXTERNAL_PUBLIC_PORT}
      - ${DGRAPH_ALPHA_GRPC_EXTERNAL_PUBLIC_PORT}
    logging:
      driver: none
    volumes:
      - type: volume
        source: dgraph_export
        # Hitting :8080/admin/export will force an export to be written to this directory.
        target: /dgraph/export
    networks:
      default:
        aliases:
          - ${DGRAPH_HOST}

  # dev uses 1 big redis instance, prod has 1:1 redis per grapl
  # service... maybe transitory, this will eventually match prod
  redis:
    image: redis:latest
    command: |
      sh -c "
        # hack from https://stackoverflow.com/questions/54533308/disable-redis-persistence-in-docker
        # to disable persistence
        rm -f /data/dump.rdb && redis-server
      "
    ports:
      - ${REDIS_PORT}
    logging:
      driver: none
    networks:
      default:
        aliases:
          - ${REDIS_HOST}

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.0
    environment:
      <<: *zookeeper-env
    networks:
      default:
        aliases:
          - ${ZOOKEEPER_HOST}

  kafka-broker:
    image: confluentinc/cp-server:6.1.0
    depends_on:
      - zookeeper
    environment:
      <<: *kafka-broker-env
    networks:
      default:
        aliases:
          - ${KAFKA_BROKER_HOST}

  sqs:
    image: localstack/localstack:0.11.5
    environment:
      - HOSTNAME_EXTERNAL=${SQS_HOST}
      - IMAGE_NAME=localstack/localstack:0.11.5
      - SERVICES=sqs:${SQS_PORT}
    ports:
      - ${SQS_PORT}
    networks:
      default:
        aliases:
          - ${SQS_HOST}
    logging:
      driver: none

  secretsmanager:
    image: localstack/localstack:0.11.5
    environment:
      - HOSTNAME_EXTERNAL=${SECRETSMANAGER_HOST}
      - IMAGE_NAME=localstack/localstack:0.11.5
      - PORT_WEB_UI=${SECRETSMANAGER_WEB_UI_PORT}
      - SERVICES=secretsmanager:${SECRETSMANAGER_PORT}
    ports:
      - ${SECRETSMANAGER_PORT}
      - ${SECRETSMANAGER_WEB_UI_PORT}
    networks:
      default:
        aliases:
          - ${SECRETSMANAGER_HOST}
    logging:
      driver: none

  s3:
    image: minio/minio
    command: server /data
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_REGION_NAME=${AWS_REGION}
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - ${S3_PORT}
    networks:
      default:
        aliases:
          - ${S3_HOST}
    logging:
      driver: none

  dynamodb:
    image: amazon/dynamodb-local
    environment:
      - REGION=${AWS_REGION}
    logging:
      driver: none
    networks:
      default:
        aliases:
          - ${DYNAMODB_HOST}

  ########################################################################
  # Rust Services
  ########################################################################

  grapl-metric-forwarder:
    image: grapl/grapl-metric-forwarder:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: metric-forwarder-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    tty: false
    environment:
      IS_LOCAL: "True"
      <<: *log-level

  grapl-sysmon-subgraph-generator:
    image: grapl/grapl-sysmon-subgraph-generator:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: sysmon-subgraph-generator-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    tty: false
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-sysmon-graph-generator-dead-letter-queue"
      DEST_BUCKET_NAME: "${BUCKET_PREFIX}-unid-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-queue"
      EVENT_CACHE_CLUSTER_ADDRESS: "${REDIS_HOST}:${REDIS_PORT}"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/000000000000/grapl-sysmon-graph-generator-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/000000000000/grapl-sysmon-graph-generator-queue"
      <<: *sqs-env
    depends_on:
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-osquery-subgraph-generator:
    image: grapl/grapl-osquery-subgraph-generator:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: osquery-subgraph-generator-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    tty: false
    environment:
      <<: *aws-region
      BUCKET_PREFIX: ${BUCKET_PREFIX}
      DEAD_LETTER_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-osquery-graph-generator-dead-letter-queue"
      DEST_BUCKET_NAME: "${BUCKET_PREFIX}-unid-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-queue"
      EVENT_CACHE_CLUSTER_ADDRESS: "${REDIS_HOST}:${REDIS_PORT}"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-osquery-graph-generator-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-osquery-graph-generator-queue"
      <<: *sqs-env
    depends_on:
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-node-identifier:
    image: grapl/grapl-node-identifier:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: node-identifier-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-dead-letter-queue"
      DEST_BUCKET_NAME: "${BUCKET_PREFIX}-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-graph-merger-queue"
      <<: *dynamodb-env
      <<: *dynamodb-mapping-tables
      EVENT_CACHE_CLUSTER_ADDRESS: "${REDIS_HOST}:${REDIS_PORT}"
      IS_LOCAL: "true"
      <<: *log-level
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - dynamodb
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-node-identifier-retry-handler:
    image: grapl/grapl-node-identifier-retry-handler:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: node-identifier-retry-handler-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-dead-letter-queue"
      DEST_BUCKET_NAME: "${BUCKET_PREFIX}-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-graph-merger-queue"
      <<: *dynamodb-env
      <<: *dynamodb-mapping-tables
      EVENT_CACHE_CLUSTER_ADDRESS: "${REDIS_HOST}:${REDIS_PORT}"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-dead-letter-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-node-identifier-retry-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - dynamodb
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-graph-merger:
    image: grapl/grapl-graph-merger:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: graph-merger-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-graph-merger-dead-letter-queue"
      DEST_BUCKET_NAME: "${BUCKET_PREFIX}-subgraphs-merged-bucket"
      DEST_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-dispatcher-queue"
      <<: *dgraph-env
      <<: *dynamodb-env
      EVENT_CACHE_CLUSTER_ADDRESS: "${REDIS_HOST}:${REDIS_PORT}"
      GRAPL_SCHEMA_TABLE: "${BUCKET_PREFIX}-grapl_schema_table"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-graph-merger-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-graph-merger-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - dgraph
      - dynamodb
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-analyzer-dispatcher:
    image: grapl/grapl-analyzer-dispatcher:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: analyzer-dispatcher-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      ANALYZER_BUCKET: "${BUCKET_PREFIX}-analyzers-bucket"
      ANALYZERS_BUCKET: "${BUCKET_PREFIX}-analyzers-bucket"
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-dispatcher-dead-letter-queue"
      DEST_BUCKET_NAME: "${BUCKET_PREFIX}-analyzer-dispatched-bucket"
      DEST_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-executor-queue"
      IS_LOCAL: "true"
      <<: *log-level
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-dispatcher-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-dispatcher-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - s3
      - sqs

  ########################################################################
  # Python Services
  ########################################################################

  grapl-analyzer-executor:
    image: grapl/grapl-analyzer-executor:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: analyzer-executor-deploy
    command: /bin/sh -c '. venv/bin/activate && python3 analyzer_executor/src/run_local.py'
    environment:
      <<: *aws-region
      BUCKET_PREFIX: ${BUCKET_PREFIX}
      DEBUG_SERVICES: "${DEBUG_SERVICES}"
      <<: *dgraph-env
      GRPC_ENABLE_FORK_SUPPORT: "1"
      HITCACHE_ADDR: "${REDIS_HOST}"
      HITCACHE_PORT: "${REDIS_PORT}"
      IS_LOCAL: "True"
      IS_RETRY: "False"
      <<: *log-level
      MESSAGECACHE_ADDR: "${REDIS_HOST}"
      MESSAGECACHE_PORT: "${REDIS_PORT}"
      RETRY_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-executor-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "${SQS_ENDPOINT}/queue/grapl-analyzer-executor-queue"
      <<: *sqs-env
    tty: true
    ports:
      - ${VSC_DEBUGGER}
    depends_on:
      - dgraph
      - redis
      - s3
      - sqs

  grapl-ux-router:
    image: grapl/grapl-ux-router:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: grapl-ux-router-deploy
    command: |
      /bin/sh -c '
        wait-for-it grapl-engagement-view-uploader:${WAIT_PORT} --timeout=180 &&
        . venv/bin/activate &&
        cd app &&
        chalice local --no-autoreload --host=0.0.0.0 --port=${GRAPL_UX_ROUTER_PORT}
      '
    ports:
      - ${GRAPL_UX_ROUTER_PORT}
    environment:
      GRAPL_LOG_LEVEL: "DEBUG"
      # TODO: Once we remove IS_LOCAL, this service will need to depend on s3 and be configured appropriately
      IS_LOCAL: "True"
      UX_BUCKET_NAME: "${BUCKET_PREFIX}-engagement-ux-bucket"
    depends_on:
      - grapl-engagement-view-uploader
    tty: true
    networks:
      default:
        aliases:
          - ${GRAPL_UX_ROUTER_HOST}

  grapl-engagement-creator:
    image: grapl/grapl-engagement-creator:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: engagement-creator-deploy
    command: /bin/sh -c '. venv/bin/activate && python3 engagement-creator/src/engagement-creator.py'
    environment:
      <<: *aws-region
      BUCKET_PREFIX: ${BUCKET_PREFIX}
      <<: *dgraph-env
      IS_LOCAL: "True"
      <<: *log-level
      <<: *s3-env
      <<: *sqs-env
    tty: true
    depends_on:
      - dgraph
      - s3
      - sqs

  # TODO: really, this service should be grapl-auth
  grapl-engagement-edge:
    image: grapl/grapl-engagement-edge:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: engagement-edge-deploy
    command: |
      /bin/sh -c '
        wait-for-it grapl-provision:${WAIT_PORT} --timeout=120 &&
        . venv/bin/activate &&
        cd /home/grapl/app &&
        chalice local --no-autoreload --host=0.0.0.0 --port=${GRAPL_AUTH_PORT}
      '
    ports:
      - ${GRAPL_AUTH_PORT}
    networks:
      default:
        aliases:
          - ${GRAPL_AUTH_HOST}
    environment:
      <<: *aws-region
      BUCKET_PREFIX: ${BUCKET_PREFIX}
      <<: *dynamodb-env
      IS_LOCAL: "True"
      <<: *log-level
      USER_AUTH_TABLE: "${BUCKET_PREFIX}-user_auth_table"
      UX_BUCKET_URL: "localhost:3000" # TODO: Port??
    depends_on:
      - dynamodb
      - grapl-provision
      - secretsmanager
    tty: true

  grapl-model-plugin-deployer:
    image: grapl/grapl-model-plugin-deployer:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: model-plugin-deployer-deploy
    command: |
      /bin/sh -c '
        . venv/bin/activate &&
        cd /home/grapl/app &&
        chalice local \
          --no-autoreload \
          --host=0.0.0.0 \
          --port=${GRAPL_MODEL_PLUGIN_DEPLOYER_PORT}
      '
    ports:
      - ${GRAPL_MODEL_PLUGIN_DEPLOYER_PORT}
    environment:
      <<: *aws-region
      <<: *dgraph-env
      <<: *dynamodb-env
      IS_LOCAL: "True"
      <<: *log-level
      <<: *s3-env
      UX_BUCKET_URL: "localhost"
    tty: true
    depends_on:
      - dgraph
      - dynamodb
      - s3
      - secretsmanager
    networks:
      default:
        aliases:
          - ${GRAPL_MODEL_PLUGIN_DEPLOYER_HOST}

  grapl-dgraph-ttl:
    image: grapl/grapl-dgraph-ttl:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: dgraph-ttl-deploy
    command: /bin/sh -c '. venv/bin/activate && cd /home/grapl/app && chalice local --no-autoreload --host=0.0.0.0 --port=${GRAPL_DGRAPH_TTL_PORT}'
    ports:
      - ${GRAPL_DGRAPH_TTL_PORT}
    environment:
      <<: *dgraph-env
      GRAPL_DGRAPH_TTL_S: "${GRAPL_DGRAPH_TTL_S:-31536000}"
      GRAPL_TTL_DELETE_BATCH_SIZE: "${GRAPL_TTL_DELETE_BATCH_SIZE:-10}"
      IS_LOCAL: "True"
      <<: *log-level
    tty: true
    depends_on:
      - dgraph

  ########################################################################
  # Web Services
  ########################################################################

  nginx:
    image: nginxinc/nginx-unprivileged
    volumes:
      - ./etc/local_grapl/nginx_templates:/etc/nginx/templates
    ports:
      - "1234:3128"
    environment:
      - GRAPL_AUTH_HOST
      - GRAPL_AUTH_PORT
      - GRAPL_GRAPHQL_HOST
      - GRAPL_GRAPHQL_PORT
      - GRAPL_MODEL_PLUGIN_DEPLOYER_HOST
      - GRAPL_MODEL_PLUGIN_DEPLOYER_PORT
      - GRAPL_UX_ROUTER_HOST
      - GRAPL_UX_ROUTER_PORT
    depends_on:
      - grapl-engagement-edge
      - grapl-model-plugin-deployer
      - grapl-graphql-endpoint
      - grapl-ux-router
    networks:
      default:
        aliases:
          - ${GRAPL_API_HOST}

  grapl-engagement-view-uploader:
    image: grapl/grapl-engagement-view:${TAG:-latest}
    build:
      context: src
      dockerfile: js/engagement_view/Dockerfile
      target: engagement-view-local-deploy
    command: |
      /bin/bash -c "
        wait-for-it grapl-provision:${WAIT_PORT} --timeout=120 &&
        ./upload_local.sh &&
        python -m http.server ${WAIT_PORT}  # wait-for-it
      "
    depends_on:
      - grapl-provision

  grapl-graphql-endpoint:
    image: grapl/grapl-graphql-endpoint:${TAG:-latest}
    build:
      context: src
      dockerfile: js/graphql_endpoint/Dockerfile
      target: graphql-endpoint-deploy
    command: yarn start server
    environment:
      <<: *dgraph-env
      IS_LOCAL: "True"
      JWT_SECRET_ID: "JWT_SECRET_ID"
      PORT: ${GRAPL_GRAPHQL_PORT}
    depends_on:
      - dgraph
    ports:
      - ${GRAPL_GRAPHQL_PORT}
    networks:
      default:
        aliases:
          - ${GRAPL_GRAPHQL_HOST}

  grapl-notebook:
    image: grapl/grapl-notebook:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: grapl-notebook
    user: grapl
    environment:
      <<: *dgraph-env
    depends_on:
      - dgraph
    ports:
      - ${GRAPL_NOTEBOOK_PORT}

  ########################################################################
  # Utility Services
  ########################################################################

  grapl-provision:
    image: grapl/grapl-provision:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: grapl-provision
    command: |
      /bin/bash -c "
        export TIMEOUT=35 &&
        wait-for-it ${SQS_HOST}:${SQS_PORT} --timeout=$$TIMEOUT &&
        wait-for-it ${S3_HOST}:${S3_PORT} --timeout=$$TIMEOUT &&
        wait-for-it ${DYNAMODB_HOST}:${DYNAMODB_PORT} --timeout=$$TIMEOUT &&
        wait-for-it ${DGRAPH_HOST}:${DGRAPH_ALPHA_HTTP_EXTERNAL_PUBLIC_PORT} --timeout=$$TIMEOUT &&
        wait-for-it ${SECRETSMANAGER_HOST}:${SECRETSMANAGER_PORT} --timeout=$$TIMEOUT &&
        wait-for-it ${KAFKA_BROKER_HOST}:${KAFKA_BROKER_PORT} --timeout=$$TIMEOUT &&
        . venv/bin/activate &&
        python /home/grapl/grapl_local_provision/provision_local_identity_table.py &&
        python /home/grapl/grapl_local_provision/grapl_provision.py &&
        # Host a server on this port, so that tests can wait-for-it
        python -m http.server ${WAIT_PORT}
      "
    environment:
      <<: *aws-region
      <<: *dgraph-env
      <<: *dynamodb-env
      GRAPL_LOG_LEVEL: "${GRAPL_LOG_LEVEL:-INFO}"
      <<: *s3-env
      <<: *sqs-env
    tty: true
    depends_on:
      - dgraph
      - dynamodb
      - s3
      - secretsmanager
      - sqs

networks:
  default:
    name: grapl-network
