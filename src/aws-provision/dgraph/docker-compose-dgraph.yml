# This file can be used to setup a Dgraph cluster with 3 Dgraph Alphas
# and 1 Dgraph Zero node on a Docker Swarm with replication.
#
# It expects three instances to be part of the swarm with hostnames
# bound to $AWS01_NAME, $AWS02_NAME, and $AWS03_NAME. There is a
# constraint to make sure that each Dgraph Alpha runs on a particular
# host.
#
# Data are persisted to a Docker volume called data-volume on the
# swarm instances.
#
# Run `docker stack deploy -c docker-compose-dgraph.yml dgraph` on the
# Swarm leader to start the cluster.

version: "3.8"

networks:
  dgraph:
    driver: overlay

volumes:
  data-volume:

configs:
  envoy_config:
    file: "${PWD}/envoy.yaml"

services:
  envoy:
    image: envoyproxy/envoy:v1.15.2
    ports:
      - "9080:9080"
    networks:
      - dgraph
    configs:
      - source: envoy_config
        target: /etc/envoy/envoy.yaml
    deploy:
      mode: global
    logging:
      driver: awslogs
      options:
        awslogs-create-group: "true"
        awslogs-group: ${AWS_LOGS_GROUP}
        awslogs-stream: "envoy"

  zero:
    image: dgraph/dgraph:v21.03.1
    volumes:
      - data-volume:/dgraph
    ports:
      - "5080:5080"
      - "6080:6080"
    networks:
      - dgraph
    deploy:
      placement:
        constraints:
          - node.hostname == ${AWS01_NAME}
    logging:
      driver: awslogs
      options:
        awslogs-create-group: "true"
        awslogs-group: ${AWS_LOGS_GROUP}
        awslogs-stream: "zero"
    command: dgraph zero --my=zero:5080 --replicas 1
    depends_on:
      - envoy

  alpha1:
    image: dgraph/dgraph:v21.03.1
    hostname: "alpha1"
    volumes:
      - data-volume:/dgraph
    ports:
      - "8081:8081"
      - "9081:9081"
    networks:
      dgraph:
        aliases:
          - alpha01
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${AWS01_NAME}
    logging:
      driver: awslogs
      options:
        awslogs-create-group: "true"
        awslogs-group: ${AWS_LOGS_GROUP}
        awslogs-stream: "alpha1"
    command: dgraph alpha --my=alpha1:7081 --cache size-mb=2048 --zero=zero:5080 -o 1 --security whitelist=10.0.0.0/8
    depends_on:
      - envoy
      - zero

  alpha2:
    image: dgraph/dgraph:v21.03.1
    hostname: "alpha2"
    volumes:
      - data-volume:/dgraph
    ports:
      - "8082:8082"
      - "9082:9082"
    networks:
      dgraph:
        aliases:
          - alpha02
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${AWS02_NAME}
    logging:
      driver: awslogs
      options:
        awslogs-create-group: "true"
        awslogs-group: ${AWS_LOGS_GROUP}
        awslogs-stream: "alpha2"
    command: dgraph alpha --my=alpha2:7082 --cache size-mb=204 --zero=zero:5080 -o 2 --security whitelist=10.0.0.0/8
    depends_on:
      - envoy
      - zero

  alpha3:
    image: dgraph/dgraph:v21.03.1
    hostname: "alpha3"
    volumes:
      - data-volume:/dgraph
    ports:
      - "8083:8083"
      - "9083:9083"
    networks:
      dgraph:
        aliases:
          - alpha03
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${AWS03_NAME}
    logging:
      driver: awslogs
      options:
        awslogs-create-group: "true"
        awslogs-group: ${AWS_LOGS_GROUP}
        awslogs-stream: "alpha3"
    command: dgraph alpha --my=alpha3:7083 --cache size-mb=204 --zero=zero:5080 -o 3 --security whitelist=10.0.0.0/8
    depends_on:
      - envoy
      - zero
