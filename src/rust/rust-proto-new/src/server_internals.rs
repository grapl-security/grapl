use std::marker::PhantomData;

use crate::protocol::status::Status;

pub trait Api {}

/// This struct implements the internal gRPC representation of the server.
/// We've implemented the service trait generated by tonic
/// in such a way that it delegates to an externally supplied
/// Api. This way all the protocol buffer compiler generated
/// types are encapsulated, and the public API is implemented in terms of
/// this crate's sanitized types.
pub struct ServerInternalGrpc<T, E>
where
    E: Into<Status>,
{
    pub api_server: T,
    _e: PhantomData<E>,
}

impl<T, E> ServerInternalGrpc<T, E>
where
    E: Into<Status>,
{
    pub fn new(api_server: T) -> Self {
        ServerInternalGrpc {
            api_server,
            _e: PhantomData,
        }
    }
}
