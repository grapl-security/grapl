/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::option::Option;
use std::{
    borrow::Borrow,
    pin::Pin,
    rc::Rc,
};

use futures::Future;
use hyper;

use super::{
    configuration,
    request as __internal_request,
    Error,
};

pub struct NamespacesApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> NamespacesApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> NamespacesApiClient<C> {
        NamespacesApiClient { configuration }
    }
}

pub trait NamespacesApi {
    fn create_namespace(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_namespace(
        &self,
        namespace_name: &str,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_namespace(
        &self,
        namespace_name: &str,
        region: Option<&str>,
        namespace: Option<&str>,
        index: Option<i32>,
        wait: Option<&str>,
        stale: Option<&str>,
        prefix: Option<&str>,
        x_nomad_token: Option<&str>,
        per_page: Option<i32>,
        next_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::Namespace, Error>>>>;
    fn get_namespaces(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        index: Option<i32>,
        wait: Option<&str>,
        stale: Option<&str>,
        prefix: Option<&str>,
        x_nomad_token: Option<&str>,
        per_page: Option<i32>,
        next_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::Namespace>, Error>>>>;
    fn post_namespace(
        &self,
        namespace_name: &str,
        namespace2: crate::models::Namespace,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect> NamespacesApi for NamespacesApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn create_namespace(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/namespace".to_string())
                .with_auth(__internal_request::Auth::ApiKey(
                    __internal_request::ApiKey {
                        in_header: true,
                        in_query: false,
                        param_name: "X-Nomad-Token".to_owned(),
                    },
                ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = idempotency_token {
            let query_value = s.to_string();
            req = req.with_query_param("idempotency_token".to_string(), query_value);
        }
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_namespace(
        &self,
        namespace_name: &str,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/namespace/{namespaceName}".to_string(),
        )
        .with_auth(__internal_request::Auth::ApiKey(
            __internal_request::ApiKey {
                in_header: true,
                in_query: false,
                param_name: "X-Nomad-Token".to_owned(),
            },
        ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = idempotency_token {
            let query_value = s.to_string();
            req = req.with_query_param("idempotency_token".to_string(), query_value);
        }
        req = req.with_path_param("namespaceName".to_string(), namespace_name.to_string());
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_namespace(
        &self,
        namespace_name: &str,
        region: Option<&str>,
        namespace: Option<&str>,
        index: Option<i32>,
        wait: Option<&str>,
        stale: Option<&str>,
        prefix: Option<&str>,
        x_nomad_token: Option<&str>,
        per_page: Option<i32>,
        next_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::Namespace, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/namespace/{namespaceName}".to_string(),
        )
        .with_auth(__internal_request::Auth::ApiKey(
            __internal_request::ApiKey {
                in_header: true,
                in_query: false,
                param_name: "X-Nomad-Token".to_owned(),
            },
        ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = wait {
            let query_value = s.to_string();
            req = req.with_query_param("wait".to_string(), query_value);
        }
        if let Some(ref s) = stale {
            let query_value = s.to_string();
            req = req.with_query_param("stale".to_string(), query_value);
        }
        if let Some(ref s) = prefix {
            let query_value = s.to_string();
            req = req.with_query_param("prefix".to_string(), query_value);
        }
        if let Some(ref s) = per_page {
            let query_value = s.to_string();
            req = req.with_query_param("per_page".to_string(), query_value);
        }
        if let Some(ref s) = next_token {
            let query_value = s.to_string();
            req = req.with_query_param("next_token".to_string(), query_value);
        }
        req = req.with_path_param("namespaceName".to_string(), namespace_name.to_string());
        if let Some(param_value) = index {
            req = req.with_header_param("index".to_string(), param_value.to_string());
        }
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_namespaces(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        index: Option<i32>,
        wait: Option<&str>,
        stale: Option<&str>,
        prefix: Option<&str>,
        x_nomad_token: Option<&str>,
        per_page: Option<i32>,
        next_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::Namespace>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/namespaces".to_string())
                .with_auth(__internal_request::Auth::ApiKey(
                    __internal_request::ApiKey {
                        in_header: true,
                        in_query: false,
                        param_name: "X-Nomad-Token".to_owned(),
                    },
                ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = wait {
            let query_value = s.to_string();
            req = req.with_query_param("wait".to_string(), query_value);
        }
        if let Some(ref s) = stale {
            let query_value = s.to_string();
            req = req.with_query_param("stale".to_string(), query_value);
        }
        if let Some(ref s) = prefix {
            let query_value = s.to_string();
            req = req.with_query_param("prefix".to_string(), query_value);
        }
        if let Some(ref s) = per_page {
            let query_value = s.to_string();
            req = req.with_query_param("per_page".to_string(), query_value);
        }
        if let Some(ref s) = next_token {
            let query_value = s.to_string();
            req = req.with_query_param("next_token".to_string(), query_value);
        }
        if let Some(param_value) = index {
            req = req.with_header_param("index".to_string(), param_value.to_string());
        }
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn post_namespace(
        &self,
        namespace_name: &str,
        namespace2: crate::models::Namespace,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/namespace/{namespaceName}".to_string(),
        )
        .with_auth(__internal_request::Auth::ApiKey(
            __internal_request::ApiKey {
                in_header: true,
                in_query: false,
                param_name: "X-Nomad-Token".to_owned(),
            },
        ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = idempotency_token {
            let query_value = s.to_string();
            req = req.with_query_param("idempotency_token".to_string(), query_value);
        }
        req = req.with_path_param("namespaceName".to_string(), namespace_name.to_string());
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }
        req = req.with_body_param(namespace2);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
