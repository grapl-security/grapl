/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{
    configuration,
    Error,
};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`get_deployment`]
#[derive(Clone, Debug, Default)]
pub struct GetDeploymentParams {
    /// Deployment ID.
    pub deployment_id: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_deployment_allocations`]
#[derive(Clone, Debug, Default)]
pub struct GetDeploymentAllocationsParams {
    /// Deployment ID.
    pub deployment_id: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_deployments`]
#[derive(Clone, Debug, Default)]
pub struct GetDeploymentsParams {
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`post_deployment_allocation_health`]
#[derive(Clone, Debug, Default)]
pub struct PostDeploymentAllocationHealthParams {
    /// Deployment ID.
    pub deployment_id: String,
    pub deployment_alloc_health_request: crate::models::DeploymentAllocHealthRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_deployment_fail`]
#[derive(Clone, Debug, Default)]
pub struct PostDeploymentFailParams {
    /// Deployment ID.
    pub deployment_id: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_deployment_pause`]
#[derive(Clone, Debug, Default)]
pub struct PostDeploymentPauseParams {
    /// Deployment ID.
    pub deployment_id: String,
    pub deployment_pause_request: crate::models::DeploymentPauseRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_deployment_promote`]
#[derive(Clone, Debug, Default)]
pub struct PostDeploymentPromoteParams {
    /// Deployment ID.
    pub deployment_id: String,
    pub deployment_promote_request: crate::models::DeploymentPromoteRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_deployment_unblock`]
#[derive(Clone, Debug, Default)]
pub struct PostDeploymentUnblockParams {
    /// Deployment ID.
    pub deployment_id: String,
    pub deployment_unblock_request: crate::models::DeploymentUnblockRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for typed errors of method [`get_deployment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeploymentError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_deployment_allocations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeploymentAllocationsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_deployments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeploymentsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_deployment_allocation_health`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostDeploymentAllocationHealthError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_deployment_fail`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostDeploymentFailError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_deployment_pause`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostDeploymentPauseError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_deployment_promote`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostDeploymentPromoteError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_deployment_unblock`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostDeploymentUnblockError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

pub async fn get_deployment(
    configuration: &configuration::Configuration,
    params: GetDeploymentParams,
) -> Result<crate::models::Deployment, Error<GetDeploymentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDeploymentError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_deployment_allocations(
    configuration: &configuration::Configuration,
    params: GetDeploymentAllocationsParams,
) -> Result<Vec<crate::models::AllocationListStub>, Error<GetDeploymentAllocationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/allocations/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDeploymentAllocationsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_deployments(
    configuration: &configuration::Configuration,
    params: GetDeploymentsParams,
) -> Result<Vec<crate::models::Deployment>, Error<GetDeploymentsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/deployments", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDeploymentsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_deployment_allocation_health(
    configuration: &configuration::Configuration,
    params: PostDeploymentAllocationHealthParams,
) -> Result<crate::models::DeploymentUpdateResponse, Error<PostDeploymentAllocationHealthError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let deployment_alloc_health_request = params.deployment_alloc_health_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/allocation-health/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&deployment_alloc_health_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostDeploymentAllocationHealthError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_deployment_fail(
    configuration: &configuration::Configuration,
    params: PostDeploymentFailParams,
) -> Result<crate::models::DeploymentUpdateResponse, Error<PostDeploymentFailError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/fail/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostDeploymentFailError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_deployment_pause(
    configuration: &configuration::Configuration,
    params: PostDeploymentPauseParams,
) -> Result<crate::models::DeploymentUpdateResponse, Error<PostDeploymentPauseError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let deployment_pause_request = params.deployment_pause_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/pause/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&deployment_pause_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostDeploymentPauseError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_deployment_promote(
    configuration: &configuration::Configuration,
    params: PostDeploymentPromoteParams,
) -> Result<crate::models::DeploymentUpdateResponse, Error<PostDeploymentPromoteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let deployment_promote_request = params.deployment_promote_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/promote/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&deployment_promote_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostDeploymentPromoteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_deployment_unblock(
    configuration: &configuration::Configuration,
    params: PostDeploymentUnblockParams,
) -> Result<crate::models::DeploymentUpdateResponse, Error<PostDeploymentUnblockError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let deployment_id = params.deployment_id;
    let deployment_unblock_request = params.deployment_unblock_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/deployment/unblock/{deploymentID}",
        local_var_configuration.base_path,
        deploymentID = crate::apis::urlencode(deployment_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&deployment_unblock_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostDeploymentUnblockError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
