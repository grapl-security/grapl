/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct RegionsApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> RegionsApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RegionsApiClient<C> {
        RegionsApiClient {
            configuration,
        }
    }
}

pub trait RegionsApi {
    fn get_regions(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<String>, Error>>>>;
}

impl<C: hyper::client::connect::Connect>RegionsApi for RegionsApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn get_regions(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/regions".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Nomad-Token".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

}
