/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::option::Option;
use std::{
    borrow::Borrow,
    pin::Pin,
    rc::Rc,
};

use futures::Future;
use hyper;

use super::{
    configuration,
    request as __internal_request,
    Error,
};

pub struct SystemApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> SystemApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SystemApiClient<C> {
        SystemApiClient { configuration }
    }
}

pub trait SystemApi {
    fn put_system_gc(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn put_system_reconcile_summaries(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect> SystemApi for SystemApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn put_system_gc(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::PUT, "/system/gc".to_string())
                .with_auth(__internal_request::Auth::ApiKey(
                    __internal_request::ApiKey {
                        in_header: true,
                        in_query: false,
                        param_name: "X-Nomad-Token".to_owned(),
                    },
                ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = idempotency_token {
            let query_value = s.to_string();
            req = req.with_query_param("idempotency_token".to_string(), query_value);
        }
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn put_system_reconcile_summaries(
        &self,
        region: Option<&str>,
        namespace: Option<&str>,
        x_nomad_token: Option<&str>,
        idempotency_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/system/reconcile/summaries".to_string(),
        )
        .with_auth(__internal_request::Auth::ApiKey(
            __internal_request::ApiKey {
                in_header: true,
                in_query: false,
                param_name: "X-Nomad-Token".to_owned(),
            },
        ));
        if let Some(ref s) = region {
            let query_value = s.to_string();
            req = req.with_query_param("region".to_string(), query_value);
        }
        if let Some(ref s) = namespace {
            let query_value = s.to_string();
            req = req.with_query_param("namespace".to_string(), query_value);
        }
        if let Some(ref s) = idempotency_token {
            let query_value = s.to_string();
            req = req.with_query_param("idempotency_token".to_string(), query_value);
        }
        if let Some(param_value) = x_nomad_token {
            req = req.with_header_param("X-Nomad-Token".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
