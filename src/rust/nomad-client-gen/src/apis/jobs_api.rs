/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{
    configuration,
    Error,
};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`delete_job`]
#[derive(Clone, Debug, Default)]
pub struct DeleteJobParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
    /// Boolean flag indicating whether to purge allocations of the job after deleting.
    pub purge: Option<bool>,
    /// Boolean flag indicating whether the operation should apply to all instances of the job globally.
    pub global: Option<bool>,
}

/// struct for passing parameters to the method [`get_job`]
#[derive(Clone, Debug, Default)]
pub struct GetJobParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_job_allocations`]
#[derive(Clone, Debug, Default)]
pub struct GetJobAllocationsParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
    /// Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered.
    pub all: Option<bool>,
}

/// struct for passing parameters to the method [`get_job_deployment`]
#[derive(Clone, Debug, Default)]
pub struct GetJobDeploymentParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_job_deployments`]
#[derive(Clone, Debug, Default)]
pub struct GetJobDeploymentsParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
    /// Flag indicating whether to constrain by job creation index or not.
    pub all: Option<i32>,
}

/// struct for passing parameters to the method [`get_job_evaluations`]
#[derive(Clone, Debug, Default)]
pub struct GetJobEvaluationsParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_job_scale_status`]
#[derive(Clone, Debug, Default)]
pub struct GetJobScaleStatusParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_job_summary`]
#[derive(Clone, Debug, Default)]
pub struct GetJobSummaryParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_job_versions`]
#[derive(Clone, Debug, Default)]
pub struct GetJobVersionsParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
    /// Boolean flag indicating whether to compute job diffs.
    pub diffs: Option<bool>,
}

/// struct for passing parameters to the method [`get_jobs`]
#[derive(Clone, Debug, Default)]
pub struct GetJobsParams {
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job`]
#[derive(Clone, Debug, Default)]
pub struct PostJobParams {
    /// The job identifier.
    pub job_name: String,
    pub job_register_request: crate::models::JobRegisterRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_dispatch`]
#[derive(Clone, Debug, Default)]
pub struct PostJobDispatchParams {
    /// The job identifier.
    pub job_name: String,
    pub job_dispatch_request: crate::models::JobDispatchRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_evaluate`]
#[derive(Clone, Debug, Default)]
pub struct PostJobEvaluateParams {
    /// The job identifier.
    pub job_name: String,
    pub job_evaluate_request: crate::models::JobEvaluateRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_parse`]
#[derive(Clone, Debug, Default)]
pub struct PostJobParseParams {
    pub jobs_parse_request: crate::models::JobsParseRequest,
}

/// struct for passing parameters to the method [`post_job_periodic_force`]
#[derive(Clone, Debug, Default)]
pub struct PostJobPeriodicForceParams {
    /// The job identifier.
    pub job_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_plan`]
#[derive(Clone, Debug, Default)]
pub struct PostJobPlanParams {
    /// The job identifier.
    pub job_name: String,
    pub job_plan_request: crate::models::JobPlanRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_revert`]
#[derive(Clone, Debug, Default)]
pub struct PostJobRevertParams {
    /// The job identifier.
    pub job_name: String,
    pub job_revert_request: crate::models::JobRevertRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_scaling_request`]
#[derive(Clone, Debug, Default)]
pub struct PostJobScalingRequestParams {
    /// The job identifier.
    pub job_name: String,
    pub scaling_request: crate::models::ScalingRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_stability`]
#[derive(Clone, Debug, Default)]
pub struct PostJobStabilityParams {
    /// The job identifier.
    pub job_name: String,
    pub job_stability_request: crate::models::JobStabilityRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`post_job_validate_request`]
#[derive(Clone, Debug, Default)]
pub struct PostJobValidateRequestParams {
    pub job_validate_request: crate::models::JobValidateRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`register_job`]
#[derive(Clone, Debug, Default)]
pub struct RegisterJobParams {
    pub job_register_request: crate::models::JobRegisterRequest,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for typed errors of method [`delete_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteJobError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_allocations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobAllocationsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_deployment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobDeploymentError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_deployments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobDeploymentsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_evaluations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobEvaluationsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_scale_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobScaleStatusError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobSummaryError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_versions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobVersionsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_jobs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobsError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_dispatch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobDispatchError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_evaluate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobEvaluateError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_parse`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobParseError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_periodic_force`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobPeriodicForceError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_plan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobPlanError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_revert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobRevertError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_scaling_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobScalingRequestError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_stability`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobStabilityError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_job_validate_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJobValidateRequestError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`register_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegisterJobError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

pub async fn delete_job(
    configuration: &configuration::Configuration,
    params: DeleteJobParams,
) -> Result<crate::models::JobDeregisterResponse, Error<DeleteJobError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;
    let purge = params.purge;
    let global = params.global;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = purge {
        local_var_req_builder =
            local_var_req_builder.query(&[("purge", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = global {
        local_var_req_builder =
            local_var_req_builder.query(&[("global", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteJobError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job(
    configuration: &configuration::Configuration,
    params: GetJobParams,
) -> Result<crate::models::Job, Error<GetJobError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_allocations(
    configuration: &configuration::Configuration,
    params: GetJobAllocationsParams,
) -> Result<Vec<crate::models::AllocationListStub>, Error<GetJobAllocationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;
    let all = params.all;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/allocations",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = all {
        local_var_req_builder = local_var_req_builder.query(&[("all", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobAllocationsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_deployment(
    configuration: &configuration::Configuration,
    params: GetJobDeploymentParams,
) -> Result<crate::models::Deployment, Error<GetJobDeploymentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/deployment",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobDeploymentError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_deployments(
    configuration: &configuration::Configuration,
    params: GetJobDeploymentsParams,
) -> Result<Vec<crate::models::Deployment>, Error<GetJobDeploymentsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;
    let all = params.all;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/deployments",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = all {
        local_var_req_builder = local_var_req_builder.query(&[("all", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobDeploymentsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_evaluations(
    configuration: &configuration::Configuration,
    params: GetJobEvaluationsParams,
) -> Result<Vec<crate::models::Evaluation>, Error<GetJobEvaluationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/evaluations",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobEvaluationsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_scale_status(
    configuration: &configuration::Configuration,
    params: GetJobScaleStatusParams,
) -> Result<crate::models::JobScaleStatusResponse, Error<GetJobScaleStatusError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/scale",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobScaleStatusError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_summary(
    configuration: &configuration::Configuration,
    params: GetJobSummaryParams,
) -> Result<crate::models::JobSummary, Error<GetJobSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/summary",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobSummaryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_job_versions(
    configuration: &configuration::Configuration,
    params: GetJobVersionsParams,
) -> Result<crate::models::JobVersionsResponse, Error<GetJobVersionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;
    let diffs = params.diffs;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/versions",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = diffs {
        local_var_req_builder =
            local_var_req_builder.query(&[("diffs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobVersionsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_jobs(
    configuration: &configuration::Configuration,
    params: GetJobsParams,
) -> Result<Vec<crate::models::JobListStub>, Error<GetJobsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/jobs", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJobsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job(
    configuration: &configuration::Configuration,
    params: PostJobParams,
) -> Result<crate::models::JobRegisterResponse, Error<PostJobError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let job_register_request = params.job_register_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_register_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_dispatch(
    configuration: &configuration::Configuration,
    params: PostJobDispatchParams,
) -> Result<crate::models::JobDispatchResponse, Error<PostJobDispatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let job_dispatch_request = params.job_dispatch_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/dispatch",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_dispatch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobDispatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_evaluate(
    configuration: &configuration::Configuration,
    params: PostJobEvaluateParams,
) -> Result<crate::models::JobRegisterResponse, Error<PostJobEvaluateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let job_evaluate_request = params.job_evaluate_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/evaluate",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_evaluate_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobEvaluateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_parse(
    configuration: &configuration::Configuration,
    params: PostJobParseParams,
) -> Result<crate::models::Job, Error<PostJobParseError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let jobs_parse_request = params.jobs_parse_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/jobs/parse", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&jobs_parse_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobParseError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_periodic_force(
    configuration: &configuration::Configuration,
    params: PostJobPeriodicForceParams,
) -> Result<crate::models::PeriodicForceResponse, Error<PostJobPeriodicForceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/periodic/force",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobPeriodicForceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_plan(
    configuration: &configuration::Configuration,
    params: PostJobPlanParams,
) -> Result<crate::models::JobPlanResponse, Error<PostJobPlanError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let job_plan_request = params.job_plan_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/plan",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_plan_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobPlanError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_revert(
    configuration: &configuration::Configuration,
    params: PostJobRevertParams,
) -> Result<crate::models::JobRegisterResponse, Error<PostJobRevertError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let job_revert_request = params.job_revert_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/revert",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_revert_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobRevertError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_scaling_request(
    configuration: &configuration::Configuration,
    params: PostJobScalingRequestParams,
) -> Result<crate::models::JobRegisterResponse, Error<PostJobScalingRequestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let scaling_request = params.scaling_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/scale",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&scaling_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobScalingRequestError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_stability(
    configuration: &configuration::Configuration,
    params: PostJobStabilityParams,
) -> Result<crate::models::JobStabilityResponse, Error<PostJobStabilityError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_name = params.job_name;
    let job_stability_request = params.job_stability_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/job/{jobName}/stable",
        local_var_configuration.base_path,
        jobName = crate::apis::urlencode(job_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_stability_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobStabilityError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_job_validate_request(
    configuration: &configuration::Configuration,
    params: PostJobValidateRequestParams,
) -> Result<crate::models::JobValidateResponse, Error<PostJobValidateRequestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_validate_request = params.job_validate_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/validate/job", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_validate_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostJobValidateRequestError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn register_job(
    configuration: &configuration::Configuration,
    params: RegisterJobParams,
) -> Result<crate::models::JobRegisterResponse, Error<RegisterJobError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_register_request = params.job_register_request;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/jobs", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&job_register_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RegisterJobError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
