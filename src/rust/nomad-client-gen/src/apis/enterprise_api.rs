/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{
    configuration,
    Error,
};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`create_quota_spec`]
#[derive(Clone, Debug, Default)]
pub struct CreateQuotaSpecParams {
    pub quota_spec: crate::models::QuotaSpec,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`delete_quota_spec`]
#[derive(Clone, Debug, Default)]
pub struct DeleteQuotaSpecParams {
    /// The quota spec identifier.
    pub spec_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for passing parameters to the method [`get_quota_spec`]
#[derive(Clone, Debug, Default)]
pub struct GetQuotaSpecParams {
    /// The quota spec identifier.
    pub spec_name: String,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`get_quotas`]
#[derive(Clone, Debug, Default)]
pub struct GetQuotasParams {
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// If set, wait until query exceeds given index. Must be provided with WaitParam.
    pub index: Option<i32>,
    /// Provided with IndexParam to wait for change.
    pub wait: Option<String>,
    /// If present, results will include stale reads.
    pub stale: Option<String>,
    /// Constrains results to jobs that start with the defined prefix
    pub prefix: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Maximum number of results to return.
    pub per_page: Option<i32>,
    /// Indicates where to start paging for queries that support pagination.
    pub next_token: Option<String>,
}

/// struct for passing parameters to the method [`post_quota_spec`]
#[derive(Clone, Debug, Default)]
pub struct PostQuotaSpecParams {
    /// The quota spec identifier.
    pub spec_name: String,
    pub quota_spec: crate::models::QuotaSpec,
    /// Filters results based on the specified region.
    pub region: Option<String>,
    /// Filters results based on the specified namespace.
    pub namespace: Option<String>,
    /// A Nomad ACL token.
    pub x_nomad_token: Option<String>,
    /// Can be used to ensure operations are only run once.
    pub idempotency_token: Option<String>,
}

/// struct for typed errors of method [`create_quota_spec`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateQuotaSpecError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_quota_spec`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteQuotaSpecError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_quota_spec`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQuotaSpecError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_quotas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQuotasError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_quota_spec`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostQuotaSpecError {
    Status400(),
    Status403(),
    Status405(),
    Status500(),
    UnknownValue(serde_json::Value),
}

pub async fn create_quota_spec(
    configuration: &configuration::Configuration,
    params: CreateQuotaSpecParams,
) -> Result<(), Error<CreateQuotaSpecError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let quota_spec = params.quota_spec;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/quota", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&quota_spec);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreateQuotaSpecError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_quota_spec(
    configuration: &configuration::Configuration,
    params: DeleteQuotaSpecParams,
) -> Result<(), Error<DeleteQuotaSpecError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let spec_name = params.spec_name;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/quota/{specName}",
        local_var_configuration.base_path,
        specName = crate::apis::urlencode(spec_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteQuotaSpecError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_quota_spec(
    configuration: &configuration::Configuration,
    params: GetQuotaSpecParams,
) -> Result<crate::models::QuotaSpec, Error<GetQuotaSpecError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let spec_name = params.spec_name;
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/quota/{specName}",
        local_var_configuration.base_path,
        specName = crate::apis::urlencode(spec_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetQuotaSpecError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_quotas(
    configuration: &configuration::Configuration,
    params: GetQuotasParams,
) -> Result<Vec<serde_json::Value>, Error<GetQuotasError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let region = params.region;
    let namespace = params.namespace;
    let index = params.index;
    let wait = params.wait;
    let stale = params.stale;
    let prefix = params.prefix;
    let x_nomad_token = params.x_nomad_token;
    let per_page = params.per_page;
    let next_token = params.next_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/quotas", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wait {
        local_var_req_builder =
            local_var_req_builder.query(&[("wait", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stale {
        local_var_req_builder =
            local_var_req_builder.query(&[("stale", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = index {
        local_var_req_builder =
            local_var_req_builder.header("index", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetQuotasError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_quota_spec(
    configuration: &configuration::Configuration,
    params: PostQuotaSpecParams,
) -> Result<(), Error<PostQuotaSpecError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let spec_name = params.spec_name;
    let quota_spec = params.quota_spec;
    let region = params.region;
    let namespace = params.namespace;
    let x_nomad_token = params.x_nomad_token;
    let idempotency_token = params.idempotency_token;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/quota/{specName}",
        local_var_configuration.base_path,
        specName = crate::apis::urlencode(spec_name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = namespace {
        local_var_req_builder =
            local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idempotency_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("idempotency_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_nomad_token {
        local_var_req_builder =
            local_var_req_builder.header("X-Nomad-Token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Nomad-Token", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&quota_spec);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PostQuotaSpecError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
