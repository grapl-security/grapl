/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ServiceCheck {
    #[serde(rename = "AddressMode", skip_serializing_if = "Option::is_none")]
    pub address_mode: Option<String>,
    #[serde(rename = "Args", skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    #[serde(rename = "Body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "CheckRestart", skip_serializing_if = "Option::is_none")]
    pub check_restart: Option<Box<crate::models::CheckRestart>>,
    #[serde(rename = "Command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    #[serde(rename = "Expose", skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
    #[serde(
        rename = "FailuresBeforeCritical",
        skip_serializing_if = "Option::is_none"
    )]
    pub failures_before_critical: Option<i32>,
    #[serde(rename = "GRPCService", skip_serializing_if = "Option::is_none")]
    pub grpc_service: Option<String>,
    #[serde(rename = "GRPCUseTLS", skip_serializing_if = "Option::is_none")]
    pub grpc_use_tls: Option<bool>,
    #[serde(rename = "Header", skip_serializing_if = "Option::is_none")]
    pub header: Option<::std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "InitialStatus", skip_serializing_if = "Option::is_none")]
    pub initial_status: Option<String>,
    #[serde(rename = "Interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<i64>,
    #[serde(rename = "Method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "OnUpdate", skip_serializing_if = "Option::is_none")]
    pub on_update: Option<String>,
    #[serde(rename = "Path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "PortLabel", skip_serializing_if = "Option::is_none")]
    pub port_label: Option<String>,
    #[serde(rename = "Protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(
        rename = "SuccessBeforePassing",
        skip_serializing_if = "Option::is_none"
    )]
    pub success_before_passing: Option<i32>,
    #[serde(rename = "TLSSkipVerify", skip_serializing_if = "Option::is_none")]
    pub tls_skip_verify: Option<bool>,
    #[serde(rename = "TaskName", skip_serializing_if = "Option::is_none")]
    pub task_name: Option<String>,
    #[serde(rename = "Timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
}

impl ServiceCheck {
    pub fn new() -> ServiceCheck {
        ServiceCheck {
            address_mode: None,
            args: None,
            body: None,
            check_restart: None,
            command: None,
            expose: None,
            failures_before_critical: None,
            grpc_service: None,
            grpc_use_tls: None,
            header: None,
            id: None,
            initial_status: None,
            interval: None,
            method: None,
            name: None,
            on_update: None,
            path: None,
            port_label: None,
            protocol: None,
            success_before_passing: None,
            tls_skip_verify: None,
            task_name: None,
            timeout: None,
            _type: None,
        }
    }
}
