use crate::protocol::status::Status;

/// This struct implements the internal gRPC representation of the server.
/// We've implemented the service trait generated by tonic
/// in such a way that it delegates to an externally supplied
/// Api. This way all the protocol buffer compiler generated
/// types are encapsulated, and the public API is implemented in terms of
/// this crate's sanitized types.
pub struct GrpcApi<T> {
    pub api_server: T,
}

impl<T> GrpcApi<T> {
    pub fn new(api_server: T) -> Self {
        GrpcApi { api_server }
    }
}

impl From<crate::SerDeError> for tonic::Status {
    fn from(e: crate::SerDeError) -> Self {
        tonic::Status::unknown(e.to_string())
    }
}

impl From<crate::SerDeError> for Status {
    fn from(e: crate::SerDeError) -> Self {
        tonic::Status::from(e).into()
    }
}

/// This macro implements boilerplate code to translate between the native types
/// exported by this library and tonic/prost types in the transport layer.
/// - turn a Protobuf request into a Rust-native request
/// - feed that into our api server to get a Rust-native response
/// - turn Rust-native response into a Protobuf response
/// Ideally this would be a generic function, but rust has issues with
/// async function pointers (like self.api_server.any_rpc).
#[macro_export]
macro_rules! execute_rpc {
    ($self: ident, $request: ident, $rpc_name: ident) => {{
        {
            let rpc_name = stringify!($rpc_name);
            tracing::debug!("Executing RPC {rpc_name}");

            let proto_request = $request.into_inner();

            let native_request = proto_request.try_into()?;

            let native_response = $self
                .api_server
                .$rpc_name(native_request)
                .await
                .map_err(Into::into)?;

            let proto_response = native_response
                .try_into()
                .map_err($crate::SerDeError::from)?;

            tracing::debug!("Executing RPC {rpc_name} - COMPLETE");
            Ok(tonic::Response::new(proto_response))
        }
    }};
}
