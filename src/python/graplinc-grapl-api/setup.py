"""Setuptools script for Grapl graph-descriptions"""

import os
import shutil
import subprocess
import sys
from distutils.command.build import build as _build
from distutils.command.clean import clean as _clean
from distutils.spawn import find_executable

from setuptools import setup
from setuptools.command.build_py import build_py as _build_py
from setuptools.command.develop import develop as _develop
from setuptools.command.egg_info import egg_info as _egg_info
from setuptools.command.install import install as _install
from setuptools.command.sdist import sdist as _sdist
from setuptools.command.test import test as _test
from wheel.bdist_wheel import bdist_wheel as _bdist_wheel

# The current directory
HERE = os.path.abspath(os.path.dirname(__file__))

# The source root of all the protobuf definitions. This is where we will look to
# resolve all protobuf imports.
PROTO_PATH = os.path.join(HERE, "../../proto")

# Only compile our protobufs within the graplinc package hierarchy. Currently
# there are some Google packages vendored in, and we don't need to compile them,
# only reference them.
OUR_PROTO_PATH = os.path.join(PROTO_PATH, "graplinc")

# The directory where all the generated code will be deposited. The protobuf
# package hierarchy will be responsible for creating a "graplinc" directory
# here.
OUT_DIR = HERE

# The path to the final generated code within OUT_DIR.
FINAL_PACKAGE_PATH = os.path.join(OUT_DIR, "graplinc")


def is_comment(line):
    """check whether a line is a comment"""
    return line.strip().startswith("#")


def find_requirements():
    with open(os.path.join(HERE, "requirements.txt")) as requirements:
        return tuple(line.strip() for line in requirements if not is_comment(line))


def find_version():
    with open(os.path.join(HERE, "VERSION")) as version:
        return version.read().strip()


def find_protoc():
    """find the protobuf compiler

    returns absolute path to protoc, raises an exception if absent
    """
    if "PROTOC" in os.environ:
        return os.environ["PROTOC"]
    protoc = find_executable("protoc")
    if protoc is None:
        raise Exception("Could not locate protoc")
    return protoc


def compile_protobuf(proto_file, proto_dir, out_dir):
    """Compile `proto_file` to a `*_pb2.py` file in `out_dir`.

    `proto_dir` is used as a `--proto_path` argument to `protoc`.
    """
    protoc = find_protoc()
    sys.stdout.write(f"compiling protobuf {proto_file}\n")
    if (
        subprocess.call(
            [protoc, f"--proto_path={proto_dir}", f"--python_out={out_dir}", proto_file]
        )
        != 0
    ):
        raise Exception(f"Failed to compile protobuf {proto_file}")


def find_proto_files():
    """Find all the .proto files under our protobuf hierarchy"""
    for (base_path, _, files) in os.walk(OUR_PROTO_PATH):
        for file_name in files:
            if file_name.endswith(".proto"):
                full_path = os.path.join(base_path, file_name)
                print(f"Found protobuf file {full_path}")
                yield full_path


def compile_all_protobufs():
    """walk the proto directory tree and compile every .proto file"""
    for proto_file in find_proto_files():
        compile_protobuf(proto_file, PROTO_PATH, OUT_DIR)
    # build a package structure in the OUT_DIR
    for (base_path, _, files) in os.walk(FINAL_PACKAGE_PATH):
        if base_path.endswith("graplinc") or base_path.endswith("graplinc/grapl"):
            # This are going to be a namespace packages, so don't give them an __init__.py file
            continue
        if "__init__.py" not in files:
            with open(os.path.join(base_path, "__init__.py"), "w") as init:
                init.write("# generated by graplinc-grapl-api/setup.py\n")
                init.write("import sys\n")
                init.write("from pathlib import Path\n\n")
                init.write("HERE = str(Path(__file__).parent)\n")
                init.write("if HERE not in sys.path:\n")
                init.write("    sys.path.append(HERE)\n")


class bdist_wheel(_bdist_wheel):
    def run(self):
        compile_all_protobufs()
        _bdist_wheel.run(self)


class build(_build):
    def run(self):
        compile_all_protobufs()
        _build.run(self)


class build_py(_build_py):
    def run(self):
        compile_all_protobufs()
        _build_py.run(self)


class clean(_clean):
    def run(self):
        if os.path.exists(FINAL_PACKAGE_PATH):
            shutil.rmtree(FINAL_PACKAGE_PATH)
        build_dir = os.path.join(HERE, "build")
        if os.path.exists(build_dir):
            shutil.rmtree(build_dir)
        dist_dir = os.path.join(HERE, "dist")
        if os.path.exists(dist_dir):
            shutil.rmtree(dist_dir)
        egg_info_dir = os.path.join(HERE, "graplinc_grapl_api.egg-info")
        if os.path.exists(egg_info_dir):
            shutil.rmtree(egg_info_dir)
        staging_dir = os.path.join(HERE, f"graplinc-grapl-api-{find_version()}")
        if os.path.exists(staging_dir):
            shutil.rmtree(staging_dir)

        _clean.run(self)


class develop(_develop):
    def run(self):
        compile_all_protobufs()
        _develop.run(self)


class egg_info(_egg_info):
    def run(self):
        compile_all_protobufs()
        _egg_info.run(self)


class install(_install):
    def run(self):
        compile_all_protobufs()
        _install.run(self)


class sdist(_sdist):
    def run(self):
        compile_all_protobufs()
        _sdist.run(self)


class test(_test):
    def run(self):
        compile_all_protobufs()
        _test.run(self)


__version__ = find_version()

setup(
    name="graplinc-grapl-api",
    version=__version__,
    author="Grapl, Inc.",
    author_email="grapl.code@graplsecurity.com",
    url="https://github.com/grapl-security/grapl",
    description="Grapl API protobuf definitions",
    # Manually listing packages for now because using find_namespace_packages
    # here actually runs before the code is generated.
    packages=(
        [
            "graplinc.grapl.api",
            "graplinc.grapl.api.graph",
            "graplinc.grapl.api.graph.v1beta1",
            "graplinc.grapl.pipeline",
            "graplinc.grapl.pipeline.v1beta1",
        ]
    ),
    zip_safe=False,
    cmdclass={
        "bdist_wheel": bdist_wheel,
        "build": build,
        "build_py": build_py,
        "clean": clean,
        "develop": develop,
        "egg_info": egg_info,
        "install": install,
        "sdist": sdist,
        "test": test,
    },
    install_requires=find_requirements(),
    setup_requires=("wheel",),
)
