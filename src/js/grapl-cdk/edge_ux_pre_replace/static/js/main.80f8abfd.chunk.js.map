{"version":3,"sources":["components/login/styles.tsx","services/constants.ts","services/fetch.ts","services/login/loginService.tsx","components/login/utils/passwordHashing.tsx","components/login/Login.tsx","components/graphDisplay/graphVizualization/nodeColoring.tsx","components/graphDisplay/graphVizualization/nodeCalcs.tsx","components/graphDisplay/graphVizualization/linkCalcs.tsx","components/graphDisplay/graphLayout/labels.tsx","services/graphQLRequests/retrieveGraphReq.tsx","components/graphDisplay/graphLayout/graph_traverse.tsx","components/graphDisplay/graphLayout/vizGraphFromLensScope.tsx","components/graphDisplay/graphLayout/mapNodeProps.tsx","components/graphDisplay/graphLayout/mergeGraphs.tsx","components/graphDisplay/graphUpdates/updateGraph.tsx","components/graphDisplay/graphVizualization/graphColors.tsx","components/graphDisplay/GraphDisplay.tsx","components/engagementView/sidebar/tables/nodeTable/nodeTableHeader.tsx","components/engagementView/sidebar/tables/nodeTable/nodeTableStyles.tsx","components/engagementView/sidebar/tables/nodeTable/NodeTable.tsx","components/engagementView/sidebar/tables/lensTable/lensTableStyles.tsx","components/engagementView/sidebar/tables/lensTable/selectLens.tsx","components/engagementView/sidebar/tables/lensTable/lensTable.tsx","services/graphQLRequests/getLenses.tsx","components/engagementView/sidebar/tables/toggleLensTable.tsx","components/engagementView/sidebar/tables/toggleNodeDetailTable.tsx","components/engagementView/sidebar/LensAndNodeTableContainer.tsx","components/reusableComponents/graplHeader/styles.tsx","components/reusableComponents/graplHeader/logo.svg","components/reusableComponents/graplHeader/LogoIcon.tsx","components/reusableComponents/graplHeader/GraplHeader.tsx","components/reusableComponents/notifications/LoginNotification.tsx","components/reusableComponents/notifications/styles.tsx","services/login/checkLoginService.ts","components/graphDisplay/GraphDisplayStyles.tsx","components/engagementView/EngagementView.tsx","components/dashboard/styles.tsx","services/sagemakerNotebook/notebookService.ts","components/dashboard/Dashboard.tsx","services/uploadPlugin/uploadFilesToDgraph.tsx","components/uploadPlugin/uploadPluginStyles.tsx","components/uploadPlugin/utils/uploadPlugins.tsx","services/uploadPlugin/getPluginList.tsx","services/uploadPlugin/deletePlugin.tsx","components/uploadPlugin/utils/pluginTable.tsx","components/uploadPlugin/UploadPluginView.tsx","routes/index.ts","routes/routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loginStyles","makeStyles","theme","createStyles","valErrorMsg","marginLeft","color","fontSize","DEV_API_EDGES","auth","graphQL","modelPluginEdge","apiFetchReq","urlSlug","a","method","fetch","credentials","headers","Headers","catch","e","console","warn","Error","response","json","apiPostRequestWithBody","body","GraphqlEndpointClient","query","variables","JSON","stringify","log","lensName","this","getScopeQuery","lens_name","resp","loginService","username","password","loginBody","loginData","sha256","message","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join","sha256WithPepper","hashed","i","LogIn","_","classes","validationSchema","Yup","shape","userName","required","React","useState","loginFailed","state","setState","className","initialValues","onSubmit","values","window","history","replaceState","location","reload","errors","touched","name","type","placeholder","riskOutline","risk","calcNodeRiskPercentile","_nodeRisk","_allRisks","nodeRisk","riskIndex","allRisks","n","sort","undefined","length","Math","floor","findNode","id","nodes","node","calcLinkRiskPercentile","link","graph","linkRisk","Graph","sourceNode","source","targetNode","target","sourceRisk","risk_score","targetRisk","round","error","calcLinkRisk","calcLinkColor","getNodeLabel","nodeType","display","retrieveGraph","lens","client","getLensScope","lensWithScopeData","scope","mapEdges","f","prop","Object","prototype","hasOwnProperty","call","possibleNeighbor","isArray","neighbor","uid","mapEdgeProps","traverseNodes","callback","traverseNeighbors","edgeName","getNodeType","dgraphType","dgraph_type","vizGraphFromLensScope","vizGraphData","links","vizNodeMap","Map","vizNode","fromNode","toNode","push","nodeLabel","strippedNode","riskScore","analyzerNames","nodeRiskList","riskNode","analyzer_name","edge","_neighbor","set","index","mapNodeProps","nodeProp","mergeNodes","newNode","merged","nodeWithoutVizFormatting","_node","mergeGraphs","curGraph","updateGraph","updated","outputGraph","get","_link","setLink","newLink","getLink","forEach","neighbors","Set","add","engagementState","setEngagementState","curLensName","then","updatedGraph","mergeUpdatedGraph","graphData","colors","GraphDisplay","setCurNode","fgRef","useRef","defaultGraphDisplayState","updateGraphAndSetState","useEffect","interval","setInterval","clearInterval","data","useMemo","clickedNode","setClickedNode","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","hoverNode","setHoverNode","updateHighlight","useCallback","nodeClick","ctx","nodeHover","clear","nodeStyling","fx","x","fy","y","save","NODE_R","riskPercentile","nodeSize","beginPath","arc","PI","fillStyle","fill","nodeFillColor","label","min","measureText","width","font","labelBkgdDimensions","fillRect","textAlign","textBaseline","fillText","ref","nodeCanvasObject","nodeCanvasObjectMode","onNodeHover","onNodeClick","onNodeDragEnd","linkColor","has","linkWidth","linkDirectionalArrowLength","linkDirectionalArrowRelPos","calcLinkDirectionalArrowRelPos","linkDirectionalParticleSpeed","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleWidth","linkRiskPercentile","calcLinkParticleWidth","linkCanvasObjectMode","linkCanvasObject","start","end","textPos","relLink","maxTextLength","sqrt","pow","LABEL_NODE_MARGIN","textAngle","atan2","labelType","translate","rotate","restore","onLinkHover","warmupTicks","cooldownTicks","nodeTableHeader","styles","TableHead","TableRow","TableCell","align","tableHeader","useStyles","root","nodeTable","minWidth","backgroundColor","nodeTableData","nodeTableContainer","marginRight","NodeTable","hidden","displayNode","propName","includes","Date","toLocaleString","TableContainer","Table","TableBody","entries","nodeProperty","key","value","node_key","border","padding","backdrop","table","lensToggleBtn","height","margin","title","expand","header","pagination","tableHead","tableContainer","tableRow","background","SelectLens","props","component","Button","onClick","setLens","lens_type","score","lensTable","page","rowsPerPage","handleChangePage","handleChangeRowsPerPage","TablePagination","aria-label","rowsPerPageOptions","count","lenses","onChangePage","onChangeRowsPerPage","Number","getLenses","first","offset","gqlQuery","graphQLQuery","res","lensQueryData","ToggleLensTable","lensRetrievedState","setLensRetrievedState","toggled","toggleTableState","setToggleTableState","pageState","setPageState","rowsPerPageState","setRowsPerPageState","concat","event","parseInt","Backdrop","open","CircularProgress","Divider","ToggleNodeDetailTable","curNode","setToggle","NodeDetails","LensAndNodeTableContainer","graplHeaderStyles","justifyContent","titleIcon","flexGrow","textDecoration","_extends","assign","arguments","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","clipRule","_ref3","clipPath","fillOpacity","fillRule","stroke","strokeWidth","strokeLinejoin","strokeLinecap","SvgLogo","_ref","svgRef","titleId","viewBox","strokeMiterlimit","xmlnsXlink","xmlns","ForwardRef","LogoIconStyle","logoIcon","LogoIcon","SvgIcon","Logo","GraplHeader","displayBtn","AppBar","position","Toolbar","Typography","variant","IconButton","to","maxWidth","postion","button","LoginNotification","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Card","CardActionArea","CardContent","CardActions","size","checkLogin","drawerWidth","loggedIn","alignItems","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","contentShift","headerTitle","headerContainer","close","EngagementView","curLens","setOpen","clsx","noWrap","Drawer","anchor","paper","paragraph","EngagementUx","renderedOnce","fetchLoginAndSetState","dasboardStyles","zIndex","dashboard","flexDirection","borderRadius","textTransform","sagemaker","navSec","marginTop","help","getNotebookUrl","result","success","notebook_url","Dashboard","asyncSagemakerUrl","useAsync","loading","alert","uploadFilesToDgraph","payload","dgraphPayload","dgraphFileUpload","pluginFiles","Success","formContainer","btn","inputFiles","upload","succMsg","errMsg","pluginTable","boxShadow","uploadFormContainer","uploadForm","fontFamily","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","fileRes","TextDecoder","decode","readAsText","Message","status","UploadForm","curFiles","filename","fileMap","reads","fileRead","fileResult","path","webkitRelativePath","mozRelativePath","all","plugins","didSucceed","directory","webkitdirectory","mozdirectory","multiple","onChange","currentTarget","files","getPluginList","getPluginListReq","pluginList","plugin_list","deletePlugin","pluginName","plugins_to_delete","PluginTable","rows","toggle","setPage","setRowsPerPage","emptyRows","style","colSpan","newPage","UploadPlugin","Routes","exact","App","Boolean","hostname","match","darkTheme","createMuiTheme","palette","primary","main","rootElement","document","getElementById","ReactDOM","render","StrictMode","ThemeProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80f8abfd.chunk.js","sourcesContent":["import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const loginStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        valErrorMsg: {\n            marginLeft: \".8rem\",\n            color: \"red\",\n            fontSize: \".75rem\",\n        },\n    })\n);\n","const DEV_API_EDGES = {\n    auth: \"auth\",\n    graphQL: \"graphQlEndpoint\",\n    modelPluginEdge: \"modelPluginDeployer\",\n};\n\nexport default DEV_API_EDGES;\n","import { Node } from \"types/CustomTypes\";\nimport DEV_API_EDGES from \"./constants\";\n\nexport const apiFetchReq = async (urlSlug: string, method = \"GET\") => {\n    const response = await fetch(urlSlug, {\n        method,\n        credentials: \"include\",\n        headers: new Headers({\n            \"Content-Type\": \"application/json\",\n        }),\n    }).catch((e) => {\n        console.warn(e);\n        throw new Error(`API Request Error: ${e}`);\n    });\n\n    return response.json();\n};\n\nexport const apiPostRequestWithBody = async (urlSlug: string, body: string) => {\n    const response = await fetch(urlSlug, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: new Headers({\n            \"Content-Type\": \"application/json\",\n        }),\n        body: body,\n    }).catch((e) => {\n        console.warn(e);\n        throw new Error(`Error with Post Request: ${e}`);\n    });\n\n    return response.json();\n};\n\ntype QueryResult = { [key: string]: any };\ninterface LensScope {\n    lens_name: string;\n    scope: Node[];\n}\n\nexport class GraphqlEndpointClient {\n    async query(\n        query: string,\n        variables?: { [key: string]: string }\n    ): Promise<QueryResult> {\n        const body = JSON.stringify({\n            query: query,\n            variables: variables || {},\n        });\n        const response = await apiPostRequestWithBody(\n            `${DEV_API_EDGES.graphQL}/graphql`,\n            body\n        );\n        if (response[\"errors\"]) {\n            console.log(response[\"errors\"]);\n            throw new Error(`Could not query GraphQL: ${response[\"errors\"]}`);\n        }\n        return response[\"data\"];\n    }\n\n    public async getLensScope(lensName: string): Promise<LensScope> {\n        const query = await this.getScopeQuery();\n        const resp = await this.query(query, { lens_name: lensName });\n        console.log(resp);\n        return resp[\"lens_scope\"] as LensScope;\n    }\n\n    async getScopeQuery() {\n        const query = `\n        {\n            lens_scope_query {\n                query_string\n            }\n        }\n        `;\n\n        const resp = await this.query(query);\n        return resp[\"lens_scope_query\"][\"query_string\"];\n    }\n}\n","import DEV_API_EDGES from \"../constants\";\nimport { apiPostRequestWithBody } from \"../fetch\";\n\nexport const loginService = async (username: string, password: string) => {\n    const loginBody = JSON.stringify({\n        username: username,\n        password: password,\n    });\n\n    try {\n        const loginData = await apiPostRequestWithBody(\n            `${DEV_API_EDGES.auth}/login`,\n            loginBody\n        );\n        return loginData[\"success\"] === \"True\";\n    } catch (e) {\n        console.log(\"Login Error\", e);\n        return false;\n    }\n};\n","async function sha256(message: string) {\n    // encode as UTF-8\n    const msgBuffer = new TextEncoder().encode(message);\n\n    // hash the message\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\n\n    // convert ArrayBuffer to Array\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n    // convert bytes to hex string\n    return hashArray.map((b) => (\"00\" + b.toString(16)).slice(-2)).join(\"\");\n}\n\nexport const sha256WithPepper = async (username: string, password: string) => {\n    // The pepper only exists to prevent rainbow tables for extremely weak passwords\n    // Client side hashing itself is only to prevent cases where the password is\n    // exposed before it makes it into the password database\n    const pepper =\n        \"f1dafbdcab924862a198deaa5b6bae29aef7f2a442f841da975f1c515529d254\";\n\n    let hashed = await sha256(password + pepper + username);\n\n    for (let i = 0; i < 5000; i++) {\n        hashed = await sha256(hashed);\n    }\n\n    return hashed;\n};\n","import React from \"react\";\nimport * as Yup from \"yup\";\nimport { Field, Form, Formik } from \"formik\";\n\nimport \"./LogIn.css\";\nimport { loginStyles } from \"./styles\";\nimport { LoginProps } from \"types/CustomTypes\";\nimport { loginService } from \"services/login/loginService\";\nimport { sha256WithPepper } from \"./utils/passwordHashing\";\n\nexport const LogIn = (_: LoginProps) => {\n    const useStyles = loginStyles;\n\n    const classes = useStyles();\n\n    const validationSchema = Yup.object().shape({\n        userName: Yup.string().required(\"Username Required\"),\n        password: Yup.string().required(\"Password Required\"),\n    });\n\n    const [state, setState] = React.useState({\n        loginFailed: false,\n    });\n\n    return (\n        <div className=\"loginContainer\">\n            <div className=\"grapl\"> Grapl </div>\n\n            <div className=\"formContainer\">\n                <Formik\n                    initialValues={{ userName: \"\", password: \"\" }}\n                    validationSchema={validationSchema}\n                    onSubmit={async (values) => {\n                        const password = await sha256WithPepper(\n                            values.userName,\n                            values.password\n                        );\n\n                        const loginSuccess = await loginService(\n                            values.userName,\n                            password\n                        );\n\n                        if (loginSuccess === true) {\n                            window.history.replaceState(\"#/login\", \"\", \"#/\");\n                            window.location.reload();\n                            console.log(\"Logged In\");\n                        } else {\n                            setState({\n                                ...state,\n                                loginFailed: true,\n                            });\n                        }\n                    }}\n                >\n                    {({ errors, touched }) => (\n                        <Form>\n                            <div className=\"welcomeBanner\">Welcome</div>\n                            <div className=\"loginText\">\n                                Log into your account\n                            </div>\n                            <Field\n                                name=\"userName\"\n                                type=\"text\"\n                                placeholder=\"Username\"\n                            />\n                            {touched.userName && errors.userName && (\n                                <div className={classes.valErrorMsg}>\n                                    {errors.userName}\n                                </div>\n                            )}\n                            <Field\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />{\" \"}\n                            <br />\n                            {touched.password && errors.password && (\n                                <div className={classes.valErrorMsg}>\n                                    {errors.password}\n                                </div>\n                            )}\n                            <button className=\"submitBtn\" type=\"submit\">\n                                Submit\n                            </button>\n                            {state.loginFailed && (\n                                <div className={classes.valErrorMsg}>\n                                    Unsuccessful Login\n                                </div>\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </div>\n    );\n};\n\nexport default LogIn;\n","export const nodeFillColor = (nodeType: string) => {\n    switch (nodeType) {\n        case \"Asset\":\n            return \"rgba(251, 154, 153, .8)\"; //#FB9A99\n        case \"File\":\n            return \"rgba(236, 189, 169, .8)\"; //#ECBDA9\n        case \"IpAddress\":\n            return \"rgba(253, 191, 111, .8)\"; //#6CF4AB\n        case \"IpConnections\":\n            return \"rgba(255, 241, 150, .8)\"; //#FFF196\n        case \"IpPort\":\n            return \"rgba(178, 223, 138, .8)\"; // #B2DF8A\n        case \"NetworkConnection\":\n            return \"rgba(166, 206, 227, .8)\"; //#A6CEE3\n        case \"Process\":\n            return \"rgba(31, 120, 180, .8)\"; // #1F78B4\n        case \"ProcessInboundConnection\":\n            return \"rgba(202, 178, 214, .8)\"; //#CAB2D6\n        case \"ProcessOutboundConnection\":\n            return \"rgba(106, 61, 154, .8)\"; //#6A3D9A\n        case \"Risk\":\n            return \"rgba(238, 238, 238, .8)\"; //#EEEEEE\n        default:\n            return \"#42C6FF\";\n    }\n};\n\nexport const riskOutline = (risk: number) => {\n    if (risk >= 0 && risk <= 25) {\n        return \"#02D084\";\n    }\n    if (risk >= 26 && risk <= 50) {\n        return \"#13A5E3\";\n    }\n    if (risk >= 51 && risk <= 75) {\n        return \"#FFD773\";\n    }\n    if (risk >= 76 && risk <= 100) {\n        return \"#E50F14\";\n    }\n};\n","import { VizGraph, VizNode } from \"../../../types/CustomTypes\";\n\nexport const calcNodeRiskPercentile = (\n    _nodeRisk: number | { risk: number },\n    _allRisks: any\n): number => {\n    let nodeRisk = _nodeRisk;\n    let riskIndex = 0;\n\n    const allRisks = _allRisks\n        .map((n: any) => n || 0)\n        .sort((a: number, b: number) => a - b);\n\n    if (typeof _nodeRisk === \"object\") {\n        nodeRisk = _nodeRisk.risk;\n    }\n    if (nodeRisk === undefined || nodeRisk === 0 || allRisks.length === 0) {\n        return 0;\n    }\n\n    for (const risk of allRisks) {\n        if (nodeRisk >= risk) {\n            riskIndex += 1;\n        }\n    }\n    return Math.floor((riskIndex / allRisks.length) * 100);\n};\n\nexport const nodeSize = (node: VizNode, graphData: VizGraph): number => {\n    const nodes = [...graphData.nodes].map((node) => node.risk);\n    const _node = node as any;\n\n    const riskPercentile = calcNodeRiskPercentile(_node.risk_score, nodes);\n\n    if (riskPercentile >= 75) {\n        return 7;\n    } else if (riskPercentile >= 50) {\n        return 6;\n    } else if (riskPercentile >= 25) {\n        return 5;\n    } else {\n        return 4;\n    }\n};\n","import { VizGraph, Link, VizNode } from \"../../../types/CustomTypes\";\nimport { calcNodeRiskPercentile } from \"./nodeCalcs\";\nimport { riskOutline } from \"./nodeColoring\";\n\nconst findNode = (id: number, nodes: VizNode[]) => {\n    for (const node of nodes || []) {\n        if (node.id === id) {\n            return node;\n        }\n    }\n    return null;\n};\n\nexport const calcLinkRisk = (link: Link, Graph: VizGraph) => {\n    let sourceNode: any =\n        findNode(link.source, Graph.nodes) ||\n        findNode((link as any).source.name, Graph.nodes);\n    let targetNode: any =\n        findNode(link.target as any, Graph.nodes) ||\n        findNode((link as any).target.name as any, Graph.nodes);\n\n    const sourceRisk: number = sourceNode.risk_score || 0;\n    const targetRisk: number = targetNode.risk_score || 0;\n\n    if (!sourceNode || !targetNode) {\n        console.error(\n            \"Missing srcNode/dstNode\",\n            sourceNode,\n            link.source,\n            targetNode,\n            Graph.nodes\n        );\n        return 0;\n    }\n    return Math.round((sourceRisk + targetRisk) / 2);\n};\n\nexport const calcLinkRiskPercentile = (link: Link, graph: VizGraph) => {\n    const linkRisk = calcLinkRisk(link, graph);\n    const nodes = [...graph.nodes].map((node) => node.risk);\n\n    return calcNodeRiskPercentile(linkRisk, nodes);\n};\n\nexport const calcLinkColor = (link: Link, graph: VizGraph): string => {\n    const risk = calcLinkRiskPercentile(link, graph);\n    return riskOutline(risk) as string;\n};\n\nexport const calcLinkParticleWidth = (link: Link, graph: VizGraph): number => {\n    const linkRiskPercentile = calcLinkRiskPercentile(link, graph);\n    if (linkRiskPercentile >= 75) {\n        return 5;\n    } else if (linkRiskPercentile >= 50) {\n        return 4;\n    } else if (linkRiskPercentile >= 25) {\n        return 3;\n    } else {\n        return 2;\n    }\n};\n\nexport const calcLinkDirectionalArrowRelPos = (link: Link, graph: VizGraph) => {\n    const _link = link as any;\n    const node = findNode(_link.target.uid, graph.nodes);\n\n    if (node === null || node.risk === 0) {\n        return 1.0;\n    }\n\n    const nodes = [...graph.nodes].map((node) => node.risk);\n\n    const riskPercentile = calcNodeRiskPercentile(\n        node.risk_score as any,\n        nodes\n    );\n\n    if (riskPercentile >= 75) {\n        return 0.95;\n    } else if (riskPercentile >= 50) {\n        return 0.9;\n    } else if (riskPercentile >= 25) {\n        return 0.85;\n    } else {\n        return 1.0;\n    }\n};\n","import { NodeProperties } from \"../../../types/CustomTypes\";\n\nconst getNodeLabel = (nodeType: string, node: NodeProperties) => {\n    const _node = node;\n    return _node.display || nodeType;\n};\n\nconst getLinkLabel = (labelType: string) => {\n    if (labelType === \"children\") {\n        return \"executed\";\n    }\n    return labelType;\n};\n\nexport { getNodeLabel, getLinkLabel };\n","import { Node } from \"../../types/CustomTypes\";\n\nimport { GraphqlEndpointClient } from \"../fetch\";\n\nexport const retrieveGraph = async (lens: string): Promise<Node[]> => {\n    const client = new GraphqlEndpointClient();\n    const lensWithScopeData = await client.getLensScope(lens);\n    return lensWithScopeData.scope;\n};\n","import { NodeProperties, NodeEdges } from \"types/CustomTypes\";\n\nconst _mapGraph = <T extends NodeProperties & NodeEdges>(\n    node: T,\n    visited: Set<string>,\n    f: (node: T, prop: string, neighbor: T) => void\n) => {\n    mapEdgeProps(node, (edgeName: string, neighbor: T) => {\n        if (visited.has(node.uid + edgeName + neighbor.uid)) {\n            return;\n        }\n\n        visited.add(node.uid + edgeName + neighbor.uid);\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f);\n    });\n};\n\nexport const mapGraph = <T extends NodeProperties & NodeEdges>(\n    node: T,\n    f: (node: T, prop: string, neighbor: T) => void\n) => {\n    const visited: Set<string> = new Set();\n    mapEdgeProps(node, (edgeName: string, neighbor: T) => {\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f);\n    });\n};\n\n// f Type = <T extends NodeProperties & NodeEdges>(prop:string, neighbor: BaseNodeProperties) => void)\n// Given a node, call 'f' on any of its neighbors\nexport const mapEdges = <T extends NodeProperties & NodeEdges>(\n    node: T,\n    f: (prop: string, neighbor: T) => void\n) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const possibleNeighbor = node[prop] as any;\n            if (Array.isArray(possibleNeighbor)) {\n                for (const neighbor of possibleNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor);\n                    }\n                }\n            } else {\n                if (possibleNeighbor && possibleNeighbor.uid !== undefined) {\n                    f(prop, possibleNeighbor);\n                }\n            }\n        }\n    }\n};\n\nexport const mapEdgeProps = <T extends NodeProperties & NodeEdges>(\n    node: T,\n    f: (prop: string, neighbor: T) => void\n) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const possibleNeighbor = (node as any)[prop];\n            if (Array.isArray(possibleNeighbor)) {\n                for (const neighbor of possibleNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor);\n                    }\n                }\n            } else {\n                if (possibleNeighbor && possibleNeighbor.uid !== undefined) {\n                    f(prop, possibleNeighbor);\n                }\n            }\n        }\n    }\n};\n\nexport const traverseNodes = <T extends NodeProperties & NodeEdges>(\n    node: T,\n    callback: (node: T) => void\n) => {\n    callback(node);\n    mapEdges(node, (_, neighbor) => {\n        traverseNodes(neighbor, callback);\n    });\n};\n\nexport const traverseNeighbors = <T extends NodeProperties & NodeEdges>(\n    node: T,\n    callback: (node: T, prop: string, neighbor: T) => void\n) => {\n    mapEdges(node, (edgeName, neighbor) => {\n        callback(node, edgeName, neighbor);\n        traverseNeighbors(neighbor, callback);\n    });\n};\n","import { traverseNodes, traverseNeighbors, mapEdges } from \"./graph_traverse\";\nimport { getNodeLabel } from \"./labels\";\nimport {\n    Link,\n    VizGraph,\n    BaseNodeProperties,\n    VizNode,\n    Node,\n    Risk,\n} from \"../../../types/CustomTypes\";\n\nexport const getNodeType = (node: BaseNodeProperties) => {\n    const dgraphType = node.dgraph_type;\n\n    if (dgraphType) {\n        if (Array.isArray(dgraphType)) {\n            return dgraphType[0];\n        }\n        return dgraphType;\n    }\n\n    console.warn(\"Unable to find type for node \", node);\n    return \"Unknown Type\";\n};\n\nexport const vizGraphFromLensScope = (vizGraphData: Node[]): VizGraph => {\n    const nodes: VizNode[] = [];\n    const links: Link[] = [];\n    const vizNodeMap: Map<number, VizNode> = new Map();\n\n    for (const vizNode of vizGraphData) {\n        traverseNeighbors(vizNode, (fromNode, edgeName, toNode) => {\n            if (edgeName !== \"scope\") {\n                if (\n                    getNodeType(fromNode) === \"Unknown\" ||\n                    getNodeType(toNode) === \"Unknown\" ||\n                    getNodeType(fromNode) === \"Risk\" ||\n                    getNodeType(toNode) === \"Risk\"\n                ) {\n                    return;\n                }\n\n                links.push({\n                    source: fromNode.uid,\n                    name: edgeName,\n                    target: toNode.uid,\n                });\n            }\n        });\n\n        traverseNodes(vizNode, (node) => {\n            const nodeType = getNodeType(node);\n\n            if (nodeType === \"Unknown\" || nodeType === \"Risk\") {\n                return;\n            }\n\n            const nodeLabel = getNodeLabel(nodeType, node);\n            const strippedNode = { ...node };\n\n            let riskScore = (node[\"risk\"] || 0) as number;\n            let analyzerNames = \"\";\n            let nodeRiskList = (node[\"risks\"] || []) as Risk[];\n\n            for (const riskNode of nodeRiskList) {\n                riskScore += riskNode.risk_score || 0;\n\n                if (analyzerNames && riskNode.analyzer_name) {\n                    analyzerNames += \", \";\n                }\n                analyzerNames += riskNode.analyzer_name || \"\";\n            }\n\n            mapEdges(node, (edge: string, _neighbor: Node) => {\n                // The stripped node is converted to another type, so we can cast to any here\n                (strippedNode as any)[edge] = undefined;\n            });\n\n            const vizNode = {\n                name: node.uid,\n                ...strippedNode,\n                risk_score: riskScore,\n                analyzerNames,\n                id: node.uid,\n                nodeType,\n                nodeLabel,\n            };\n            vizNodeMap.set(node.uid, (vizNode as unknown) as VizNode); // as unknown handles destructuring.\n        });\n    }\n\n    // Because \"nodes\" is an array object we need to convert our data to use the\n    // id property values of entries in the array instead of the indexes of the array.\n    const index = {} as { [key: number]: VizNode };\n\n    for (const vizNode of vizNodeMap.values()) {\n        nodes.push(vizNode);\n        if (!index[vizNode.uid]) {\n            index[vizNode.uid] = vizNode;\n        }\n    }\n\n    // Return data in format for react-force-graph display\n    return {\n        nodes,\n        links,\n        index,\n    };\n};\n","import { NodeProperties } from \"../../../types/CustomTypes\";\n\nexport const mapNodeProps = (\n    node: NodeProperties,\n    f: (propName: string) => void\n) => {\n    for (const prop in node) {\n        const nodeProp = node[prop];\n\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            if (Array.isArray(nodeProp)) {\n                if (nodeProp.length > 0) {\n                    if (nodeProp[0].uid === undefined) {\n                        f(prop);\n                    }\n                }\n            } else {\n                f(prop);\n            }\n        }\n    }\n};\n","import { mapNodeProps } from \"./mapNodeProps\";\nimport { VizGraph, VizNode } from \"../../../types/CustomTypes\";\n\n// if graph has updated, merge y into x\nexport const mergeNodes = (node: VizNode, newNode: VizNode) => {\n    let merged = false;\n    let nodeWithoutVizFormatting = {} as VizNode;\n    for (const prop in node) {\n        if (\n            prop === \"fx\" ||\n            prop === \"fy\" ||\n            prop === \"links\" ||\n            prop === \"neighbors\" ||\n            prop === \"vx\" ||\n            prop === \"vy\" ||\n            prop === \"x\" ||\n            prop === \"y\" ||\n            prop === \"vx\" ||\n            prop === \"vy\"\n        ) {\n            continue;\n        }\n\n        nodeWithoutVizFormatting[prop] = node[prop];\n    }\n\n    const _node = nodeWithoutVizFormatting;\n\n    mapNodeProps(newNode, (prop: string) => {\n        if (!Object.prototype.hasOwnProperty.call(_node, prop)) {\n            if ((_node as any)[prop] !== (newNode as any)[prop]) {\n                (_node as any)[prop] = (newNode as any)[prop];\n                merged = true;\n            }\n        }\n        return;\n    });\n    return merged;\n};\n\nexport const mergeGraphs = (\n    curGraph: VizGraph,\n    updateGraph: VizGraph\n): VizGraph | null => {\n    // Merges two graphs into a new graph, returns 'null' when there are no new updates\n\n    if (!updateGraph.nodes && !updateGraph.links) {\n        return null;\n    }\n\n    let updated = false;\n\n    const outputGraph: VizGraph = { nodes: [], links: [], index: {} };\n    const nodes = new Map();\n    const links = new Map();\n\n    for (const node of curGraph.nodes) {\n        nodes.set(node.uid, node);\n    }\n\n    for (const newNode of updateGraph.nodes) {\n        const node = nodes.get(newNode.uid);\n        if (node) {\n            if (mergeNodes(node, newNode)) {\n                updated = true;\n            }\n        } else {\n            nodes.set(newNode.uid, newNode);\n            updated = true;\n        }\n    }\n\n    for (const link of curGraph.links) {\n        if (link) {\n            const _link = link as any;\n            const setLink = _link.source.uid + link.name + _link.target.uid;\n            links.set(setLink, link);\n        }\n    }\n\n    for (const newLink of updateGraph.links) {\n        const getLink = newLink.source + newLink.name + newLink.target;\n        const link = links.get(getLink);\n\n        if (!link) {\n            links.set(newLink.source + newLink.name + newLink.target, newLink);\n            updated = true;\n        }\n    }\n\n    outputGraph.nodes = Array.from(nodes.values());\n    outputGraph.links = Array.from(links.values());\n\n    for (const node of outputGraph.nodes) {\n        outputGraph.index[node.uid] = node;\n    }\n\n    outputGraph.links.forEach((link) => {\n        // the graph should not be updated if the link is already in the index array\n\n        const sourceNode = outputGraph.index[link.source] as any;\n        const targetNode = outputGraph.index[link.target] as any;\n\n        if (sourceNode === undefined || !targetNode === undefined) {\n            return;\n        }\n\n        !sourceNode.neighbors && (sourceNode.neighbors = new Set());\n        !targetNode.neighbors && (targetNode.neighbors = new Set());\n\n        sourceNode.neighbors.add(targetNode);\n        targetNode.neighbors.add(sourceNode);\n\n        !sourceNode.links && (sourceNode.links = new Set());\n        !targetNode.links && (targetNode.links = new Set());\n\n        sourceNode.links.add(link);\n        targetNode.links.add(link);\n    });\n\n    if (updated) {\n        return outputGraph;\n    } else {\n        return null;\n    }\n};\n","import { GraphState } from \"../../../types/GraphDisplayTypes\";\n\nimport { retrieveGraph } from \"../../../services/graphQLRequests/retrieveGraphReq\";\nimport { vizGraphFromLensScope } from \"../graphLayout/vizGraphFromLensScope\";\nimport { mergeGraphs } from \"../graphLayout/mergeGraphs\";\n\nexport const updateGraph = async (\n    lensName: string,\n    engagementState: GraphState,\n    setEngagementState: (engagementState: GraphState) => void\n) => {\n    if (!lensName) {\n        console.log(\"No lens names\");\n        return;\n    }\n\n    const curLensName = engagementState.curLensName;\n\n    await retrieveGraph(lensName)\n        .then(async (scope) => {\n            const updatedGraph = vizGraphFromLensScope(scope);\n            const mergeUpdatedGraph = mergeGraphs(\n                engagementState.graphData,\n                updatedGraph\n            );\n\n            if (mergeUpdatedGraph !== null) {\n                if (curLensName === lensName) {\n                    setEngagementState({\n                        ...engagementState,\n                        curLensName: lensName,\n                        graphData: mergeUpdatedGraph,\n                    });\n                } else {\n                    setEngagementState({\n                        ...engagementState,\n                        curLensName: lensName,\n                        graphData: updatedGraph,\n                    });\n                }\n            }\n        })\n        .catch((e) => console.error(\"Failed to retrieveGraph \", e));\n};\n","export const colors = {\n    hoverNodeFill: \"#FADA63\",\n    clickedNode: \"#42C6FF\",\n    nodeLabelFill: \"rgba(0, 0, 0, 0.8)\",\n    nodeLabelTxt: \"#ffffff\",\n    linkDirParticle: \"#919191\",\n    highlightLink: \"#F1F1F1\",\n};\n","import React, {\n    useEffect,\n    useState,\n    useMemo,\n    useCallback,\n    useRef,\n} from \"react\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { nodeFillColor, riskOutline } from \"./graphVizualization/nodeColoring\";\nimport {\n    calcLinkParticleWidth,\n    calcLinkColor,\n    calcLinkDirectionalArrowRelPos,\n} from \"./graphVizualization/linkCalcs\";\nimport { nodeSize } from \"./graphVizualization/nodeCalcs\";\nimport { getLinkLabel } from \"./graphLayout/labels\";\nimport { updateGraph } from \"./graphUpdates/updateGraph\";\nimport { Link, VizNode, VizGraph } from \"../../types/CustomTypes\";\nimport {\n    GraphState,\n    GraphDisplayState,\n    GraphDisplayProps,\n} from \"../../types/GraphDisplayTypes\";\n\nimport { colors } from \"./graphVizualization/graphColors\";\n\ntype ClickedNodeState = VizNode | null;\n\nconst defaultGraphDisplayState = (\n    lensName: string | null\n): GraphDisplayState => {\n    return {\n        graphData: { nodes: [], links: [], index: {} },\n        curLensName: lensName,\n    };\n};\n\nconst defaultClickedState = (): ClickedNodeState => {\n    return null;\n};\n\nconst GraphDisplay = ({ lensName, setCurNode }: GraphDisplayProps) => {\n    const fgRef: any = useRef(); // fix graph to canvas\n    const [state, setState] = useState(defaultGraphDisplayState(lensName));\n\n    async function updateGraphAndSetState() {\n        if (lensName) {\n            await updateGraph(lensName, state as GraphState, setState); // state is safe cast, check that lens name is not null\n        }\n    }\n\n    // TODO is there a way to updateGraphAndSetState immediately on click?\n\n    useEffect(() => {\n        // Set the initial state immediately\n        updateGraphAndSetState();\n\n        // refresh every 10 seconds\n        const interval = setInterval(updateGraphAndSetState, 10000);\n        return () => clearInterval(interval);\n    }, [lensName, state, setState]);\n\n    const data = useMemo(() => {\n        const graphData = state.graphData;\n        return graphData;\n    }, [state]);\n\n    const [clickedNode, setClickedNode] = useState(defaultClickedState());\n    const [highlightNodes, setHighlightNodes] = useState(new Set());\n    const [highlightLinks, setHighlightLinks] = useState(new Set());\n    const [hoverNode, setHoverNode] = useState(null);\n\n    const updateHighlight = useCallback(() => {\n        setHighlightNodes(highlightNodes);\n        setHighlightLinks(highlightLinks);\n    }, [highlightNodes, highlightLinks]);\n\n    const nodeClick = useCallback(\n        (_node, ctx) => {\n            const node = _node as any;\n            const links = node.links;\n            const neighbors = node.neighbors;\n\n            // remove neighbors and links for node detail table iteration (react can only iterate through arrays)\n            delete node.links;\n            delete node.neighbors;\n\n            setCurNode(node);\n            setClickedNode(node || null);\n\n            // re-add neighbors for highlighting links\n            node.links = links;\n            node.neighbors = neighbors;\n        },\n        [setCurNode, setClickedNode]\n    );\n\n    const nodeHover = useCallback(\n        (node, ctx) => {\n            highlightNodes.clear();\n            highlightLinks.clear();\n\n            if (node) {\n                const _node = node as any;\n                highlightNodes.add(_node);\n\n                if (!_node.neighbors) {\n                    return;\n                }\n\n                _node.neighbors.forEach((neighbor: VizNode) => {\n                    highlightNodes.add(neighbor);\n                });\n                _node.links.forEach((link: Link) => {\n                    highlightLinks.add(link);\n                });\n            }\n\n            setHoverNode((node as any) || null);\n            updateHighlight();\n        },\n        [setHoverNode, updateHighlight, highlightLinks, highlightNodes]\n    );\n\n    const nodeStyling = useCallback(\n        (node, ctx) => {\n            node.fx = node.x;\n            node.fy = node.y;\n            ctx.save();\n\n            const NODE_R = nodeSize(node, data);\n\n            // Node Border Styling\n            ctx.beginPath();\n            ctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);\n            ctx.fillStyle =\n                node === hoverNode\n                    ? colors.hoverNodeFill\n                    : riskOutline(node.risk_score);\n            ctx.fill();\n            ctx.save();\n\n            // Node Fill Styling\n            ctx.beginPath();\n            ctx.arc(node.x, node.y, NODE_R * 1.2, 0, 2 * Math.PI, false);\n            ctx.fillStyle =\n                node === clickedNode\n                    ? colors.clickedNode\n                    : nodeFillColor(node.dgraph_type[0]);\n            ctx.fill();\n            ctx.save();\n\n            // Node Label Styling\n            const label = node.nodeLabel;\n\n            const fontSize = Math.min(\n                98,\n                NODE_R / ctx.measureText(label).width\n            );\n            ctx.font = `${fontSize + 5}px Roboto`;\n\n            const textWidth = ctx.measureText(label).width;\n            const labelBkgdDimensions = [textWidth, fontSize].map(\n                (n) => n + fontSize * 0.2\n            );\n\n            ctx.fillStyle = colors.nodeLabelFill;\n            ctx.fillRect(\n                node.x - labelBkgdDimensions[0] / 2, // x coordinate\n                node.y - labelBkgdDimensions[1] - 2.75, // y coordinate\n                labelBkgdDimensions[0] + 1.25, // rectangle width\n                labelBkgdDimensions[1] + 5.5 // rectangle height\n            );\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = colors.nodeLabelTxt;\n            ctx.fillText(label, node.x, node.y);\n            ctx.save();\n        },\n        [data, clickedNode, hoverNode]\n    );\n\n    const linkStyling = (link: any, ctx: any) => {\n        const MAX_FONT_SIZE = 8;\n        const LABEL_NODE_MARGIN = 12;\n        const start = link.source;\n        const end = link.target;\n\n        link.color = calcLinkColor(link, data);\n\n        // Ignore unbounded links\n        if (typeof start !== \"object\" || typeof end !== \"object\") return;\n\n        // Edge label positioning calculations\n        const textPos = {\n            x: start.x + (end.x - start.x) / 2,\n            y: start.y + (end.y - start.y) / 2,\n        };\n\n        const relLink = { x: end.x - start.x, y: end.y - start.y };\n        const maxTextLength =\n            Math.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) -\n            LABEL_NODE_MARGIN * 8;\n\n        let textAngle = Math.atan2(relLink.y, relLink.x);\n\n        // Maintain label vertical orientation for legibility\n        if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n        if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n        const label = getLinkLabel(link.name);\n\n        // Estimate fontSize to fit in link length\n        ctx.font = \"50px Roboto\";\n        const fontSize = Math.min(\n            MAX_FONT_SIZE,\n            maxTextLength / ctx.measureText(label).width\n        );\n        ctx.font = `${fontSize + 5}px Roboto`;\n\n        // Draw text label\n        ctx.save();\n        ctx.translate(textPos.x, textPos.y);\n        ctx.rotate(textAngle);\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(label, 0.75, 3); //Content, left/right, top/bottom\n        ctx.restore();\n    };\n\n    return (\n        <ForceGraph2D\n            graphData={data}\n            ref={fgRef} // fix graph to canvas\n            nodeLabel={\"nodeType\"} // tooltip on hover, actual label is in nodeCanvasObject\n            nodeCanvasObject={nodeStyling}\n            nodeCanvasObjectMode={() => \"after\"}\n            onNodeHover={nodeHover}\n            onNodeClick={nodeClick}\n            onNodeDragEnd={(node) => {\n                node.fx = node.x;\n                node.fy = node.y;\n            }}\n            linkColor={(link) =>\n                highlightLinks.has(link)\n                    ? colors.highlightLink\n                    : calcLinkColor(link as Link, data as VizGraph)\n            }\n            linkWidth={(link) => (highlightLinks.has(link) ? 5 : 4)}\n            linkDirectionalArrowLength={10}\n            linkDirectionalArrowRelPos={(link) => {\n                const _link = link as any;\n                return calcLinkDirectionalArrowRelPos(_link, data);\n            }}\n            linkDirectionalParticleSpeed={0.005}\n            linkDirectionalParticleColor={(link) => colors.linkDirParticle}\n            linkDirectionalParticles={1}\n            linkDirectionalParticleWidth={(link) =>\n                highlightLinks.has(link)\n                    ? 4\n                    : calcLinkParticleWidth(link as Link, data as VizGraph) + 1\n            }\n            linkCanvasObjectMode={() => \"after\"}\n            linkCanvasObject={linkStyling}\n            onLinkHover={(link) => {\n                highlightNodes.clear();\n                highlightLinks.clear();\n\n                if (link) {\n                    highlightLinks.add(link);\n                    highlightNodes.add(link.source);\n                    highlightNodes.add(link.target);\n                }\n            }}\n            warmupTicks={100}\n            cooldownTicks={100}\n        />\n    );\n};\n\nexport default GraphDisplay;\n","import React from \"react\";\n\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { VizNode } from \"types/CustomTypes\";\n\nexport function nodeTableHeader(node: VizNode, styles: any) {\n    if (node) {\n        return (\n            <TableHead>\n                <TableRow>\n                    <TableCell align=\"left\" className={styles.tableHeader}>\n                        <b> Property </b>\n                    </TableCell>\n                    <TableCell align=\"right\" className={styles.tableHeader}>\n                        <b> Value </b>\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        );\n    } else {\n        return <></>;\n    }\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const nodeTableStyles = makeStyles({\n    root: {\n        fontSize: \".75em\",\n    },\n    nodeTable: {\n        minWidth: 450,\n    },\n    tableHeader: {\n        fontSize: \".85rem\",\n        backgroundColor: \"#363434\",\n    },\n    nodeTableData: {\n        fontSize: \".75rem\",\n        backgroundColor: \"#333333\",\n    },\n    nodeTableContainer: {\n        textAlign: \"center\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"95%\",\n    },\n});\n","import React from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { mapEdgeProps } from \"../../../../graphDisplay/graphLayout/graph_traverse\";\nimport { mapNodeProps } from \"../../../../graphDisplay/graphLayout/mapNodeProps\";\n\nimport { OtherNodeProperties, VizNode } from \"types/CustomTypes\";\n\nimport { nodeTableHeader } from \"./nodeTableHeader\";\nimport { nodeTableStyles } from \"./nodeTableStyles\";\n\nconst useStyles = nodeTableStyles;\n\ntype NodeTableProps = {\n    node: VizNode;\n};\n\nconst NodeTable = ({ node }: NodeTableProps) => {\n    const classes = useStyles();\n    const hidden = new Set([\n        \"id\",\n        \"dgraph.type\",\n        \"dgraph_type\",\n        \"__indexColor\",\n        \"risks\",\n        \"uid\",\n        \"scope\",\n        \"name\",\n        \"nodeType\",\n        \"nodeLabel\",\n        \"x\",\n        \"y\",\n        \"index\",\n        \"vy\",\n        \"vx\",\n        \"fx\",\n        \"fy\",\n        \"links\",\n        \"neighbors\",\n        \"display\",\n    ]);\n\n    mapEdgeProps(node as any, (edgeName: any, _neighbor: any) => {\n        hidden.add(edgeName);\n    });\n\n    const displayNode = {} as OtherNodeProperties;\n\n    mapNodeProps(node, (propName: string) => {\n        const prop = node[propName];\n\n        if (!hidden.has(propName)) {\n            if (prop) {\n                if (propName.includes(\"_time\")) {\n                    try {\n                        displayNode[propName] = new Date(prop).toLocaleString();\n                    } catch (e) {\n                        displayNode[propName] = prop;\n                    }\n                } else {\n                    displayNode[propName] = prop;\n                }\n            }\n        }\n    });\n\n    return (\n        <TableContainer className={classes.nodeTableContainer}>\n            <Table>\n                {nodeTableHeader(node, classes)}\n                <TableBody>\n                    {Object.entries(displayNode).map((nodeProperty) => {\n                        const [key, value] = nodeProperty;\n                        return (\n                            <TableRow key={node.node_key + key}>\n                                <TableCell\n                                    className={classes.nodeTableData}\n                                    align=\"left\"\n                                >\n                                    {key}\n                                </TableCell>\n                                <TableCell\n                                    className={classes.nodeTableData}\n                                    align=\"right\"\n                                >\n                                    {value as any}\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default NodeTable;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        fontSize: \"1rem\",\n        border: 0,\n        color: \"white\",\n        padding: \"0 30px\",\n    },\n    backdrop: {\n        color: \"#fff\",\n        backgroundColor: \"transparent\",\n        width: \"80%\",\n    },\n    table: {\n        minWidth: 450,\n        backgroundColor: \"#323232\",\n    },\n    lensToggleBtn: {\n        width: \".05%\",\n        height: \"50%\",\n        color: \"white\",\n        margin: \".5rem\",\n        backgroundColor: \"#424242\",\n    },\n    title: {\n        margin: \"1rem\",\n        fontSize: \"1.1rem\",\n        color: \"white\",\n    },\n    expand: {\n        color: \"#42C6FF\",\n        margin: \"0px\",\n        width: \"1.5rem\",\n        height: \"1.5rem\",\n    },\n    header: {\n        display: \"flex\",\n    },\n    lensName: {\n        fontSize: \".7rem\",\n    },\n    pagination: {\n        backgroundColor: \"#323232\",\n    },\n    tableHead: {\n        display: \"flex\",\n        color: \"white\",\n        fontSize: \".8rem\",\n    },\n    tableContainer: {\n        textAlign: \"center\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"95%\",\n    },\n    tableRow: {\n        background: \"#323232\",\n    },\n});\n","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { useStyles } from \"./lensTableStyles\";\n\nimport { SelectLensProps } from \"types/LensAndNodeTableTypes\";\n\nexport function SelectLens(props: SelectLensProps) {\n    const classes = useStyles();\n\n    return (\n        <TableRow className={classes.tableRow} key={props.uid}>\n            <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                <Button\n                    className={classes.lensName}\n                    onClick={() => {\n                        props.setLens(props.lens);\n                    }}\n                >\n                    {props.lens_type + \" :\\t\\t\" + props.lens}\n                </Button>\n            </TableCell>\n\n            <TableCell component=\"th\" scope=\"row\" align=\"right\">\n                {props.score}\n            </TableCell>\n        </TableRow>\n    );\n}\n","import React from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nimport { ClassNameMap } from \"@material-ui/styles/withStyles\";\nimport { SelectLens } from \"./selectLens\";\nimport { Lens } from \"types/CustomTypes\";\nimport { PaginationState } from \"types/CustomTypes\";\n\nexport const lensTable = (\n    state: PaginationState,\n    page: number,\n    rowsPerPage: number,\n    handleChangePage: (\n        event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n        page: number\n    ) => void,\n    handleChangeRowsPerPage: (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => void,\n    setLens: (lens: string) => void,\n    classes: ClassNameMap<string>\n) => {\n    return (\n        <TableContainer className={classes.tableContainer}>\n            <TablePagination\n                className={classes.pagination}\n                aria-label=\"pagination\"\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={state.lenses.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            <Table\n                className={classes.table}\n                aria-label=\"lens-table\"\n                key={\"lensTable\"}\n            >\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">\n                            <b> Lens Name </b>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                            <b> Risk </b>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {state.lenses\n                        .slice(\n                            page * rowsPerPage,\n                            page * rowsPerPage + rowsPerPage\n                        )\n                        .map((lens: Lens) => {\n                            return (\n                                <SelectLens\n                                    key={Number(lens.uid)}\n                                    uid={lens.uid}\n                                    lens={lens.lens_name}\n                                    lens_type={lens.lens_type}\n                                    score={lens.score}\n                                    setLens={setLens}\n                                />\n                            );\n                        })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n","import DEV_API_EDGES from \"../constants\";\nimport { apiPostRequestWithBody } from \"../fetch\";\n\nexport const getLenses = async (first: number, offset: number) => {\n    const gqlQuery = `\n        {\n            lenses(first: ${first}, offset: ${offset}) {\n                uid,\n                node_key,\n                lens_name,\n                score, \n                lens_type,\n            }\n        }\n    `;\n\n    const graphQLQuery = JSON.stringify({ query: gqlQuery });\n\n    const response = await apiPostRequestWithBody(\n        `${DEV_API_EDGES.graphQL}/graphql`,\n        graphQLQuery\n    )\n        .then((res) => res)\n        .then((res) => {\n            if (res.errors) {\n                console.error(\"Unable to retrieve lenses \", res.errors);\n                res.data = { lenses: [] };\n            }\n            return res;\n        })\n        .then((res) => res.data);\n\n    const lensQueryData = await response;\n    return lensQueryData;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\n\nimport Divider from \"@material-ui/core/Divider\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport { lensTable } from \"./lensTable/lensTable\";\nimport { getLenses } from \"services/graphQLRequests/getLenses\";\n\nimport { ToggleLensTableProps, ToggleLensTableState } from \"types/CustomTypes\";\n\nimport { useStyles } from \"./lensTable/lensTableStyles\";\nconst defaultToggleLensTableState = (): ToggleLensTableState => {\n    return {\n        toggled: true,\n        lenses: [],\n        first: 100, // first is the page size\n        offset: 0, // by default, start from page 0\n    };\n};\n\nexport function ToggleLensTable({ setLens }: ToggleLensTableProps) {\n    const classes = useStyles();\n\n    const [lensRetrievedState, setLensRetrievedState] = useState(null);\n    const [toggleTableState, setToggleTableState] = useState(\n        defaultToggleLensTableState()\n    );\n    const [pageState, setPageState] = useState(0);\n    const [rowsPerPageState, setRowsPerPageState] = useState(10);\n\n    const handleChangePage = (\n        event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n        page: number\n    ) => {\n        setPageState(page);\n    };\n\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        setRowsPerPageState(parseInt(event.target.value, 10));\n        setPageState(0);\n    };\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            getLenses(toggleTableState.first, toggleTableState.offset).then(\n                (response) => {\n                    if (\n                        response.lenses &&\n                        response.lenses !== toggleTableState.lenses\n                    ) {\n                        const lenses = toggleTableState.lenses.concat(\n                            response.lenses\n                        );\n                        setLensRetrievedState(lenses as any);\n                        setToggleTableState({\n                            ...toggleTableState,\n                            offset:\n                                toggleTableState.offset +\n                                    response.lenses.length || 0,\n                            lenses,\n                        });\n                    }\n                }\n            );\n        }, 5000);\n        return () => clearInterval(interval);\n    });\n\n    return (\n        <>\n            <div className={classes.header}>\n                <b className={classes.title}> Lenses </b>\n                <Button\n                    className={classes.lensToggleBtn}\n                    onClick={() => {\n                        setToggleTableState({\n                            ...toggleTableState,\n                            toggled: !toggleTableState.toggled,\n                        });\n                    }}\n                >\n                    {toggleTableState.toggled ? (\n                        <KeyboardArrowUpOutlinedIcon\n                            className={classes.expand}\n                        />\n                    ) : (\n                        <KeyboardArrowDownOutlinedIcon\n                            className={classes.expand}\n                        />\n                    )}\n                </Button>\n            </div>\n\n            <div className=\"lensToggle\">\n                {lensRetrievedState ? (\n                    toggleTableState.toggled &&\n                    lensTable(\n                        toggleTableState,\n                        pageState,\n                        rowsPerPageState,\n                        handleChangePage,\n                        handleChangeRowsPerPage,\n                        setLens,\n                        classes\n                    )\n                ) : (\n                    <Backdrop className={classes.backdrop} open>\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n                )}\n            </div>\n\n            <Divider />\n        </>\n    );\n}\n","import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\nimport { ToggleNodeTableProps } from \"types/LensAndNodeTableTypes\";\n\nimport { NodeDetails } from \"../LensAndNodeTableContainer\";\n\nimport { useStyles } from \"./lensTable/lensTableStyles\";\n\nexport function ToggleNodeDetailTable({ curNode }: ToggleNodeTableProps) {\n    const [toggled, setToggle] = useState(true);\n    const classes = useStyles();\n    return (\n        <div>\n            {curNode && (\n                <div className={classes.header}>\n                    <b className={classes.title}> Node Details</b>\n                    <Button\n                        className={classes.lensToggleBtn}\n                        onClick={() => {\n                            setToggle((toggled) => !toggled);\n                        }}\n                    >\n                        {toggled === true ? (\n                            <KeyboardArrowUpOutlinedIcon\n                                className={classes.expand}\n                            />\n                        ) : (\n                            <KeyboardArrowDownOutlinedIcon\n                                className={classes.expand}\n                            />\n                        )}\n                    </Button>\n                </div>\n            )}\n\n            <div className=\"nodeToggle\">\n                {toggled && curNode && (\n                    <div>{<NodeDetails node={curNode} />}</div>\n                )}\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport NodeTable from \"./tables/nodeTable/NodeTable\";\nimport {\n    NodeDetailsProps,\n    EngagementViewProps,\n} from \"types/LensAndNodeTableTypes\";\n\nimport { ToggleLensTable } from \"./tables/toggleLensTable\";\nimport { ToggleNodeDetailTable } from \"./tables/toggleNodeDetailTable\";\n\nexport const NodeDetails = ({ node }: NodeDetailsProps) => {\n    return (\n        <>\n            {\" \"}\n            <NodeTable node={node} />{\" \"}\n        </>\n    );\n};\n\nexport default function LensAndNodeTableContainer({\n    setLens,\n    curNode,\n}: EngagementViewProps) {\n    return (\n        <>\n            <ToggleLensTable setLens={setLens} />\n            <ToggleNodeDetailTable curNode={curNode} />\n        </>\n    );\n}\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const graplHeaderStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n        },\n        header: {\n            justifyContent: \"space-between\",\n        },\n        titleIcon: {\n            fontSize: \"36px\", // icons are treated as fonts, weird\n        },\n        title: {\n            flexGrow: 1,\n        },\n        link: {\n            color: \"#42C6FF\",\n            textDecoration: \"none\",\n        },\n    })\n);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"clipPath\", {\n  id: \"p.0\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m0 0l720.0 0l0 540.0l-720.0 0l0 -540.0z\",\n  clipRule: \"nonzero\"\n}));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  clipPath: \"url(#p.0)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m0 0l720.0 0l0 540.0l-720.0 0z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m162.27768 426.58514l0 0c0 -39.288696 32.442673 -71.13849 72.46272 -71.13849l0 0c19.218307 0 37.64949 7.494934 51.238876 20.835968c13.5894165 13.341064 21.223846 31.435425 21.223846 50.30252l0 0c0 39.288696 -32.442657 71.13849 -72.46272 71.13849l0 0c-40.02005 0 -72.46272 -31.849792 -72.46272 -71.13849z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#008afc\",\n  strokeWidth: 12,\n  strokeLinejoin: \"round\",\n  strokeLinecap: \"butt\",\n  d: \"m162.27768 426.58514l0 0c0 -39.288696 32.442673 -71.13849 72.46272 -71.13849l0 0c19.218307 0 37.64949 7.494934 51.238876 20.835968c13.5894165 13.341064 21.223846 31.435425 21.223846 50.30252l0 0c0 39.288696 -32.442657 71.13849 -72.46272 71.13849l0 0c-40.02005 0 -72.46272 -31.849792 -72.46272 -71.13849z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m300.7371 127.47872l151.87177 79.2365\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#008afc\",\n  strokeWidth: 12,\n  strokeLinejoin: \"round\",\n  strokeLinecap: \"butt\",\n  d: \"m300.7371 127.47872l151.87177 79.2365\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m303.3025 396.74707l149.30637 -89.42682\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#008afc\",\n  strokeWidth: 12,\n  strokeLinejoin: \"round\",\n  strokeLinecap: \"butt\",\n  d: \"m303.3025 396.74707l149.30637 -89.42682\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m431.385 257.01773l0 0c0 -39.288696 32.442657 -71.13849 72.46274 -71.13849l0 0c19.218292 0 37.649506 7.494919 51.23886 20.835983c13.5894165 13.341049 21.223877 31.43541 21.223877 50.302505l0 0c0 39.288696 -32.442688 71.13849 -72.46274 71.13849l0 0c-40.02008 0 -72.46274 -31.849792 -72.46274 -71.13849z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#008afc\",\n  strokeWidth: 12,\n  strokeLinejoin: \"round\",\n  strokeLinecap: \"butt\",\n  d: \"m431.385 257.01773l0 0c0 -39.288696 32.442657 -71.13849 72.46274 -71.13849l0 0c19.218292 0 37.649506 7.494919 51.23886 20.835983c13.5894165 13.341049 21.223877 31.43541 21.223877 50.302505l0 0c0 39.288696 -32.442688 71.13849 -72.46274 71.13849l0 0c-40.02008 0 -72.46274 -31.849792 -72.46274 -71.13849z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m547.83453 257.01773l0 0c0 11.118866 -4.6343384 21.782288 -12.883423 29.6445c-8.2491455 7.862213 -19.437378 12.279175 -31.103363 12.279175l0 -41.923676z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m547.83453 257.01773l0 0c0 11.118866 -4.6343384 21.782288 -12.883423 29.6445c-8.2491455 7.862213 -19.437378 12.279175 -31.103363 12.279175\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#008afc\",\n  strokeWidth: 4,\n  strokeLinejoin: \"round\",\n  strokeLinecap: \"butt\",\n  d: \"m547.83453 257.01773l0 0c0 11.118866 -4.6343384 21.782288 -12.883423 29.6445c-8.2491455 7.862213 -19.437378 12.279175 -31.103363 12.279175\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000000\",\n  fillOpacity: 0,\n  d: \"m162.27768 98.24121l0 0c0 -39.288704 32.442673 -71.13849 72.46272 -71.13849l0 0c19.218307 0 37.64949 7.4949265 51.238876 20.835983c13.5894165 13.341057 21.223846 31.435413 21.223846 50.30251l0 0c0 39.28871 -32.442657 71.138504 -72.46272 71.138504l0 0c-40.02005 0 -72.46272 -31.849792 -72.46272 -71.138504z\",\n  fillRule: \"evenodd\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#008afc\",\n  strokeWidth: 12,\n  strokeLinejoin: \"round\",\n  strokeLinecap: \"butt\",\n  d: \"m162.27768 98.24121l0 0c0 -39.288704 32.442673 -71.13849 72.46272 -71.13849l0 0c19.218307 0 37.64949 7.4949265 51.238876 20.835983c13.5894165 13.341057 21.223846 31.435413 21.223846 50.30251l0 0c0 39.28871 -32.442657 71.138504 -72.46272 71.138504l0 0c-40.02005 0 -72.46272 -31.849792 -72.46272 -71.138504z\",\n  fillRule: \"evenodd\"\n}));\n\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0.0 0.0 720.0 540.0\",\n    fill: \"none\",\n    stroke: \"none\",\n    strokeLinecap: \"square\",\n    strokeMiterlimit: 10,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.cc627171.svg\";\nexport { ForwardRef as ReactComponent };","import { SvgIcon } from \"@material-ui/core\";\nimport { ReactComponent as Logo } from \"./logo.svg\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const LogoIconStyle = makeStyles((theme: Theme) =>\n    createStyles({\n        logoIcon: {\n            marginRight: \"0.5em\",\n            color: \"transparent\",\n        },\n    })\n);\n\ninterface LogoIconProps {\n    className: string;\n}\n\nexport function LogoIcon(props: LogoIconProps) {\n    const classes = LogoIconStyle();\n    return (\n        <SvgIcon\n            component={Logo}\n            viewBox=\"150 0 400 500\"\n            className={[classes.logoIcon, props.className]}\n        ></SvgIcon>\n    );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Home from \"@material-ui/icons/Home\";\n\nimport { graplHeaderStyles } from \"./styles\";\nimport { GraplHeaderProps } from \"types/GraplHeaderTypes\";\n\nimport { LogoIcon } from \"./LogoIcon\";\nimport { IconButton } from \"@material-ui/core\";\n\nconst useStyles = graplHeaderStyles;\n\nconst GraplHeader = ({ displayBtn }: GraplHeaderProps) => {\n    const classes = useStyles();\n\n    return (\n        <>\n            <AppBar position=\"static\">\n                <Toolbar className={classes.header}>\n                    <LogoIcon className={classes.titleIcon} />\n                    <Typography variant=\"h6\" className={classes.title}>\n                        GRAPL\n                    </Typography>\n                    <IconButton>\n                        <Link\n                            to=\"/\"\n                            className={classes.link}\n                            hidden={!displayBtn}\n                        >\n                            <Home />\n                        </Link>\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n};\n\nexport default GraplHeader;\n","import React from \"react\";\n\nimport Popover from \"@material-ui/core/Popover\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { notificationsStyles } from \"./styles\";\n\nconst useStyles = notificationsStyles;\n\nexport default function LoginNotification() {\n    const classes = useStyles();\n\n    return (\n        <Popover\n            open={true}\n            anchorOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n            }}\n            transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n            }}\n        >\n            <Card variant=\"outlined\" className={classes.root}>\n                <CardActionArea>\n                    <CardContent>\n                        <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                        >\n                            You are not logged in and changes cannot be saved.\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n\n                <CardActions>\n                    <Button\n                        className={classes.button}\n                        size=\"small\"\n                        onClick={() => {\n                            window.history.replaceState(\"#/\", \"\", \"#/login\");\n                            window.location.reload();\n                        }}\n                    >\n                        {\" \"}\n                        Login{\" \"}\n                    </Button>\n                </CardActions>\n            </Card>\n        </Popover>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const notificationsStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        postion: \"fixed\",\n    },\n    button: {\n        border: \"2px solid white\",\n        backgroundColor: \"#42c6ff\",\n    },\n});\n","import { apiFetchReq } from \"../fetch\";\nimport DEV_API_EDGES from \"../constants\";\n\nexport const checkLogin = async (): Promise<boolean | null> => {\n    try {\n        const loginData = await apiFetchReq(\n            `${DEV_API_EDGES.auth}/checkLogin`,\n            \"post\"\n        );\n        return loginData[\"success\"] === \"True\";\n    } catch (e) {\n        return null;\n    }\n};\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst drawerWidth = 500;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n        },\n        button: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.20rem\",\n        },\n        loggedIn: {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n        },\n        appBar: {\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            color: \"#42C6FF\",\n        },\n        hide: {\n            display: \"none\",\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        drawerHeader: {\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: theme.spacing(0, 1),\n            // necessary for content to be below app bar\n            ...theme.mixins.toolbar,\n            justifyContent: \"flex-end\",\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n            marginLeft: -drawerWidth,\n        },\n        contentShift: {\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            marginLeft: 0,\n        },\n        lensName: {\n            color: \"#EAFDFF\",\n            fontSize: \"1.5rem\",\n        },\n        headerTitle: {\n            fontSize: \"35px\",\n        },\n        headerContainer: {\n            width: \"100vw\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        close: {\n            color: \"#42C6FF\",\n        },\n        link: {\n            color: \"#42C6FF\",\n            textDecoration: \"none\",\n        },\n    })\n);\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport Home from \"@material-ui/icons/Home\";\n\nimport { VizNode } from \"types/CustomTypes\";\nimport GraphDisplay from \"../graphDisplay/GraphDisplay\";\nimport LensAndNodeTableContainer from \"./sidebar/LensAndNodeTableContainer\";\nimport { LoginNotification } from \"../reusableComponents\";\nimport { checkLogin } from \"../../services/login/checkLoginService\";\nimport { useStyles } from \"../graphDisplay/GraphDisplayStyles\";\ntype EngagementViewProps = {\n    setLens: (lens: string) => void;\n    curLens: string;\n    curNode: VizNode | null;\n};\n\nconst defaultEngagementState = (): EngagementUxState => {\n    return { curLens: \"\", curNode: null, loggedIn: true, renderedOnce: false };\n};\n\nexport default function EngagementView({\n    setLens,\n    curLens,\n    curNode,\n}: EngagementViewProps) {\n    const classes = useStyles();\n\n    const [open, setOpen] = React.useState(true);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(\n                            classes.menuButton,\n                            open && classes.hide\n                        )}\n                    >\n                        {/* // Menu Icon  */}\n                        &#9776;\n                    </IconButton>\n\n                    <div className={classes.headerContainer}>\n                        <Typography variant=\"h5\" noWrap>\n                            <b className={classes.headerTitle}> GRAPL </b>\n                        </Typography>\n                        <Link to=\"/\" className={classes.link}>\n                            <Home />\n                        </Link>\n                    </div>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={open}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <Button onClick={handleDrawerClose}>\n                        <KeyboardArrowLeftIcon className={classes.close} />\n                    </Button>\n                </div>\n\n                <Divider />\n\n                <LensAndNodeTableContainer\n                    setLens={setLens}\n                    curNode={curNode}\n                />\n            </Drawer>\n\n            <main\n                className={clsx(classes.content, {\n                    [classes.contentShift]: open,\n                })}\n            >\n                <div className={classes.drawerHeader} />\n\n                {/* selected lens name */}\n                <h3 className={classes.lensName}> {curLens || \"\"} </h3>\n\n                <Typography paragraph></Typography>\n            </main>\n        </div>\n    );\n}\n\ntype EngagementUxState = {\n    curLens: string;\n    curNode: VizNode | null;\n    loggedIn: boolean;\n    renderedOnce: boolean;\n};\n\nexport const EngagementUx = () => {\n    const classes = useStyles();\n\n    const [engagementState, setEngagementState] = React.useState(\n        defaultEngagementState()\n    );\n\n    useEffect(() => {\n        if (engagementState.renderedOnce) {\n            return;\n        }\n\n        const fetchLoginAndSetState = async () => {\n            const loggedIn = await checkLogin();\n            if (!loggedIn) {\n                console.warn(\"Logged out\");\n            }\n            setEngagementState({\n                ...engagementState,\n                loggedIn: loggedIn || false,\n                renderedOnce: true,\n            });\n        };\n\n        // Do the initial fetch, and schedule it to re-run every N seconds\n        fetchLoginAndSetState();\n        const interval = setInterval(fetchLoginAndSetState, 1000);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [engagementState, setEngagementState]);\n\n    const loggedIn = engagementState.loggedIn;\n\n    return (\n        <>\n            <EngagementView\n                setLens={(lens: string) =>\n                    setEngagementState({\n                        ...engagementState,\n                        curLens: lens,\n                    })\n                }\n                curLens={engagementState.curLens}\n                curNode={engagementState.curNode}\n            />\n\n            <>\n                <div className={classes.loggedIn}>\n                    {!loggedIn ? <LoginNotification /> : \"\"}\n                </div>\n\n                <GraphDisplay\n                    lensName={engagementState.curLens}\n                    setCurNode={(node) => {\n                        setEngagementState({\n                            ...engagementState,\n                            curNode: node,\n                        });\n                    }}\n                />\n            </>\n        </>\n    );\n};\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const dasboardStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n        },\n        button: {\n            backgroundColor: \"#1A191C\",\n            margin: \"1rem\",\n            fontSize: \".65rem\",\n        },\n        loggedIn: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            zIndex: 100,\n        },\n        dashboard: {\n            display: \"flex\",\n            flexDirection: \"row\",\n        },\n        link: {\n            fontSize: \".75rem\",\n            color: \"white\",\n            textDecoration: \"none\",\n            padding: \".75rem\",\n            backgroundColor: \"#1A191C\",\n            margin: \"1rem\",\n            textAlign: \"center\",\n            borderRadius: \".15rem\",\n            textTransform: \"uppercase\",\n        },\n        sagemaker: {\n            fontSize: \".65rem\",\n            color: \"white\",\n            textDecoration: \"none\",\n            padding: \".65rem\",\n            backgroundColor: \"#1A191C\",\n            margin: \"1rem\",\n            textAlign: \"center\",\n            borderRadius: \".15rem\",\n            textTransform: \"uppercase\",\n        },\n        navSec: {\n            margin: \"0 auto\",\n            marginTop: \"6rem\",\n        },\n        help: {\n            color: \"white\",\n        },\n    })\n);\n","import { apiFetchReq } from \"../fetch\";\nimport DEV_API_EDGES from \"../constants\";\n\nexport const getNotebookUrl = async (): Promise<string> => {\n    return apiFetchReq(`${DEV_API_EDGES.auth}/getNotebook`, \"post\").then(\n        (result) => result.success.notebook_url\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useAsync } from \"react-async-hook\";\nimport { checkLogin } from \"services/login/checkLoginService\";\nimport { Link } from \"react-router-dom\";\nimport { dasboardStyles } from \"./styles\";\nimport GraplHeader from \"../reusableComponents/graplHeader/GraplHeader\";\nimport LoginNotification from \"../reusableComponents/notifications/LoginNotification\";\nimport { getNotebookUrl } from \"services/sagemakerNotebook/notebookService\";\n\nconst useStyles = dasboardStyles;\n\nexport default function Dashboard() {\n    const asyncSagemakerUrl = useAsync(getNotebookUrl, []);\n    const classes = useStyles();\n\n    const [state, setState] = useState({\n        loggedIn: true,\n        renderedOnce: false,\n    });\n\n    useEffect(() => {\n        if (state.renderedOnce) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            await checkLogin().then((loggedIn) => {\n                if (!loggedIn) {\n                    console.warn(\"Logged out\");\n                }\n                setState({\n                    loggedIn: loggedIn || false,\n                    renderedOnce: true,\n                });\n            });\n        }, 2000);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [state, setState]);\n\n    console.log(\"state - loggedin\", state.loggedIn);\n\n    const loggedIn = state.loggedIn;\n\n    const openSagemakerUrl = () => {\n        if (asyncSagemakerUrl.loading || !asyncSagemakerUrl.result) {\n            alert(\"sagemaker url not ready\");\n            return;\n        }\n\n        window.open(asyncSagemakerUrl.result);\n    };\n\n    return (\n        <>\n            <GraplHeader displayBtn={false} />\n\n            <div className={classes.dashboard}>\n                <section className={classes.navSec}>\n                    <Link to=\"/engagements\" className={classes.link}>\n                        {\" \"}\n                        Engagements{\" \"}\n                    </Link>\n                    <Link to=\"/plugins\" className={classes.link}>\n                        {\" \"}\n                        Upload Plugin{\" \"}\n                    </Link>\n                    <Button\n                        onClick={openSagemakerUrl}\n                        className={classes.sagemaker}\n                    >\n                        {\" \"}\n                        Engagement Notebook{\" \"}\n                    </Button>\n                </section>\n\n                <section>\n                    <div className={classes.loggedIn}>\n                        {!loggedIn ? <LoginNotification /> : \"\"}\n                    </div>\n                </section>\n            </div>\n        </>\n    );\n}\n","import { PluginPayload } from \"../../types/uploadPluginTypes\";\nimport DEV_API_EDGES from \"../constants\";\nimport { apiPostRequestWithBody } from \"../fetch\";\n\nexport const uploadFilesToDgraph = async (\n    payload: PluginPayload\n): Promise<boolean> => {\n    const dgraphPayload = JSON.stringify(payload);\n\n    const dgraphFileUpload = await apiPostRequestWithBody(\n        `${DEV_API_EDGES.modelPluginEdge}/deploy`,\n        dgraphPayload\n    );\n\n    const pluginFiles = await dgraphFileUpload;\n\n    return pluginFiles.success.Success;\n};\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n        },\n        formContainer: {\n            color: \"white\",\n            margin: \"1rem\",\n        },\n        btn: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.25rem\",\n            borderRadius: \"6px\",\n        },\n        loggedIn: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n        },\n        inputFiles: {\n            border: \"none\",\n            width: \"35vw\",\n        },\n        upload: {\n            display: \"flex\",\n        },\n        succMsg: {\n            color: \"#03dac6\",\n        },\n        errMsg: {\n            color: \"#CF6679\",\n        },\n        pluginTable: {\n            backgroundColor: \"#292929\",\n            margin: \"1em\",\n            width: \"50%\",\n            height: \"100%\",\n            boxShadow: \" 1.5px 1.5px #000000\",\n        },\n        uploadFormContainer: {\n            backgroundColor: \"#292929\",\n            margin: \"1em\",\n            width: \"50%\",\n            height: \"100%\",\n            boxShadow: \"1.5px 1.5px #000000\",\n            display: \"flex\",\n        },\n        uploadForm: {\n            fontFamily: \"Arial\",\n            display: \"flex\",\n            fontSize: \".75rem\",\n        },\n    })\n);\n","import React, { SyntheticEvent } from \"react\";\nimport { Field, Form, Formik } from \"formik\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\n\nimport {\n    Event,\n    UploadFormState,\n    DirectoryUpload,\n    MessageProps,\n} from \"../../../types/uploadPluginTypes\";\nimport { uploadFilesToDgraph } from \"../../../services/uploadPlugin/uploadFilesToDgraph\";\nimport { useStyles } from \"../uploadPluginStyles\";\n\nconst readFile = async (file: Blob): Promise<string> => {\n    return await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", (event: ProgressEvent<FileReader>) => {\n            if (event.target === null) {\n                console.warn(\"onload event was null\");\n                return;\n            } else {\n                const fileRes = event.target.result;\n                if (fileRes === null) {\n                    console.warn(\"Read pluginfile was null\");\n                    reject(null);\n                    return;\n                } else {\n                    if (typeof fileRes === \"string\") {\n                        resolve(fileRes);\n                    } else {\n                        resolve(new TextDecoder().decode(fileRes));\n                    }\n                }\n            }\n        });\n        return reader.readAsText(file);\n    });\n};\n\nconst defaultUploadFormState = (): UploadFormState => {\n    return { curFiles: null, success: null };\n};\n\nconst Message = ({ status }: MessageProps) => {\n    const classes = useStyles();\n    if (status === true) {\n        return (\n            <div className={classes.succMsg}>\n                Plugins Successfully Deployed!\n            </div>\n        );\n    } else if (status === false) {\n        return <div className={classes.errMsg}>Upload Unsuccessful</div>;\n    } else {\n        return <div />;\n    }\n};\n\nexport const UploadForm = () => {\n    const [state, setState] = React.useState(defaultUploadFormState());\n    const classes = useStyles();\n\n    return (\n        <div className={classes.formContainer}>\n            <h4>UPLOAD DIRECTORY WITH PLUGINS:</h4>\n            <Formik\n                initialValues={{ filename: \"\" }}\n                onSubmit={(event: Event) => {\n                    const fileMap = {} as any;\n                    const reads: Promise<void>[] = [];\n                    const { curFiles } = state;\n\n                    if (curFiles === null) {\n                        console.warn(\n                            \"Attempted to upload files without selecting any\"\n                        );\n                        return;\n                    }\n\n                    for (const f of curFiles) {\n                        let fileRead = readFile(f).then((fileResult) => {\n                            // This any is because webkitRelativePath is not standard, and therefor\n                            // is not part of the File type\n                            const path =\n                                (f as any).webkitRelativePath ||\n                                (f as any).mozRelativePath;\n\n                            fileMap[path] = fileResult;\n                        });\n                        reads.push(fileRead);\n                    }\n                    let success = true;\n                    Promise.all(reads)\n                        .then(() => {\n                            return uploadFilesToDgraph({ plugins: fileMap });\n                        })\n                        .then((didSucceed) => {\n                            success = success && didSucceed;\n                        })\n                        .then(() => setState({ ...state, success }));\n                }}\n            >\n                <Form className={classes.uploadForm}>\n                    {/* accept = property to restrict types, currently we accept ANY type */}\n                    <Field\n                        className={classes.inputFiles}\n                        name=\"plugin\"\n                        directory=\"\"\n                        webkitdirectory=\"\"\n                        mozdirectory=\"\"\n                        type=\"file\"\n                        multiple\n                        placeholder=\"Plugin\"\n                        onChange={(event: SyntheticEvent<DirectoryUpload>) => {\n                            setState({\n                                ...state,\n                                curFiles: event.currentTarget.files,\n                            });\n                        }}\n                    />\n                    <Button className=\"submitBtn\" type=\"submit\">\n                        <CloudUploadIcon className={classes.btn} />\n                    </Button>\n                </Form>\n            </Formik>\n            <br />\n            <Message status={state.success} />\n        </div>\n    );\n};\n","import DEV_API_EDGES from \"../constants\";\nimport { apiFetchReq } from \"../fetch\";\n\nexport const getPluginList = async () => {\n    try {\n        const getPluginListReq = await apiFetchReq(\n            `${DEV_API_EDGES.modelPluginEdge}/listModelPlugins`,\n            \"POST\"\n        );\n        console.log(\"getPluginList\", getPluginListReq);\n        let pluginList: string[] = getPluginListReq.success.plugin_list;\n\n        return pluginList;\n    } catch (e) {\n        console.warn(\"Error retrieving pluginList\", e);\n        return [];\n    }\n};\n","import DEV_API_EDGES from \"../constants\";\nimport { apiPostRequestWithBody } from \"../fetch\";\n\nexport const deletePlugin = async (pluginName: string): Promise<boolean> => {\n    const body = JSON.stringify({ plugins_to_delete: [pluginName] });\n\n    try {\n        const response = await apiPostRequestWithBody(\n            `${DEV_API_EDGES.modelPluginEdge}/deleteModelPlugin`,\n            body\n        );\n\n        await response.success;\n        return true;\n    } catch (e) {\n        console.warn(\"Error deleting plugin\", e);\n        return false;\n    }\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { PluginTableState } from \"../../../types/uploadPluginTypes\";\n\nimport { getPluginList } from \"../../../services/uploadPlugin/getPluginList\";\nimport { deletePlugin } from \"../../../services/uploadPlugin/deletePlugin\";\nimport { useStyles } from \"../uploadPluginStyles\";\n\nconst defaultPluginTableState = (): PluginTableState => {\n    return {\n        rows: [],\n        toggle: true,\n    };\n};\n\nexport const PluginTable = () => {\n    const classes = useStyles();\n    const [state, setState] = React.useState(defaultPluginTableState());\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangePage = (\n        event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n        newPage: number\n    ) => {\n        setPage(newPage);\n    };\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows =\n        rowsPerPage -\n        Math.min(rowsPerPage, state.rows.length - page * rowsPerPage);\n\n    useEffect(() => {\n        try {\n            const interval = setInterval(async () => {\n                await getPluginList().then((rows) => {\n                    setState({\n                        toggle: state.toggle,\n                        rows,\n                    });\n                });\n            }, 1000);\n            return () => clearInterval(interval);\n        } catch (e) {\n            console.error(\"Unable to retrieve plugin list\", e);\n        }\n    }, [state.toggle]);\n\n    return (\n        <>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow key={\"plugin\"}>\n                            <TableCell align=\"left\">PLUGINS</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody aria-label=\"PluginTable\">\n                        {state.rows\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            )\n                            .map((pluginName: string) => {\n                                return (\n                                    <TableRow key={pluginName}>\n                                        <TableCell align=\"right\">\n                                            {pluginName}\n                                            <Button\n                                                onClick={() => {\n                                                    deletePlugin(\n                                                        pluginName\n                                                    ).then(() => {\n                                                        setState({\n                                                            ...state,\n                                                            toggle:\n                                                                state.toggle &&\n                                                                false,\n                                                        });\n                                                        console.log(\n                                                            \"Plugin Deleted\"\n                                                        );\n                                                    });\n                                                }}\n                                            >\n                                                <DeleteOutlinedIcon\n                                                    className={classes.btn}\n                                                />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n\n                <TablePagination\n                    aria-label=\"pagination\"\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={state.rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </TableContainer>\n        </>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { GraplHeader } from \"../reusableComponents\";\n\nimport { UploadForm } from \"./utils/uploadPlugins\";\nimport { PluginTable } from \"./utils/pluginTable\";\nimport { checkLogin } from \"../../services/login/checkLoginService\";\nimport { LoginNotification } from \"../reusableComponents\";\n\nimport { useStyles } from \"./uploadPluginStyles\";\n\nconst UploadPlugin = () => {\n    const classes = useStyles();\n    const [state, setState] = useState({\n        loggedIn: true,\n        renderedOnce: false,\n    });\n\n    useEffect(() => {\n        if (state.renderedOnce) {\n            return;\n        }\n        const interval = setInterval(async () => {\n            await checkLogin().then((loggedIn) => {\n                if (!loggedIn) {\n                    console.warn(\"Logged Out\");\n                }\n                setState({\n                    loggedIn: loggedIn || false,\n                    renderedOnce: true,\n                });\n            });\n        }, 2000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [state, setState]);\n\n    const loggedIn = state.loggedIn;\n\n    return (\n        <>\n            <GraplHeader displayBtn={true} />\n\n            <div className={classes.loggedIn}>\n                {!loggedIn ? <LoginNotification /> : \"\"}\n            </div>\n\n            <div className={classes.upload}>\n                <div className={classes.uploadFormContainer}>\n                    <UploadForm />\n                    <div id=\"message\" />\n                </div>\n                <div className={classes.pluginTable}>\n                    <PluginTable />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default UploadPlugin;\n","import Routes from \"./routes\";\n\nexport default Routes;\n","import React from \"react\";\nimport \"../components/login/LogIn.css\";\nimport { LogIn } from \"../components/login/Login\";\nimport { EngagementUx } from \"../components/engagementView/EngagementView\";\nimport Dashboard from \"../components/dashboard/Dashboard\";\nimport UploadPlugin from \"../components/uploadPlugin/UploadPluginView\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nexport default function Routes() {\n    console.log(\"Grapl loaded\");\n\n    return (\n        <HashRouter>\n            <Switch>\n                <Route exact path=\"/login\" component={LogIn} />\n                <Route exact path=\"/\" component={Dashboard} />\n                <Route exact path=\"/plugins\" component={UploadPlugin} />\n                <Route exact path=\"/engagements\" component={EngagementUx} />\n            </Switch>\n        </HashRouter>\n    );\n}\n","import React from \"react\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    console.log(\"Welcome to Grapl\");\n    return (\n        <>\n            <Routes />\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        primary: {\n            main: \"#373740\",\n        },\n    },\n});\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ThemeProvider theme={darkTheme}>\n                <App />,\n            </ThemeProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}