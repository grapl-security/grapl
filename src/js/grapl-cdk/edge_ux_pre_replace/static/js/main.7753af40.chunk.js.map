{"version":3,"sources":["components/login/styles.tsx","services/constants.ts","services/fetch.ts","services/login/loginService.tsx","components/login/utils/passwordHashing.tsx","components/login/Login.tsx","components/graphDisplay/graphVizualization/nodeColoring.tsx","components/graphDisplay/graphVizualization/nodeCalcs.tsx","components/graphDisplay/graphVizualization/linkCalcs.tsx","components/graphDisplay/graphLayout/labels.tsx","components/graphDisplay/graphLayout/graph_traverse.tsx","services/graphQLRequests/utils_retrieveGraph/unpackPluginNodes.tsx","services/graphQLRequests/retrieveGraphReq.tsx","services/graphQLRequests/utils_retrieveGraph/expandLensScopeQuery.tsx","components/graphDisplay/graphLayout/vizGraphFromLensScope.tsx","components/graphDisplay/graphLayout/mapNodeProps.tsx","components/graphDisplay/graphLayout/mergeGraphs.tsx","components/graphDisplay/graphUpdates/updateGraph.tsx","components/graphDisplay/graphVizualization/graphColors.tsx","components/graphDisplay/GraphDisplay.tsx","components/engagementView/nodeTable/styles.tsx","components/engagementView/nodeTable/NodeTable.tsx","components/engagementView/nodeTable/nodeTableHeader.tsx","components/engagementView/sidebar/styles.tsx","components/engagementView/sidebar/utils/selectLens.tsx","components/engagementView/sidebar/utils/lensTable.tsx","services/graphQLRequests/getLenses.tsx","components/engagementView/sidebar/utils/toggleLensTable.tsx","components/engagementView/sidebar/utils/toggleNodeDetailTable.tsx","components/engagementView/sidebar/LensAndNodeTableContainer.tsx","components/reusableComponents/graplHeader/styles.tsx","components/reusableComponents/graplHeader/GraplHeader.tsx","components/reusableComponents/notifications/Notifications.tsx","components/reusableComponents/notifications/styles.tsx","services/login/checkLoginService.ts","components/graphDisplay/GraphDisplayStyles.tsx","components/engagementView/EngagementView.tsx","components/dashboard/styles.tsx","services/sagemakerNotebook/notebookService.ts","components/dashboard/Dashboard.tsx","services/uploadPlugin/uploadFilesToDgraph.tsx","components/uploadPlugin/uploadPluginStyles.tsx","components/uploadPlugin/utils/uploadPlugins.tsx","services/uploadPlugin/getPluginList.tsx","services/uploadPlugin/deletePlugin.tsx","components/uploadPlugin/utils/pluginTable.tsx","components/uploadPlugin/UploadPluginView.tsx","routes/index.ts","routes/routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loginStyles","makeStyles","theme","createStyles","valErrorMsg","marginLeft","color","fontSize","DEV_API_EDGES","auth","graphQL","modelPluginEdge","apiFetch","urlSlug","a","method","fetch","credentials","headers","Headers","catch","e","console","warn","Error","response","json","apiFetchWithBody","body","loginService","username","password","loginBody","JSON","stringify","loginData","log","sha256","message","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join","sha256WithPepper","hashed","i","LogIn","_","classes","validationSchema","Yup","shape","userName","required","React","useState","loginFailed","state","setState","className","initialValues","onSubmit","values","window","history","replaceState","location","reload","errors","touched","name","type","placeholder","riskOutline","risk","calcNodeRiskPercentile","_nodeRisk","_allRisks","nodeRisk","riskIndex","allRisks","n","sort","undefined","length","Math","floor","findNode","id","nodes","node","calcLinkRiskPercentile","link","graph","linkRisk","Graph","sourceNode","source","targetNode","target","sourceRisk","risk_score","targetRisk","round","error","calcLinkRisk","calcLinkColor","getNodeLabel","nodeType","_node","mapGraph","f","visited","Set","mapEdgeProps","edgeName","neighbor","_mapGraph","has","uid","add","mapEdges","prop","Object","prototype","hasOwnProperty","call","possibleNeighbor","isArray","traverseNodes","callback","traverseNeighbors","builtins","unpackPluginNodes","predicates","edge_name","dgraph_type","pluginNode","keys","forEach","key","retrieveGraph","lens","expandScopeQueryData","lensScopeQuery","query","then","res","data","lens_scope","scope","queryResponse","lensWithScopeData","getNodeType","dgraphType","vizGraphFromLensScope","vizGraphData","links","vizNodeMap","Map","vizNode","fromNode","toNode","push","nodeLabel","strippedNode","riskScore","analyzerNames","nodeRiskList","riskNode","analyzer_name","edge","_neighbor","set","index","mapNodeProps","nodeProp","mergeNodes","newNode","merged","nodeWithoutVizFormatting","mergeGraphs","curGraph","updateGraph","updated","outputGraph","get","_link","setLink","newLink","getLink","neighbors","lensName","engagementState","setEngagementState","curLensName","updatedGraph","mergeUpdatedGraph","graphData","colors","GraphDisplay","setCurNode","fgRef","useRef","defaultGraphDisplayState","useEffect","interval","setInterval","clearInterval","useMemo","clickedNode","setClickedNode","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","hoverNode","setHoverNode","updateHighlight","nodeClick","useCallback","ctx","nodeHover","clear","nodeStyling","fx","x","fy","y","save","NODE_R","riskPercentile","nodeSize","beginPath","arc","PI","fillStyle","fill","nodeFillColor","label","min","measureText","width","font","labelBkgdDimensions","fillRect","textAlign","textBaseline","fillText","ref","nodeCanvasObject","nodeCanvasObjectMode","onNodeHover","onNodeClick","onNodeDragEnd","linkColor","linkWidth","linkDirectionalArrowLength","linkDirectionalArrowRelPos","calcLinkDirectionalArrowRelPos","linkDirectionalParticleSpeed","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleWidth","linkRiskPercentile","calcLinkParticleWidth","linkCanvasObjectMode","linkCanvasObject","start","end","textPos","relLink","maxTextLength","sqrt","pow","LABEL_NODE_MARGIN","textAngle","atan2","labelType","translate","rotate","restore","onLinkHover","warmupTicks","cooldownTicks","useStyles","root","nodeTable","minWidth","tableHeader","backgroundColor","nodeTableData","NodeTable","hidden","displayNode","propName","includes","Date","toLocaleString","TableContainer","Table","styles","TableHead","TableRow","TableCell","align","nodeTableHeader","TableBody","entries","nodeProperty","value","node_key","backdrop","button","height","margin","title","expand","header","display","table","pagination","head","SelectLens","props","component","Button","onClick","setLens","lens_type","score","getLenses","first","offset","gqlQuery","graphQLQuery","lenses","lensQueryData","ToggleLensTable","lensRetrievedState","setLensRetrievedState","toggled","toggleTableState","setToggleTableState","pageState","setPageState","rowsPerPageState","setRowsPerPageState","concat","page","rowsPerPage","handleChangePage","handleChangeRowsPerPage","TablePagination","aria-label","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","Number","lens_name","lensTable","event","parseInt","Backdrop","open","CircularProgress","Divider","ToggleNodeDetailTable","curNode","setToggle","NodeDetails","LensAndNodeTableContainer","justifyContent","textDecoration","GraplHeader","displayBtn","AppBar","position","Toolbar","Typography","variant","to","maxWidth","postion","border","LoginNotification","Card","CardActionArea","CardContent","CardActions","size","checkLogin","padding","loggedIn","alignItems","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","flexGrow","contentShift","headerTitle","headerContainer","close","EngagementView","curLens","setOpen","clsx","IconButton","noWrap","Drawer","anchor","paper","paragraph","EngagementUx","renderedOnce","dasboardStyles","welcome","zIndex","nav","flexDirection","dashboard","borderRadius","textTransform","fontWeight","getNotebookUrl","result","success","notebook_url","Dashboard","asyncSagemakerUrl","useAsync","loading","alert","uploadFilesToDgraph","payload","dgraphPayload","dgraphFileUpload","pluginFiles","Success","formContainer","btn","inputFiles","upload","succMsg","errMsg","pluginTable","boxShadow","uploadFormContainer","uploadForm","fontFamily","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","fileRes","TextDecoder","decode","readAsText","Message","status","UploadForm","curFiles","fileMap","reads","fileRead","fileResult","path","webkitRelativePath","mozRelativePath","all","plugins","didSucceed","directory","webkitdirectory","mozdirectory","multiple","onChange","currentTarget","files","getPluginList","getPluginListReq","pluginList","plugin_list","deletePlugin","pluginName","plugins_to_delete","PluginTable","rows","toggle","setPage","setRowsPerPage","emptyRows","style","colSpan","newPage","UploadPlugin","Routes","exact","App","Boolean","hostname","match","darkTheme","createMuiTheme","palette","primary","main","rootElement","document","getElementById","ReactDOM","render","StrictMode","ThemeProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7753af40.chunk.js","sourcesContent":["import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const loginStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles(\n            {\n                valErrorMsg:{\n                    marginLeft: \".8rem\",\n                    color: \"red\",\n                    fontSize: \".75rem\"\n                }\n            }\n        )\n);\n","const DEV_API_EDGES = {\r\n    auth: \"auth\",\r\n    graphQL: \"graphQlEndpoint\",\r\n    modelPluginEdge: \"modelPluginDeployer\",\r\n};\r\n\r\nexport default DEV_API_EDGES;\r\n","export const apiFetch = async (urlSlug: string, method = \"GET\") => {\r\n    const response = await fetch(urlSlug, {\r\n        method,\r\n        credentials: \"include\",\r\n        headers: new Headers({\r\n            \"Content-Type\": \"application/json\",\r\n        }),\r\n    }).catch((e) => {\r\n        console.warn(e);\r\n        throw new Error(`API Request Error: ${e}`);\r\n    });\r\n\r\n    return response.json();\r\n};\r\n\r\n\r\nexport const apiFetchWithBody = async (urlSlug: string, method = \"POST\", body: string) => {\r\n    const response = await fetch(urlSlug, {\r\n        method,\r\n        credentials: \"include\",\r\n        headers: new Headers({\r\n            \"Content-Type\": \"application/json\",\r\n        }),\r\n        body: body,\r\n    }).catch((e) => {\r\n        console.warn(e);\r\n        throw new Error(`Error with Post Request: ${e}`);\r\n    });\r\n\r\n    return response.json();\r\n};\r\n","import DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const loginService = async (username: string, password: string) => {\n    const loginBody = JSON.stringify({ 'username': username, 'password': password });\n\n    try {\n        const loginData = await apiFetchWithBody(`${DEV_API_EDGES.auth}/login`, \"post\", loginBody)\n        return loginData['success'] === 'True';\n    } catch (e) {\n        console.log(\"Login Error\", e);\n        return false;\n    }\n};","async function sha256(message: string) {\n    // encode as UTF-8\n    const msgBuffer = new TextEncoder().encode(message);\n\n    // hash the message\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n\n    // convert ArrayBuffer to Array\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n    // convert bytes to hex string\n    return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n}\n\n\nexport const sha256WithPepper = async (username: string, password: string) => {\n    // The pepper only exists to prevent rainbow tables for extremely weak passwords\n    // Client side hashing itself is only to prevent cases where the password is\n    // exposed before it makes it into the password database\n    const pepper = \"f1dafbdcab924862a198deaa5b6bae29aef7f2a442f841da975f1c515529d254\";\n\n    let hashed = await sha256(password + pepper + username);\n\n    for (let i = 0; i < 5000; i++) {\n        hashed = await sha256(hashed)\n    }\n\n    return hashed\n};","import React from 'react';\nimport * as Yup from \"yup\";\nimport {Field, Form, Formik} from \"formik\";\n\nimport './LogIn.css';\nimport {loginStyles} from './styles';\nimport {LoginProps} from 'types/CustomTypes';\nimport {loginService} from 'services/login/loginService';\nimport {sha256WithPepper} from './utils/passwordHashing';\n\n\nexport const LogIn = (_: LoginProps) => {\n  const useStyles = loginStyles; \n  \n  const classes = useStyles();\n\n  const validationSchema = Yup.object().shape({\n    userName: Yup.string().required(\"Username Required\"),\n    password: Yup.string().required(\"Password Required\")\n  })\n  \n  const [state, setState] = React.useState({\n    loginFailed: false\n  })\n\n  return (\n    <div className = \"backgroundImage\">\n      <div className = \"grapl\"> Grapl </div>\n\n      <div className = \"formContainer\">\n        <Formik\n          initialValues={ {userName: \"\", password: \"\"} }\n          validationSchema = {validationSchema}\n          onSubmit = { \n            async values => {\n              const password = await sha256WithPepper(\n                values.userName, values.password\n              );\n              \n              const loginSuccess = await loginService(values.userName, password);\n              \n              if (loginSuccess === true) {\n                window.history.replaceState('#/login', \"\", \"#/\")\n                window.location.reload();\n                console.log(\"Logged In\");\n              } else {\n                setState({\n                  ...state,\n                  loginFailed: true\n                })\n              }\n            }\n          }\n        >\n\n          {\n            ({ errors, touched }) => (\n                <Form>\n                  <Field name=\"userName\" type=\"text\" placeholder=\"Username\"  />\n                  {touched.userName && errors.userName && <div className = {classes.valErrorMsg}>{errors.userName}</div>}\n              \n                  <Field name=\"password\" type=\"password\" placeholder=\"Password\"/> <br/>\n                  {touched.password && errors.password && <div className = {classes.valErrorMsg}>{errors.password}</div>}\n\n                  <button className=\"submitBtn\"  type=\"submit\">Submit</button>\n\n                  {state.loginFailed && <div className= {classes.valErrorMsg}>Unsuccessful Login</div>}\n                </Form>\n            )\n          }\n        </Formik>\n      </div>\n    </div>\n  );\n}\n\nexport default LogIn;","export const nodeFillColor = (nodeType: string) => {\n\tswitch (nodeType) {\n\t\tcase \"Asset\":\n\t\t\treturn \"rgba(251, 154, 153, .8)\"; //#FB9A99\n\t\tcase \"File\":\n\t\t\treturn \"rgba(236, 189, 169, .8)\"; //#ECBDA9\n\t\tcase \"IpAddress\":\n\t\t\treturn \"rgba(253, 191, 111, .8)\"; //#6CF4AB\n\t\tcase \"IpConnections\":\n\t\t\treturn \"rgba(255, 241, 150, .8)\"; //#FFF196\n\t\tcase \"IpPort\":\n\t\t\treturn \"rgba(178, 223, 138, .8)\"; // #B2DF8A\n\t\tcase \"NetworkConnection\":\n\t\t\treturn \"rgba(166, 206, 227, .8)\"; //#A6CEE3\n\t\tcase \"Process\":\n\t\t\treturn \"rgba(31, 120, 180, .8)\"; // #1F78B4\n\t\tcase \"ProcessInboundConnection\":\n\t\t\treturn \"rgba(202, 178, 214, .8)\"; //#CAB2D6\n\t\tcase \"ProcessOutboundConnection\":\n\t\t\treturn \"rgba(106, 61, 154, .8)\"; //#6A3D9A\n\t\tcase \"Risk\":\n\t\t\treturn \"rgba(238, 238, 238, .8)\"; //#EEEEEE\n\t\tdefault:\n\t\t\treturn \"#42C6FF\";\n\t}\n};\n\nexport const riskOutline = (risk: number) => {\n\tif (risk >= 0 && risk <= 25) {\n\t\treturn \"#02D084\";\n\t}\n\tif (risk >= 26 && risk <= 50) {\n\t\treturn \"#13A5E3\";\n\t}\n\tif (risk >= 51 && risk <= 75) {\n\t\treturn \"#FFD773\";\n\t}\n\tif (risk >= 76 && risk <= 100) {\n\t\treturn \"#E50F14\";\n\t}\n};\n\n","import { VizGraph, VizNode } from \"../../../types/CustomTypes\";\n\nexport const calcNodeRiskPercentile = (\n\t_nodeRisk: number | { risk: number },\n\t_allRisks: any\n): number => {\n\tlet nodeRisk = _nodeRisk;\n\tlet riskIndex = 0;\n\n\tconst allRisks = _allRisks\n\t\t.map((n: any) => n || 0)\n\t\t.sort((a: number, b: number) => a - b);\n\n\tif (typeof _nodeRisk === \"object\") {\n\t\tnodeRisk = _nodeRisk.risk;\n\t}\n\tif (nodeRisk === undefined || nodeRisk === 0 || allRisks.length === 0) {\n\t\treturn 0;\n\t}\n\n\tfor (const risk of allRisks) {\n\t\tif (nodeRisk >= risk) {\n\t\t\triskIndex += 1;\n\t\t}\n\t}\n\treturn Math.floor((riskIndex / allRisks.length) * 100);\n};\n\nexport const nodeSize = (node: VizNode, graphData: VizGraph): number => {\n\tconst nodes = [...graphData.nodes].map((node) => node.risk);\n\tconst _node = node as any;\n\n\tconst riskPercentile = calcNodeRiskPercentile(_node.risk_score, nodes);\n\n\tif (riskPercentile >= 75) {\n\t\treturn 7;\n\t} else if (riskPercentile >= 50) {\n\t\treturn 6;\n\t} else if (riskPercentile >= 25) {\n\t\treturn 5;\n\t} else {\n\t\treturn 4;\n\t}\n};\n","import { VizGraph, Link, VizNode } from \"../../../types/CustomTypes\";\nimport { calcNodeRiskPercentile } from \"./nodeCalcs\";\nimport { riskOutline } from \"./nodeColoring\";\n\nconst findNode = (id: number, nodes: VizNode[]) => {\n\tfor (const node of nodes || []) {\n\t\tif (node.id === id) {\n\t\t\treturn node;\n\t\t}\n\t}\n\treturn null;\n};\n\nexport const calcLinkRisk = (link: Link, Graph: VizGraph) => {\n\t\tlet sourceNode: any =\n\t\t\tfindNode(link.source, Graph.nodes) || \n\t\t\tfindNode((link as any).source.name, Graph.nodes);\n\t\tlet targetNode: any=\n\t\t\tfindNode(link.target as any, Graph.nodes) ||\n\t\t\tfindNode((link as any).target.name as any, Graph.nodes);\n\n\tconst sourceRisk: number = (sourceNode.risk_score) || 0;\n\tconst targetRisk: number = (targetNode.risk_score) || 0;\n\n\tif (!sourceNode || !targetNode) {\n\t\tconsole.error(\n\t\t\t\"Missing srcNode/dstNode\",\n\t\t\tsourceNode,\n\t\t\tlink.source,\n\t\t\ttargetNode,\n\t\t\tGraph.nodes\n\t\t);\n\t\treturn 0;\n\t}\n\treturn Math.round((sourceRisk + targetRisk) / 2);\n};\n\nexport const calcLinkRiskPercentile = (link: Link, graph: VizGraph) => {\n\tconst linkRisk = calcLinkRisk(link, graph);\n\tconst nodes = [...graph.nodes].map((node) => node.risk);\n\n\treturn calcNodeRiskPercentile(linkRisk, nodes);\n};\n\nexport const calcLinkColor = (link: Link, graph: VizGraph): string => {\t\n    const risk = calcLinkRiskPercentile(link, graph);\n\treturn riskOutline(risk) as string;   \n};\n\t\nexport const calcLinkParticleWidth = (link: Link, graph: VizGraph): number => {\n\tconst linkRiskPercentile = calcLinkRiskPercentile(link, graph);\n\tif (linkRiskPercentile >= 75) {\n\t\treturn 5;\n\t} else if (linkRiskPercentile >= 50) {\n\t\treturn 4;\n\t} else if (linkRiskPercentile >= 25) {\n\t\treturn 3;\n\t} else {\n\t\treturn 2;\n\t}\n};\n\nexport const calcLinkDirectionalArrowRelPos = (link: Link, graph: VizGraph) => {\n\tconst _link = link as any; \n    const node = \n        findNode(_link.target.uid, graph.nodes);\n\n    if (node === null || node.risk === 0) {\n        return 1.0\n    }\n\n\tconst nodes = [...graph.nodes].map(node => node.risk);\n\t\n    const riskPercentile = calcNodeRiskPercentile(node.risk_score as any, nodes);\n\n    if (riskPercentile >= 75) {\n        return 0.95\n    } else if (riskPercentile >= 50) {\n        return 0.9\n    } else if (riskPercentile >= 25) {\n        return 0.85\n    } else {\n        return 1.0\n    }\n};","import { NodeProperties } from \"../../../types/CustomTypes\";\n\nconst getNodeLabel = (nodeType: string, node: NodeProperties) => {\n\tconst _node = node;\n\n\tswitch (nodeType) {\n\t\tcase \"Process\":\n\t\t\treturn _node[\"process_name\"] || _node[\"process_id\"] || \"Process\";\n\t\tcase \"Asset\":\n\t\t\treturn _node[\"hostname\"] || \"Asset\";\n\t\tcase \"File\":\n\t\t\treturn _node[\"file_path\"] || \"File\";\n\t\tcase \"IpAddress\":\n\t\t\treturn _node[\"external_ip\"] || \"IpAddress\";\n\t\tcase \"Lens\":\n\t\t\treturn _node[\"lens_name\"] || \"Lens\";\n\t\tdefault:\n\t\t\treturn nodeType || \"\";\n\t}\n};\n\nconst getLinkLabel = (labelType: string) => {\n\tif (labelType === \"children\") {\n\t\treturn \"executed\";\n\t}\n\treturn labelType;\n};\n\nexport { getLinkLabel, getNodeLabel };\n","import { NodeProperties, NodeEdges } from \"types/CustomTypes\";\n\nconst _mapGraph = <T extends NodeProperties & NodeEdges>(\n\tnode: T,\n\tvisited: Set<string>,\n\tf: (node: T, prop: string, neighbor: T) => void\n) => {\n\tmapEdgeProps(node, (edgeName: string, neighbor: T) => {\n\t\tif (visited.has(node.uid + edgeName + neighbor.uid)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvisited.add(node.uid + edgeName + neighbor.uid);\n\n\t\tf(node, edgeName, neighbor);\n\t\t_mapGraph(neighbor, visited, f);\n\t});\n};\n\nexport const mapGraph = <T extends NodeProperties & NodeEdges>(\n\tnode: T,\n\tf: (node: T, prop: string, neighbor: T) => void\n) => {\n\tconst visited: Set<string> = new Set();\n\tmapEdgeProps(node, (edgeName: string, neighbor: T) => {\n\t\tf(node, edgeName, neighbor);\n\t\t_mapGraph(neighbor, visited, f);\n\t});\n};\n\n// f Type = <T extends NodeProperties & NodeEdges>(prop:string, neighbor: BaseNodeProperties) => void)\n// Given a node, call 'f' on any of its neighbors\nexport const mapEdges = <T extends NodeProperties & NodeEdges>(\n\tnode: T,\n\tf: (prop: string, neighbor: T) => void\n) => {\n\tfor (const prop in node) {\n\t\tif (Object.prototype.hasOwnProperty.call(node, prop)) {\n\t\t\tconst possibleNeighbor = node[prop] as any;\n\t\t\tif (Array.isArray(possibleNeighbor)) {\n\t\t\t\tfor (const neighbor of possibleNeighbor) {\n\t\t\t\t\tif (neighbor.uid !== undefined) {\n\t\t\t\t\t\tf(prop, neighbor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (possibleNeighbor && possibleNeighbor.uid !== undefined) {\n\t\t\t\t\tf(prop, possibleNeighbor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const mapEdgeProps = <T extends NodeProperties & NodeEdges>(\n\tnode: T,\n\tf: (prop: string, neighbor: T) => void\n) => {\n\tfor (const prop in node) {\n\t\tif (Object.prototype.hasOwnProperty.call(node, prop)) {\n\t\t\tconst possibleNeighbor = (node as any)[prop];\n\t\t\tif (Array.isArray(possibleNeighbor)) {\n\t\t\t\tfor (const neighbor of possibleNeighbor) {\n\t\t\t\t\tif (neighbor.uid !== undefined) {\n\t\t\t\t\t\tf(prop, neighbor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (possibleNeighbor && possibleNeighbor.uid !== undefined) {\n\t\t\t\t\tf(prop, possibleNeighbor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const traverseNodes = <T extends NodeProperties & NodeEdges>(\n\tnode: T,\n\tcallback: (node: T) => void\n) => {\n\tcallback(node);\n\tmapEdges(node, (_, neighbor) => {\n\t\ttraverseNodes(neighbor, callback);\n\t});\n};\n\nexport const traverseNeighbors = <T extends NodeProperties & NodeEdges>(\n\tnode: T,\n\tcallback: (node: T, prop: string, neighbor: T) => void\n) => {\n\tmapEdges(node, (edgeName, neighbor) => {\n\t\tcallback(node, edgeName, neighbor);\n\t\ttraverseNeighbors(neighbor, callback);\n\t});\n};\n","import {Node} from '../../../types/CustomTypes'\nimport {mapGraph} from \"components/graphDisplay/graphLayout/graph_traverse\";\n\nconst builtins = new Set([\n    'Process',\n    'File',\n    'IpAddress',\n    'Asset',\n    'Risk',\n    'IpConnections',\n    'ProcessInboundConnections',\n    'ProcessOutboundConnections',\n])\n\nexport const unpackPluginNodes = (nodes: Node[]) => {\n    for (const node of nodes) {\n        if (!(node as any).predicates) {\n            continue\n        }\n        mapGraph(node, (node, edge_name, neighbor) => {\n            if ((node as any).predicates) {\n                if(!builtins.has((node as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(node as any).predicates};\n                    delete (node as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (node as any)[key] = pluginNode[key]; });\n                }\n            }\n\n            if ((neighbor as any).predicates) {\n                if(!builtins.has((neighbor as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(neighbor as any).predicates};\n                    delete (neighbor as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (neighbor as any)[key] = pluginNode[key]; });\n                }\n            }\n        })\n    }\n}","import {Node} from '../../types/CustomTypes';\nimport {unpackPluginNodes} from './utils_retrieveGraph/unpackPluginNodes';\nimport {expandLensScopeQuery} from './utils_retrieveGraph/expandLensScopeQuery';\n\nimport DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const retrieveGraph = async (lens: string): Promise<Node[]> => {\n    const expandScopeQueryData = expandLensScopeQuery(lens);\n    \n    const lensScopeQuery = JSON.stringify({ query: expandScopeQueryData })\n\n    const queryResponse = \n        await apiFetchWithBody(`${DEV_API_EDGES.graphQL}/graphql`, \"POST\", lensScopeQuery)\n            .then(res => res)\n            .then(res => {\n                if(res.errors){\n                    console.log(\"Unable to retrieve graph data \", res.errors)\n                }\n                return res\n            })\n            .then((res) => res.data)\n            .then((res) => res.lens_scope.scope);\n\n    const lensWithScopeData = await queryResponse;\n    \n    unpackPluginNodes(lensWithScopeData);\n\n    return lensWithScopeData;\n};\n","export const expandLensScopeQuery = (lensName: string) => {\n    const query = `\n    {\n        lens_scope(lens_name: \"${lensName}\") {\n            uid,\n            node_key,\n            lens_type,\n            dgraph_type,\n            score,\n            scope {\n                ... on Process {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    process_name, \n                    process_id,\n                    children {\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n                ... on Asset {\n                    uid, \n                    node_key, \n                    dgraph_type,\n                    hostname,\n                    asset_ip{\n                        ip_address\n                    }, \n                    asset_processes{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    },\n                    files_on_asset{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        file_path\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n                ... on File {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n                ... on PluginType {\n                    predicates,\n                }\n            }\n        }\n    }\n`;\n    return query;\n}","import { traverseNodes, traverseNeighbors, mapEdges } from \"./graph_traverse\";\nimport { getNodeLabel } from \"./labels\";\nimport {\n\tLink,\n\tVizGraph,\n\tBaseNodeProperties,\n\tVizNode,\n\tNode,\n\tRisk,\n} from \"../../../types/CustomTypes\";\n\nexport const getNodeType = (node: BaseNodeProperties) => {\n\tconst dgraphType = node.dgraph_type;\n\n\tif (dgraphType) {\n\t\tif (Array.isArray(dgraphType)) {\n\t\t\treturn dgraphType[0];\n\t\t}\n\t\treturn dgraphType;\n\t}\n\n\tconsole.warn(\"Unable to find type for node \", node);\n\treturn \"Unknown Type\";\n};\n\nexport const vizGraphFromLensScope = (vizGraphData: Node[]): VizGraph => {\n\tconst nodes: VizNode[] = [];\n\tconst links: Link[] = [];\n\tconst vizNodeMap: Map<number, VizNode> = new Map();\n\n\tfor (const vizNode of vizGraphData) {\n\t\ttraverseNeighbors(vizNode, (fromNode, edgeName, toNode) => {\n\t\t\tif (edgeName !== \"scope\") {\n\t\t\t\tif (\n\t\t\t\t\tgetNodeType(fromNode) === \"Unknown\" ||\n\t\t\t\t\tgetNodeType(toNode) === \"Unknown\" ||\n\t\t\t\t\tgetNodeType(fromNode) === \"Risk\" ||\n\t\t\t\t\tgetNodeType(toNode) === \"Risk\"\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlinks.push({\n\t\t\t\t\tsource: fromNode.uid,\n\t\t\t\t\tname: edgeName,\n\t\t\t\t\ttarget: toNode.uid,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\ttraverseNodes(vizNode, (node) => {\n\t\t\tconst nodeType = getNodeType(node);\n\n\t\t\tif (nodeType === \"Unknown\" || nodeType === \"Risk\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLabel = getNodeLabel(nodeType, node);\n\t\t\tconst strippedNode = { ...node };\n\n\t\t\tlet riskScore = (node[\"risk\"] || 0) as number;\n\t\t\tlet analyzerNames = \"\";\n\t\t\tlet nodeRiskList = (node[\"risks\"] || []) as Risk[];\n\n\t\t\tfor (const riskNode of nodeRiskList) {\n\t\t\t\triskScore += riskNode.risk_score || 0;\n\n\t\t\t\tif (analyzerNames && riskNode.analyzer_name) {\n\t\t\t\t\tanalyzerNames += \", \";\n\t\t\t\t}\n\t\t\t\tanalyzerNames += riskNode.analyzer_name || \"\";\n\t\t\t}\n\n\t\t\tmapEdges(node, (edge: string, _neighbor: Node) => {\n\t\t\t\t// The stripped node is converted to another type, so we can cast to any here\n\t\t\t\t(strippedNode as any)[edge] = undefined;\n\t\t\t});\n\n\t\t\tconst vizNode = {\n\t\t\t\tname: node.uid,\n\t\t\t\t...strippedNode,\n\t\t\t\trisk_score: riskScore,\n\t\t\t\tanalyzerNames,\n\t\t\t\tid: node.uid,\n\t\t\t\tnodeType,\n\t\t\t\tnodeLabel,\n\t\t\t}\n\t\t\tvizNodeMap.set(node.uid, (vizNode as unknown) as VizNode); // as unknown handles destructuring.\n\t\t});\n\t}\n\n\t// Because \"nodes\" is an array object we need to convert our data to use the \n\t// id property values of entries in the array instead of the indexes of the array.\n\tconst index = {} as { [key: number]: VizNode };\n\t\n\tfor (const vizNode of vizNodeMap.values()) {\n\t\tnodes.push(vizNode);\n\t\tif(!index[vizNode.uid]){\n\t\t\tindex[vizNode.uid] = vizNode;\n\t\t}\n\t}\n\n\t// Return data in format for react-force-graph display\n\treturn {\n\t\tnodes,\n\t\tlinks,\n\t\tindex,\n\t};\n};\n","import { NodeProperties } from \"../../../types/CustomTypes\";\n\nexport const mapNodeProps = (\n\tnode: NodeProperties,\n\tf: (propName: string) => void\n) => {\n\tfor (const prop in node) {\n\t\tconst nodeProp = node[prop];\n\n\t\tif (Object.prototype.hasOwnProperty.call(node, prop)) {\n\t\t\tif (Array.isArray(nodeProp)) {\n\t\t\t\tif (nodeProp.length > 0) {\n\t\t\t\t\tif (nodeProp[0].uid === undefined) {\n\t\t\t\t\t\tf(prop);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tf(prop);\n\t\t\t}\n\t\t}\n\t}\n};","import { mapNodeProps } from \"./mapNodeProps\";\nimport { VizGraph, VizNode } from \"../../../types/CustomTypes\";\n\n// if graph has updated, merge y into x\nexport const mergeNodes = (node: VizNode, newNode: VizNode) => {\n\tlet merged = false;\n\tlet nodeWithoutVizFormatting = {} as VizNode;\n\tfor(const prop in node){\n\t\tif(\n\t\t\tprop === \"fx\" || \n\t\t\tprop === \"fy\" ||\n\t\t\tprop === \"links\" ||\n\t\t\tprop === \"neighbors\" ||\n\t\t\tprop === \"vx\" || \n\t\t\tprop === \"vy\" || \n\t\t\tprop === \"x\" || \n\t\t\tprop === \"y\" || \n\t\t\tprop === \"vx\" || \n\t\t\tprop === \"vy\"\n\t\t){\n\t\t\tcontinue; \n\t\t} \n\n\t\tnodeWithoutVizFormatting[prop] = node[prop]; \n\t}\n\n\tconst _node = nodeWithoutVizFormatting;\n\n\tmapNodeProps(newNode, (prop: string) => {\n\t\tif (!Object.prototype.hasOwnProperty.call(_node, prop)) {\n\t\t\tif ((_node as any)[prop] !== (newNode as any)[prop]) {\n\t\t\t\t(_node as any)[prop] = (newNode as any)[prop];\n\t\t\t\tmerged = true;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t});\n\treturn merged;\n};\n\nexport const mergeGraphs = (\n\tcurGraph: VizGraph,\n\tupdateGraph: VizGraph\n): VizGraph | null => {\n\t// Merges two graphs into a new graph, returns 'null' when there are no new updates\n\n\tif (!updateGraph.nodes && !updateGraph.links) {\n\t\treturn null;\n\t}\n\n\tlet updated = false;\n\n\tconst outputGraph: VizGraph = { nodes: [], links: [], index: {} };\n\tconst nodes = new Map();\n\tconst links = new Map();\n\n\tfor (const node of curGraph.nodes) {\n\t\tnodes.set(node.uid, node);\n\t}\n\n\tfor (const newNode of updateGraph.nodes) {\n\t\tconst node = nodes.get(newNode.uid);\n\t\tif (node) {\n\t\t\tif (mergeNodes(node, newNode)) {\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t} else {\n\t\t\tnodes.set(newNode.uid, newNode);\n\t\t\tupdated = true;\n\t\t}\n\t}\n\n\tfor (const link of curGraph.links) {\n\t\tif (link) {\n\t\t\tconst _link = link as any; \n\t\t\tconst setLink = _link.source.uid + link.name + _link.target.uid; \n\t\t\tlinks.set(setLink, link);\n\t\t}\n\t}\n\n\tfor (const newLink of updateGraph.links) {\n\t\tconst getLink = newLink.source + newLink.name + newLink.target; \n\t\tconst link = links.get(getLink);\n\n\t\tif (!link) {\n\t\t\tlinks.set(newLink.source + newLink.name + newLink.target, newLink);\n\t\t\tupdated = true;\n\t\t}\n\t}\n\n\toutputGraph.nodes = Array.from(nodes.values());\n\toutputGraph.links = Array.from(links.values());\n\n\tfor (const node of outputGraph.nodes) {\n\t\toutputGraph.index[node.uid] = node;\n\t}\n\n\toutputGraph.links.forEach((link) => {\n\t\t// the graph should not be updated if the link is already in the index array\n\n\t\tconst sourceNode = outputGraph.index[link.source] as any;\n\t\tconst targetNode = outputGraph.index[link.target] as any;\n\n\t\tif (sourceNode === undefined || !targetNode === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t!sourceNode.neighbors && (sourceNode.neighbors = new Set());\n\t\t!targetNode.neighbors && (targetNode.neighbors = new Set());\n\n\t\tsourceNode.neighbors.add(targetNode);\n\t\ttargetNode.neighbors.add(sourceNode);\n\n\t\t!sourceNode.links && (sourceNode.links = new Set());\n\t\t!targetNode.links && (targetNode.links = new Set());\n\n\t\tsourceNode.links.add(link);\n\t\ttargetNode.links.add(link);\n\t});\n\n\tif (updated) {\n\t\treturn outputGraph;\n\t} else {\n\t\treturn null;\n\t}\n};\n","import { GraphState } from \"../../../types/GraphDisplayTypes\";\n\nimport { retrieveGraph } from \"../../../services/graphQLRequests/retrieveGraphReq\";\nimport { vizGraphFromLensScope } from \"../graphLayout/vizGraphFromLensScope\";\nimport { mergeGraphs } from \"../graphLayout/mergeGraphs\";\n\nexport const updateGraph = async (\n\tlensName: string,\n\tengagementState: GraphState,\n\tsetEngagementState: (engagementState: GraphState) => void\n) => {\n\tif (!lensName) {\n\t\tconsole.log(\"No lens names\");\n\t\treturn;\n\t}\n\n\tconst curLensName = engagementState.curLensName;\n\n\tawait retrieveGraph(lensName)\n\t\t.then(async (scope) => {\n\t\t\tconst updatedGraph = vizGraphFromLensScope(scope);\n\t\t\tconst mergeUpdatedGraph = mergeGraphs(engagementState.graphData, updatedGraph);\n\t\t\t\n\t\t\tif (mergeUpdatedGraph !== null) {\n\t\t\t\tif (curLensName === lensName) {\n\t\t\t\t\tsetEngagementState({\n\t\t\t\t\t\t...engagementState,\n\t\t\t\t\t\tcurLensName: lensName,\n\t\t\t\t\t\tgraphData: mergeUpdatedGraph,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tsetEngagementState({\n\t\t\t\t\t\t...engagementState,\n\t\t\t\t\t\tcurLensName: lensName,\n\t\t\t\t\t\tgraphData: updatedGraph,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((e) => console.error(\"Failed to retrieveGraph \", e));\n};\n","export const colors = {\n\thoverNodeFill: \"#FADA63\",\n\tclickedNode: \"#42C6FF\",\n\tnodeLabelFill: \"rgba(0, 0, 0, 0.8)\",\n\tnodeLabelTxt: \"#ffffff\",\n\tlinkDirParticle: \"#919191\",\n\thighlightLink: \"#F1F1F1\",\n};","import React, {\n\tuseEffect,\n\tuseState,\n\tuseMemo,\n\tuseCallback,\n\tuseRef,\n} from \"react\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { nodeFillColor, riskOutline } from \"./graphVizualization/nodeColoring\";\nimport {\n\tcalcLinkParticleWidth,\n\tcalcLinkColor,\n\tcalcLinkDirectionalArrowRelPos,\n} from \"./graphVizualization/linkCalcs\";\nimport { nodeSize } from \"./graphVizualization/nodeCalcs\";\nimport { getLinkLabel } from \"./graphLayout/labels\";\nimport { updateGraph } from \"./graphUpdates/updateGraph\";\nimport { Link, VizNode, VizGraph } from \"../../types/CustomTypes\";\nimport {\n\tGraphState,\n\tGraphDisplayState,\n\tGraphDisplayProps,\n} from \"../../types/GraphDisplayTypes\";\n\nimport { colors } from \"./graphVizualization/graphColors\";\n\ntype ClickedNodeState = VizNode | null;\n\nconst defaultGraphDisplayState = (\n\tlensName: string | null\n): GraphDisplayState => {\n\treturn {\n\t\tgraphData: { nodes: [], links: [], index: {} },\n\t\tcurLensName: lensName,\n\t};\n};\n\nconst defaultClickedState = (): ClickedNodeState => {\n\treturn null;\n};\n\nconst GraphDisplay = ({ lensName, setCurNode }: GraphDisplayProps) => {\n\tconst fgRef: any = useRef(); // fix graph to canvas\n\tconst [state, setState] = useState(defaultGraphDisplayState(lensName));\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(async () => {\n\t\t\tif (lensName) {\n\t\t\t\tawait updateGraph(lensName, state as GraphState, setState); // state is safe cast, check that lens name is not null\n\t\t\t\tconsole.log(\"Updating graph for lens: \", lensName);\n\t\t\t}\n\t\t}, 1000);\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t}, [lensName, state, setState]);\n\n\tconst data = useMemo(() => {\n\t\tconst graphData = state.graphData;\n\t\treturn graphData;\n\t}, [state]);\n\n\tconst [clickedNode, setClickedNode] = useState(defaultClickedState());\n\tconst [highlightNodes, setHighlightNodes] = useState(new Set());\n\tconst [highlightLinks, setHighlightLinks] = useState(new Set());\n\tconst [hoverNode, setHoverNode] = useState(null);\n\n\tconst updateHighlight = () => {\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\t};\n\n\tconst nodeClick = useCallback(\n\t\t(_node, ctx) => {\n\t\t\tconst node = _node as any;\n\t\t\tconst links = node.links;\n\t\t\tconst neighbors = node.neighbors;\n\n\t\t\t// remove neighbors and links for node detail table iteration (react can only iterate through arrays)\n\t\t\tdelete node.links;\n\t\t\tdelete node.neighbors;\n\n\t\t\tsetCurNode(node);\n\t\t\tsetClickedNode(node || null);\n\n\t\t\t// re-add neighbors for highlighting links\n\t\t\tnode.links = links;\n\t\t\tnode.neighbors = neighbors;\n\t\t},\n\t\t[setCurNode, setClickedNode]\n\t);\n\n\tconst nodeHover = useCallback(\n\t\t(node, ctx) => {\n\t\t\thighlightNodes.clear();\n\t\t\thighlightLinks.clear();\n\n\t\t\tif (node) {\n\t\t\t\tconst _node = node as any;\n\t\t\t\thighlightNodes.add(_node);\n\n\t\t\t\tif (!_node.neighbors) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t_node.neighbors.forEach((neighbor: VizNode) => {\n\t\t\t\t\thighlightNodes.add(neighbor);\n\t\t\t\t});\n\t\t\t\t_node.links.forEach((link: Link) => {\n\t\t\t\t\thighlightLinks.add(link);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetHoverNode((node as any) || null);\n\t\t\tupdateHighlight();\n\t\t},\n\t\t[setHoverNode, updateHighlight]\n\t);\n\n\tconst nodeStyling = useCallback(\n\t\t(node, ctx) => {\n\t\t\tnode.fx = node.x;\n\t\t\tnode.fy = node.y;\n\t\t\tctx.save();\n\n\t\t\tconst NODE_R = nodeSize(node, data);\n\n\t\t\t// Node Border Styling\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);\n\t\t\tctx.fillStyle =\n\t\t\t\tnode === hoverNode\n\t\t\t\t\t? colors.hoverNodeFill\n\t\t\t\t\t: riskOutline(node.risk_score);\n\t\t\tctx.fill();\n\t\t\tctx.save();\n\n\t\t\t// Node Fill Styling\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(node.x, node.y, NODE_R * 1.2, 0, 2 * Math.PI, false);\n\t\t\tctx.fillStyle =\n\t\t\t\tnode === clickedNode\n\t\t\t\t\t? colors.clickedNode\n\t\t\t\t\t: nodeFillColor(node.dgraph_type[0]);\n\t\t\tctx.fill();\n\t\t\tctx.save();\n\n\t\t\t// Node Label Styling\n\t\t\tconst label = node.nodeLabel;\n\n\t\t\tconst fontSize = Math.min(98, NODE_R / ctx.measureText(label).width);\n\t\t\tctx.font = `${fontSize + 5}px Roboto`;\n\n\t\t\tconst textWidth = ctx.measureText(label).width;\n\t\t\tconst labelBkgdDimensions = [textWidth, fontSize].map(\n\t\t\t\t(n) => n + fontSize * 0.2\n\t\t\t);\n\n\t\t\tctx.fillStyle = colors.nodeLabelFill;\n\t\t\tctx.fillRect(\n\t\t\t\tnode.x - labelBkgdDimensions[0] / 2, // x coordinate\n\t\t\t\tnode.y - labelBkgdDimensions[1] - 2.75, // y coordinate\n\t\t\t\tlabelBkgdDimensions[0] + 1.25, // rectangle width\n\t\t\t\tlabelBkgdDimensions[1] + 5.5 // rectangle height\n\t\t\t);\n\t\t\tctx.textAlign = \"center\";\n\t\t\tctx.textBaseline = \"middle\";\n\t\t\tctx.fillStyle = colors.nodeLabelTxt;\n\t\t\tctx.fillText(label, node.x, node.y);\n\t\t\tctx.save();\n\t\t},\n\t\t[data, clickedNode, hoverNode]\n\t);\n\n\tconst linkStyling = (link: any, ctx: any) => {\n\t\tconst MAX_FONT_SIZE = 8;\n\t\tconst LABEL_NODE_MARGIN = 12;\n\t\tconst start = link.source;\n\t\tconst end = link.target;\n\n\t\tlink.color = calcLinkColor(link, data);\n\n\t\t// Ignore unbounded links\n\t\tif (typeof start !== \"object\" || typeof end !== \"object\") return;\n\n\t\t// Edge label positioning calculations\n\t\tconst textPos = {\n\t\t\tx: start.x + (end.x - start.x) / 2,\n\t\t\ty: start.y + (end.y - start.y) / 2,\n\t\t};\n\n\t\tconst relLink = { x: end.x - start.x, y: end.y - start.y };\n\t\tconst maxTextLength =\n\t\t\tMath.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) -\n\t\t\tLABEL_NODE_MARGIN * 8;\n\n\t\tlet textAngle = Math.atan2(relLink.y, relLink.x);\n\n\t\t// Maintain label vertical orientation for legibility\n\t\tif (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n\t\tif (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n\t\tconst label = getLinkLabel(link.name);\n\n\t\t// Estimate fontSize to fit in link length\n\t\tctx.font = \"50px Roboto\";\n\t\tconst fontSize = Math.min(\n\t\t\tMAX_FONT_SIZE,\n\t\t\tmaxTextLength / ctx.measureText(label).width\n\t\t);\n\t\tctx.font = `${fontSize + 5}px Roboto`;\n\n\t\t// Draw text label\n\t\tctx.save();\n\t\tctx.translate(textPos.x, textPos.y);\n\t\tctx.rotate(textAngle);\n\t\tctx.textAlign = \"center\";\n\t\tctx.textBaseline = \"middle\";\n\t\tctx.fillText(label, 0.75, 3); //Content, left/right, top/bottom\n\t\tctx.restore();\n\t};\n\n\treturn (\n\t\t<ForceGraph2D\n\t\t\tgraphData={data}\n\t\t\tref={fgRef} // fix graph to canvas\n\t\t\tnodeLabel={\"nodeLabel\"} // tooltip on hover, actual label is in nodeCanvasObject\n\t\t\tnodeCanvasObject={nodeStyling}\n\t\t\tnodeCanvasObjectMode={() => \"after\"}\n\t\t\tonNodeHover={nodeHover}\n\t\t\tonNodeClick={nodeClick}\n\t\t\tonNodeDragEnd={(node) => {\n\t\t\t\tnode.fx = node.x;\n\t\t\t\tnode.fy = node.y;\n\t\t\t}}\n\t\t\tlinkColor={(link) =>\n\t\t\t\thighlightLinks.has(link)\n\t\t\t\t\t? colors.highlightLink\n\t\t\t\t\t: calcLinkColor(link as Link, data as VizGraph)\n\t\t\t}\n\t\t\tlinkWidth={(link) => (highlightLinks.has(link) ? 5 : 4)}\n\t\t\tlinkDirectionalArrowLength={10}\n\t\t\tlinkDirectionalArrowRelPos={(link => {\n\t\t\t\tconst _link = link as any\n\t\t\t\treturn calcLinkDirectionalArrowRelPos(_link, data);\n\t\t\t})}\n\t\t\tlinkDirectionalParticleSpeed={0.005}\n\t\t\tlinkDirectionalParticleColor={(link) => colors.linkDirParticle}\n\t\t\tlinkDirectionalParticles={1}\n\t\t\tlinkDirectionalParticleWidth={(link) =>\n\t\t\t\thighlightLinks.has(link)\n\t\t\t\t\t? 4\n\t\t\t\t\t: calcLinkParticleWidth(link as Link, data as VizGraph) + 1\n\t\t\t}\n\t\t\tlinkCanvasObjectMode={() => \"after\"}\n\t\t\tlinkCanvasObject={linkStyling}\n\t\t\tonLinkHover={(link) => {\n\t\t\t\thighlightNodes.clear();\n\t\t\t\thighlightLinks.clear();\n\n\t\t\t\tif (link) {\n\t\t\t\t\thighlightLinks.add(link);\n\t\t\t\t\thighlightNodes.add(link.source);\n\t\t\t\t\thighlightNodes.add(link.target);\n\t\t\t\t}\n\t\t\t}}\n\t\t\twarmupTicks={100}\n\t\t\tcooldownTicks={100}\n\t\t/>\n\t);\n};\n\nexport default GraphDisplay;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const nodeTableStyles = makeStyles({\n    root: {\n        fontSize: \".75em\"\n    },\n    nodeTable: {\n        minWidth: 450,\n    }, \n    tableHeader: {\n        fontSize: \".85rem\", \n        backgroundColor: \"#595959\"\n    }, \n    nodeTableData: {\n        fontSize: \".75rem\"\n    },\n});\n","import React from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { mapEdgeProps } from \"../../graphDisplay/graphLayout/graph_traverse\";\nimport { mapNodeProps } from \"../../graphDisplay/graphLayout/mapNodeProps\";\n\nimport { OtherNodeProperties, VizNode } from \"types/CustomTypes\";\n\nimport { nodeTableHeader } from \"./nodeTableHeader\";\nimport { nodeTableStyles } from \"./styles\";\n\nconst useStyles = nodeTableStyles;\n\ntype NodeTableProps = {\n\tnode: VizNode;\n};\n\nfunction NodeTable({ node }: NodeTableProps) {\n\tconst classes = useStyles();\n\tconst hidden = new Set([\n\t\t\"id\",\n\t\t\"dgraph.type\",\n\t\t\"dgraph_type\",\n\t\t\"__indexColor\",\n\t\t\"risks\",\n\t\t\"uid\",\n\t\t\"scope\",\n\t\t\"name\",\n\t\t\"nodeType\",\n\t\t\"nodeLabel\",\n\t\t\"x\",\n\t\t\"y\",\n\t\t\"index\",\n\t\t\"vy\",\n\t\t\"vx\",\n\t\t\"fx\",\n\t\t\"fy\",\n\t]);\n\n\n    mapEdgeProps(node as any, (edgeName: any, _neighbor: any) => {\n        hidden.add(edgeName)\n    });\n\n\tconst displayNode = {} as OtherNodeProperties;\n\n\tmapNodeProps(node, (propName: string) => {\n\t\tconst prop = node[propName];\n\n\t\tif (!hidden.has(propName)) {\n\t\t\tif (prop) {\n\t\t\t\tif (propName.includes(\"_time\")) {\n\t\t\t\t\tdisplayNode[propName] = new Date(prop).toLocaleString();\n\t\t\t\t} else {\n\t\t\t\t\tdisplayNode[propName] = prop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn (\n\t\t<TableContainer>\n\t\t\t<Table className={classes.nodeTable}>\n\t\t\t\t{nodeTableHeader(node, classes)}\n\t\t\t\t<TableBody>\n\t\t\t\t\t{Object.entries(displayNode).map((nodeProperty) => {\n\t\t\t\t\t\tconst [key, value] = nodeProperty;\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TableRow key={node.node_key + key}>\n\t\t\t\t\t\t\t\t<TableCell className={classes.nodeTableData} align=\"left\">\n\t\t\t\t\t\t\t\t\t<b>{key}</b>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell className={classes.nodeTableData} align=\"right\">\n\t\t\t\t\t\t\t\t\t{value as any}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableContainer>\n\t);\n}\n\nexport default NodeTable;\n","import React from \"react\";\n\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { VizNode } from \"types/CustomTypes\";\n\nexport function nodeTableHeader(node: VizNode, styles: any) {\n\tif (node) {\n\t\treturn (\n\t\t\t<TableHead>\n\t\t\t\t<TableRow>\n\t\t\t\t\t<TableCell align=\"left\" className={styles.tableHeader}>\n\t\t\t\t\t\t<b> Property </b>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell align=\"right\" className={styles.tableHeader}>\n\t\t\t\t\t\t<b> Value </b>\n\t\t\t\t\t</TableCell>\n\t\t\t\t</TableRow>\n\t\t\t</TableHead>\n\t\t);\n\t} else {\n\t\treturn <></>;\n\t}\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root:{\n        fontSize: \"1rem\",\n    },\n    backdrop: {\n        color: \"#fff\",\n        backgroundColor: \"transparent\",\n        width: \"80%\",\n    }, \n    button: {\n        width: \".05%\",\n        height: \"50%\", \n        color: \"white\",\n        margin: \".5rem\",\n        backgroundColor:\"#424242\",\n    },\n    title: {\n        margin: \"1rem\",\n        fontSize: \"1.1rem\",\n        color: \"#42C6FF\",\n    },\n    expand:{\n        color: \"#42C6FF\",\n        margin: \"0px\",\n        width: \"2rem\",\n        height: \"2rem\",\n    },\n    header:{\n        display: \"flex\"\n    }, \n    table: {\n        minWidth: 450, \n    },\n    lensName: {\n        fontSize: \".75rem\",\n    },\n    pagination: {\n        margin: \".5rem\",\n        backgroundColor: \"#595959\",\n    },\n    head: {\n        color: \"white\",\n        fontSize: \".75rem\",\n    },\n\n});","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { useStyles } from '../styles';\n\nimport { SelectLensProps } from \"types/LensAndNodeTableTypes\"\n\nexport function SelectLens(props: SelectLensProps) {\n    const classes = useStyles();\n    return (\n        <TableRow key={props.uid}>\n            <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                <Button \n                    className = {classes.lensName}\n                    onClick={ () => { props.setLens(props.lens) }}\n                >\n                    {props.lens_type + \" :\\t\\t\" + props.lens}\n                </Button>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" align = \"right\">\n                {props.score} \n            </TableCell>    \n        </TableRow>\n    )\n}","import React from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { ClassNameMap } from '@material-ui/styles/withStyles';\nimport { SelectLens } from './selectLens';\nimport { Lens } from \"types/CustomTypes\";\nimport { PaginationState } from \"types/CustomTypes\";\n\nexport const lensTable = (\n    state: PaginationState, \n    page: number, \n    rowsPerPage: number, \n    handleChangePage: (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) => void, \n    handleChangeRowsPerPage: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void, \n    setLens: (lens: string) => void, \n    classes: ClassNameMap<string>\n) => {\n    return (\n        <TableContainer>\n            <TablePagination\n                className = {classes.pagination}\n                aria-label = \"pagination\"\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={state.lenses.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            {\n                state.lenses \n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(\n                    (lens: Lens) => {\n                        return(\n                            <Table className={classes.table} aria-label=\"lens table\" key={Number(lens.uid)}>\n                                <TableHead className = {classes.head}>\n                                    <TableRow>\n                                        <TableCell align=\"left\">\n                                            <b> Lens Name </b>\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <b> Risk </b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    <SelectLens \n                                        key={Number(lens.uid)}\n                                        uid={lens.uid}\n                                        lens={lens.lens_name}\n                                        lens_type={lens.lens_type}\n                                        score={lens.score}\n                                        setLens={setLens}\n                                    />\n                                </TableBody>\n                            </Table>\n                        )\n                    }\n                )\n            }\n        </TableContainer>\n    )\n}","import DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const getLenses = async (first: number, offset: number) => {\n    const gqlQuery = `\n        {\n            lenses(first: ${first}, offset: ${offset}) {\n                uid,\n                node_key,\n                lens_name,\n                score, \n                lens_type,\n            }\n        }\n    `;\n\n    const graphQLQuery = JSON.stringify({ query: gqlQuery })\n    \n    const response = \n        await apiFetchWithBody(`${DEV_API_EDGES.graphQL}/graphql`, \"POST\", graphQLQuery)\n            .then(res => res)\n            .then(res => {\n                if (res.errors) {\n                    console.error(\"Unable to retrieve lenses \", res.errors);\n                    res.data = {lenses: []};\n                }\n                return res\n            })\n            .then((res) => res.data);\n\n    const lensQueryData = await response;\n    \n    // console.log(\"Retrieved lenses: \", lensQueryData);\n    \n    return lensQueryData;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowDownOutlinedIcon from '@material-ui/icons/KeyboardArrowDownOutlined';\nimport KeyboardArrowUpOutlinedIcon from '@material-ui/icons/KeyboardArrowUpOutlined';\n\nimport Divider from \"@material-ui/core/Divider\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport { lensTable } from \"./lensTable\";\nimport { getLenses } from \"services/graphQLRequests/getLenses\";\n\nimport { ToggleLensTableProps, ToggleLensTableState } from \"types/CustomTypes\";\n\nimport { useStyles } from \"../styles\";\n\nconst defaultToggleLensTableState = (): ToggleLensTableState => {\n\treturn {\n\t\ttoggled: true,\n\t\tlenses: [],\n\t\tfirst: 100, // first is the page size\n\t\toffset: 0, // by default, start from page 0\n\t};\n};\n\nexport function ToggleLensTable({ setLens }: ToggleLensTableProps) {\n\tconst classes = useStyles();\n\n\tconst [lensRetrievedState, setLensRetrievedState] = useState(null);\n\tconst [toggleTableState, setToggleTableState] = useState(\n\t\tdefaultToggleLensTableState()\n\t);\n\tconst [pageState, setPageState] = useState(0);\n\tconst [rowsPerPageState, setRowsPerPageState] = useState(10);\n\n\tconst handleChangePage = (\n\t\tevent: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n\t\tpage: number\n\t) => {\n\t\tsetPageState(page);\n\t};\n\n\tconst handleChangeRowsPerPage = (\n\t\tevent: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n\t) => {\n\t\tsetRowsPerPageState(parseInt(event.target.value, 10));\n\t\tsetPageState(0);\n\t};\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tgetLenses(toggleTableState.first, toggleTableState.offset).then(\n\t\t\t\t(response) => {\n\t\t\t\t\tif (response.lenses && response.lenses !== toggleTableState.lenses) {\n\t\t\t\t\t\tconst lenses = toggleTableState.lenses.concat(response.lenses);\n\t\t\t\t\t\tsetLensRetrievedState(lenses as any);\n\t\t\t\t\t\tsetToggleTableState({\n\t\t\t\t\t\t\t...toggleTableState,\n\t\t\t\t\t\t\toffset: toggleTableState.offset + response.lenses.length || 0,\n\t\t\t\t\t\t\tlenses,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}, 1000);\n\t\treturn () => clearInterval(interval);\n\t});\n\n\treturn (\n\t\n\t\t<>\n\t\t\t<div className={classes.header}>\n\t\t\t\t<b className={classes.title}> Lenses </b>\n\t\t\t\t<Button\n\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetToggleTableState({\n\t\t\t\t\t\t\t...toggleTableState,\n\t\t\t\t\t\t\ttoggled: !toggleTableState.toggled,\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t\n\t\t\t\t\t{toggleTableState.toggled ?  <KeyboardArrowUpOutlinedIcon className={classes.expand}/> : <KeyboardArrowDownOutlinedIcon className={classes.expand}/> }\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<div className=\"lensToggle\">\n\t\t\t\t{lensRetrievedState ? (\n\t\t\t\t\ttoggleTableState.toggled &&\n\t\t\t\t\tlensTable(\n\t\t\t\t\t\ttoggleTableState,\n\t\t\t\t\t\tpageState,\n\t\t\t\t\t\trowsPerPageState,\n\t\t\t\t\t\thandleChangePage,\n\t\t\t\t\t\thandleChangeRowsPerPage,\n\t\t\t\t\t\tsetLens,\n\t\t\t\t\t\tclasses\n\t\t\t\t\t)\n\t\t\t\t) : (\n\t\t\t\t\t<Backdrop className={classes.backdrop} open>\n\t\t\t\t\t\t<CircularProgress color=\"inherit\" />\n\t\t\t\t\t</Backdrop>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<Divider />\n\t\t</>\n\t);\n}\n","import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\nimport { ToggleNodeTableProps } from \"types/LensAndNodeTableTypes\";\n\nimport { NodeDetails } from \"../LensAndNodeTableContainer\";\n\nimport { useStyles } from \"../styles\";\n\nexport function ToggleNodeDetailTable({ curNode }: ToggleNodeTableProps) {\n\tconst [toggled, setToggle] = useState(true);\n\tconst classes = useStyles();\n\treturn (\n\t\t<div>\n\t\t\t{curNode && (\n\t\t\t\t<div className={classes.header}>\n\t\t\t\t\t<b className={classes.title}> Node Details</b>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetToggle((toggled) => !toggled);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{toggled === true ? (\n\t\t\t\t\t\t\t<KeyboardArrowUpOutlinedIcon className={classes.expand} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<KeyboardArrowDownOutlinedIcon className={classes.expand} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className=\"nodeToggle\">\n\t\t\t\t{toggled && curNode && <div>{<NodeDetails node={curNode} />}</div>}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport NodeTable from '../nodeTable/NodeTable';\nimport { NodeDetailsProps, EngagementViewProps } from \"types/LensAndNodeTableTypes\";\n\nimport {ToggleLensTable} from \"./utils/toggleLensTable\";\nimport {ToggleNodeDetailTable} from './utils/toggleNodeDetailTable';\n\nexport const NodeDetails = ({node}: NodeDetailsProps) => {\n    return ( \n        <> <NodeTable node={node} /> </> \n    )\n}\n\nexport default function LensAndNodeTableContainer({setLens, curNode}: EngagementViewProps) {\n    return (\n        <>\n            <ToggleLensTable setLens={setLens}/>\n            <ToggleNodeDetailTable curNode={curNode}/>\n        </>\n    );\n}","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const graplHeaderStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles({\n            root: {\n                display: \"flex\",\n            },\n            header: {\n                justifyContent: \"space-between\",\n            }, \n            link:{\n                color:\"#42C6FF\", \n                textDecoration: \"none\"\n            }\n        }\n    )\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Home from '@material-ui/icons/Home';\n\nimport {graplHeaderStyles} from './styles';\nimport {GraplHeaderProps} from 'types/GraplHeaderTypes'; \n\nconst useStyles = graplHeaderStyles; \n\nconst GraplHeader = (\n        {displayBtn}: GraplHeaderProps) => {\n            const classes = useStyles();\n            \n            return(\n                <>\n                    <AppBar position=\"static\">\n                        <Toolbar className = {classes.header}>\n                            <Typography variant=\"h6\" >\n                                GRAPL\n                            </Typography>\n                            {\n                                displayBtn &&\n                                    <Link to = \"/\" className = {classes.link}><Home /></Link>\n                            }\n                        </Toolbar>\n                    </AppBar>\n                </>\n    )    \n}\n\nexport default GraplHeader; ","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { notificationsStyles } from './styles';\n\nconst useStyles = notificationsStyles; \n\nexport default function LoginNotification() {\n    const classes = useStyles();\n\n    return (\n        <Card variant=\"outlined\" className={classes.root}>\n            <CardActionArea>\n                <CardContent>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        You are not logged in and changes cannot be saved.\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n\n            <CardActions>\n                <Button \n                    className = {classes.button}\n                    size = \"small\" \n                    onClick = { \n                        () => {\n                            window.history.replaceState('#/', \"\", \"#/login\");\n                            window.location.reload();\n                        } \n                    }\n                > Login </Button>\n            </CardActions>\n        </Card>\n    );\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const notificationsStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        postion: \"fixed\",\n    },\n    button: {\n        border: \"2px solid white\",\n        backgroundColor: \"#42c6ff\",\n    }\n});","import { apiFetch } from \"../fetch\";\r\nimport DEV_API_EDGES from \"../constants\";\r\n\r\nexport const checkLogin = async (): Promise<boolean | null> => {\r\n    try {\r\n        const loginData = await apiFetch(`${DEV_API_EDGES.auth}/checkLogin`, \"post\");\r\n        return loginData['success'] === 'True';\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n};\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst drawerWidth = 500;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        },\n        button: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.20rem\",\n        }, \n        loggedIn: {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n        },\n        appBar: {\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen\n            })\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen\n            })\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            color: \"#42C6FF\"\n        },\n        hide: {\n            display: \"none\"\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        drawerHeader: {\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: theme.spacing(0, 1),\n            // necessary for content to be below app bar\n            ...theme.mixins.toolbar,\n            justifyContent: \"flex-end\"\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen\n            }),\n            marginLeft: -drawerWidth\n        },\n        contentShift: {\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen\n            }),\n            marginLeft: 0,\n        },\n        lensName:{\n            color:\"#EAFDFF\",\n            fontSize: \"1.5rem\", \n        },\n        headerTitle:{\n            fontSize: \"35px\",\n        }, \n        headerContainer: {\n            width: \"100vw\",\n            display: \"flex\",  \n            justifyContent: \"space-between\",\n        },\n        close:{\n            color:\"#42C6FF\",\n        },\n        link: {\n            color: \"#42C6FF\", \n            textDecoration: \"none\"\n        }\n    })\n);","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport Home from \"@material-ui/icons/Home\";\n\nimport { VizNode } from \"types/CustomTypes\";\nimport GraphDisplay from \"../graphDisplay/GraphDisplay\";\nimport LensAndNodeTableContainer from \"./sidebar/LensAndNodeTableContainer\";\nimport { LoginNotification } from \"../reusableComponents\";\nimport { checkLogin } from \"../../services/login/checkLoginService\";\nimport { useStyles } from \"../graphDisplay/GraphDisplayStyles\";\n\ntype EngagementViewProps = {\n\tsetLens: (lens: string) => void;\n\tcurLens: string;\n\tcurNode: VizNode | null;\n};\n\nconst defaultEngagementState = (): EngagementUxState => {\n\treturn { curLens: \"\", curNode: null, loggedIn: true, renderedOnce: false };\n};\n\nexport default function EngagementView({\n\tsetLens,\n\tcurLens,\n\tcurNode,\n}: EngagementViewProps) {\n\tconst classes = useStyles();\n\n\tconst [open, setOpen] = React.useState(true);\n\n\tconst handleDrawerOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleDrawerClose = () => {\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<AppBar\n\t\t\t\tposition=\"fixed\"\n\t\t\t\tclassName={clsx(classes.appBar, { [classes.appBarShift]: open })}\n\t\t\t>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\t\tonClick={handleDrawerOpen}\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tclassName={clsx(classes.menuButton, open && classes.hide)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* // Menu Icon  */}\n\t\t\t\t\t\t&#9776;\n\t\t\t\t\t</IconButton>\n\n\t\t\t\t\t<div className={classes.headerContainer}>\n\t\t\t\t\t\t<Typography variant=\"h5\" noWrap>\n\t\t\t\t\t\t\t<b className={classes.headerTitle}> GRAPL </b>\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Link to=\"/\" className={classes.link}>\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\n\t\t\t<Drawer\n\t\t\t\tclassName={classes.drawer}\n\t\t\t\tvariant=\"persistent\"\n\t\t\t\tanchor=\"left\"\n\t\t\t\topen={open}\n\t\t\t\tclasses={{\n\t\t\t\t\tpaper: classes.drawerPaper,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className={classes.drawerHeader}>\n\t\t\t\t\t<Button onClick={handleDrawerClose}>\n\t\t\t\t\t\t<KeyboardArrowLeftIcon className={classes.close} />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\n\t\t\t\t<Divider />\n\n\t\t\t\t<LensAndNodeTableContainer setLens={setLens} curNode={curNode} />\n\t\t\t</Drawer>\n\n\t\t\t<main className={clsx(classes.content, { [classes.contentShift]: open })}>\n\t\t\t\t<div className={classes.drawerHeader} />\n\n\t\t\t\t{/* selected lens name */}\n\t\t\t\t<h3 className={classes.lensName}> {curLens || \"\"} </h3>\n\n\t\t\t\t<Typography paragraph></Typography>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\ntype EngagementUxState = {\n\tcurLens: string;\n\tcurNode: VizNode | null;\n\tloggedIn: boolean;\n\trenderedOnce: boolean;\n};\n\nexport const EngagementUx = () => {\n\tconst classes = useStyles();\n\n\tconst [engagementState, setEngagementState] = React.useState(\n\t\tdefaultEngagementState()\n\t);\n\n\tuseEffect(() => {\n\t\tif (engagementState.renderedOnce) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst interval = setInterval(async () => {\n\t\t\tawait checkLogin().then((loggedIn) => {\n\t\t\t\tif (!loggedIn) {\n\t\t\t\t\tconsole.warn(\"Logged out\");\n\t\t\t\t}\n\t\t\t\tsetEngagementState({\n\t\t\t\t\t...engagementState,\n\t\t\t\t\tloggedIn: loggedIn || false,\n\t\t\t\t\trenderedOnce: true,\n\t\t\t\t});\n\t\t\t});\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t}, [engagementState, setEngagementState]);\n\n\tconst loggedIn = engagementState.loggedIn;\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementView\n\t\t\t\tsetLens={(lens: string) =>\n\t\t\t\t\tsetEngagementState({\n\t\t\t\t\t\t...engagementState,\n\t\t\t\t\t\tcurLens: lens,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcurLens={engagementState.curLens}\n\t\t\t\tcurNode={engagementState.curNode}\n\t\t\t/>\n\n\t\t\t<>\n\t\t\t\t<div className={classes.loggedIn}>\n\t\t\t\t\t{!loggedIn ? <LoginNotification /> : \"\"}\n\t\t\t\t</div>\n\n\t\t\t\t<GraphDisplay\n\t\t\t\t\tlensName={engagementState.curLens}\n\t\t\t\t\tsetCurNode={(node) => {\n\t\t\t\t\t\tsetEngagementState({\n\t\t\t\t\t\t\t...engagementState,\n\t\t\t\t\t\t\tcurNode: node,\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</>\n\t\t</>\n\t);\n};\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport const dasboardStyles = makeStyles( (theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n        },\n        button: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.25rem\",\n        }, \n        welcome: {\n            width:\"70%\",\n            textAlign:\"center\",\n            backgroundColor: \"#373740\",\n            height: \"100vh\",\n            color: \"white\",\n        },\n        loggedIn: {\n            display:\"flex\", \n            justifyContent: \"flex-end\",\n            zIndex: 100, \n        }, \n        nav: {\n            margin: \"2rem\",\n            width: \"30%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n        dashboard: {\n            display: \"flex\",\n            flexDirection: \"row\",\n        }, \n        link: {\n            color: \"white\",\n            textDecoration: \"none\",\n            padding: \".75rem\",\n            backgroundColor: \"#42C6FF\",\n            margin: \"1rem\",\n            textAlign: \"center\",\n            borderRadius: \".35rem\",\n            textTransform: \"uppercase\",\n            fontWeight: \"bolder\"\n        },\n        \n    })\n);","import { apiFetch } from \"../fetch\";\r\nimport DEV_API_EDGES from \"../constants\";\r\n\r\nexport const getNotebookUrl = async (): Promise<string> => {\r\n    return apiFetch(`${DEV_API_EDGES.auth}/getNotebook`, \"post\")\r\n        .then(\r\n            (result) => result.success.notebook_url\r\n        );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useAsync } from \"react-async-hook\";\nimport { checkLogin } from \"services/login/checkLoginService\";\nimport { Link } from \"react-router-dom\";\nimport { dasboardStyles } from \"./styles\";\nimport  GraplHeader  from \"../reusableComponents/graplHeader/GraplHeader\";\nimport  LoginNotification from \"../reusableComponents/notifications/Notifications\";\nimport { getNotebookUrl } from \"services/sagemakerNotebook/notebookService\";\n\nconst useStyles = dasboardStyles;\n\nexport default function Dashboard() {\n  const asyncSagemakerUrl = useAsync(getNotebookUrl, []);\n  const classes = useStyles();\n\n  const [state, setState] = useState({\n    loggedIn: true,\n    renderedOnce: false,\n  });\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged out\");\n        }\n        setState({\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  console.log(\"state - loggedin\", state.loggedIn);\n\n  const loggedIn = state.loggedIn;\n\n  const openSagemakerUrl = () => {\n    if (asyncSagemakerUrl.loading || !asyncSagemakerUrl.result) {\n      alert('sagemaker url not ready');\n      return;\n    }\n    \n    window.open(asyncSagemakerUrl.result);\n  };\n\n  return (\n    <>\n      <GraplHeader displayBtn={false} />\n\n      <div className={classes.dashboard}>\n        <section className={classes.nav}>\n          <Link to=\"/engagements\" className={classes.link}> Engagements </Link>\n          <Link to=\"/plugins\" className={classes.link}> Upload Plugin </Link>\n          <Button onClick={openSagemakerUrl} className={classes.link}> Open Engagement Notebook </Button>\n        </section>\n\n        <section className={classes.welcome}>\n          <div className={classes.loggedIn}>\n            {!loggedIn ? <LoginNotification /> : \"\"}\n          </div>\n\n          <h1> Welcome! </h1>\n        </section>\n      </div>\n    </>\n  );\n}\n","import { PluginPayload } from \"../../types/uploadPluginTypes\";\nimport DEV_API_EDGES from \"../constants\";\nimport {apiFetchWithBody} from '../fetch';\n\nexport const uploadFilesToDgraph = async (payload: PluginPayload ): Promise<boolean> => {\n\n    const dgraphPayload = JSON.stringify(payload);\n\n    const dgraphFileUpload = await apiFetchWithBody(`${DEV_API_EDGES.modelPluginEdge}/deploy`, \"post\", dgraphPayload);\n\n    const pluginFiles = await dgraphFileUpload;\n\n    return pluginFiles.success.Success;\n};","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles({\n            root: {\n                display: \"flex\",\n            },\n            formContainer: {\n                color: \"white\", \n                margin: \"1rem\",\n            },\n            btn: {\n                backgroundColor: \"#42C6FF\",\n                margin: \"0.25rem\",\n                padding: \"0.25rem\",\n                borderRadius: \"6px\",\n            },\n            loggedIn: {\n                display:\"flex\", \n                justifyContent: \"flex-end\",\n            }, \n            inputFiles: {\n                border: \"none\",\n                width: \"35vw\",\n            },\n            upload: {\n                display: \"flex\",\n            },\n            succMsg: {\n                color: \"#03dac6\",\n            }, \n            errMsg: {\n                color: \"#CF6679\",\n            }, \n            pluginTable: {\n                backgroundColor: \"#292929\",\n                margin: \"1em\",\n                width: \"50%\",\n                height: \"100%\",\n                boxShadow: \" 1.5px 1.5px #000000\",\n            }, \n            uploadFormContainer: {\n                backgroundColor: \"#292929\",\n                margin: \"1em\", \n                width: \"50%\",\n                height: \"100%\",\n                boxShadow: \"1.5px 1.5px #000000\",\n                display: \"flex\", \n            }, \n            uploadForm: {\n                fontFamily: \"Arial\",\n                display: \"flex\",\n                fontSize: \".75rem\",\n            }\n        }\n    )\n);","import React, { SyntheticEvent } from 'react';\nimport { Field, Form, Formik } from \"formik\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nimport { Event, UploadFormState, DirectoryUpload, MessageProps} from \"../../../types/uploadPluginTypes\"\nimport { uploadFilesToDgraph } from \"../../../services/uploadPlugin/uploadFilesToDgraph\";\nimport { useStyles } from \"../uploadPluginStyles\";\n\nconst readFile = async (file: Blob): Promise <string> => {\n    return await new Promise(\n        (resolve, reject) => {\n            const reader = new FileReader();\n            reader.addEventListener('load', (event: ProgressEvent<FileReader>) => {\n                if (event.target === null) {\n                    console.warn(\"onload event was null\");\n                    return;\n                } else {\n                    const fileRes = event.target.result;\n                    if (fileRes === null) {\n                        console.warn(\"Read pluginfile was null\");\n                        reject(null)\n                        return;\n                    } else {\n                        if (typeof(fileRes) === 'string') {\n                            resolve(fileRes);\n                        } else {\n                            resolve(new TextDecoder().decode(fileRes));\n                        }\n                    }\n                }\n            });\n            return reader.readAsText(file);\n        }\n    )\n}\n\nconst defaultUploadFormState = (): UploadFormState => {\n    return {curFiles: null, success: null}\n}\n\nconst Message = ({status}: MessageProps) => {\n    const classes = useStyles();\n    if (status === true) {\n        return(\n            <div className = {classes.succMsg}>Plugins Successfully Deployed!</div>\n        )\n    } else if (status === false){\n        return(\n            <div className = {classes.errMsg}>Upload Unsuccessful</div>\n        )\n    } else {\n        return (<div />)\n    }\n    \n}\n\nexport const UploadForm = () => {\n    const [state, setState] = React.useState(defaultUploadFormState());\n    const classes = useStyles();\n\n    return(\n        <div className = {classes.formContainer}>\n            <h4>UPLOAD DIRECTORY WITH PLUGINS:</h4>\n            <Formik\n                initialValues={{ \"filename\": \"\" }}\n                onSubmit={\n                    (event: Event) => { \n                        const fileMap = {} as any;\n                        const reads: Promise<void>[] = [];\n                        const {curFiles} = state;\n\n                        if (curFiles === null) {\n                            console.warn(\"Attempted to upload files without selecting any\");\n                            return\n                        }\n                        \n                        for(const f of curFiles){\n                            let fileRead = readFile(f).then((fileResult) => {\n                                // This any is because webkitRelativePath is not standard, and therefor\n                                // is not part of the File type\n                                const path = ((f as any).webkitRelativePath || (f as any).mozRelativePath);\n\n                                fileMap[path] = fileResult;\n                            });\n                            reads.push(fileRead);\n                        }\n                        let success = true;\n                        Promise.all(reads).then(() => {\n                            return uploadFilesToDgraph({plugins: fileMap});\n                        })\n                        .then((didSucceed) => {success = success && didSucceed;})\n                        .then(() => setState({...state, success}))\n                    }\n                }\n            >\n                <Form className = {classes.uploadForm}>\n                    {/* accept = property to restrict types, currently we accept ANY type */}\n                    <Field \n                        className = {classes.inputFiles}\n                        name=\"plugin\" \n                        directory=\"\" \n                        webkitdirectory=\"\"\n                        mozdirectory=\"\"\n                        type=\"file\" \n                        multiple placeholder=\"Plugin\" \n                        onChange={\n                            (event: SyntheticEvent<DirectoryUpload>) => {\n                                setState({\n                                    ...state,\n                                    curFiles: event.currentTarget.files\n                                })\n                            }\n                        }\n                    /> \n                    <Button className=\"submitBtn\"  type=\"submit\"><CloudUploadIcon className = {classes.btn}/></Button>\n                </Form>\n            </Formik>\n            <br />\n            <Message status = {state.success}/>\n        </div>\n    )\n}","import DEV_API_EDGES from \"../constants\";\nimport { apiFetch } from \"../fetch\";\n\nexport const getPluginList = async () => {\n\ttry {\n\t\tconst getPluginListReq = await apiFetch(\n\t\t\t`${DEV_API_EDGES.modelPluginEdge}/listModelPlugins`,\n\t\t\t\"POST\"\n\t\t);\n\t\tconsole.log(\"getPluginList\", getPluginListReq);\n\t\tlet pluginList: string[] = getPluginListReq.success.plugin_list;\n\n\t\treturn pluginList;\n\t} catch (e) {   \n\t\tconsole.warn(\"Error retrieving pluginList\", e);\n\t\treturn [];\n\t}\n};\n","import DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const deletePlugin = async ( pluginName: string ): Promise <boolean> => {\n    const body = JSON.stringify( {plugins_to_delete: [pluginName]} );\n    \n    try{ \n        const response = await apiFetchWithBody(`${DEV_API_EDGES.modelPluginEdge}/deleteModelPlugin`, \"post\", body);\n    \n        await response.success;\n        return true; \n    } catch (e){\n        console.warn(\"Error deleting plugin\", e);\n        return false; \n    }\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { PluginTableState } from \"../../../types/uploadPluginTypes\";\n\nimport { getPluginList } from \"../../../services/uploadPlugin/getPluginList\";\nimport { deletePlugin } from \"../../../services/uploadPlugin/deletePlugin\";\nimport { useStyles } from \"../uploadPluginStyles\";\n\nconst defaultPluginTableState = (): PluginTableState => {\n\treturn {\n\t\trows: [],\n\t\ttoggle: true,\n\t};\n};\n\nexport const PluginTable = () => {\n\tconst classes = useStyles();\n\tconst [state, setState] = React.useState(defaultPluginTableState());\n\tconst [page, setPage] = useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = useState(10);\n\n\tconst handleChangePage = (\n\t\tevent: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n\t\tnewPage: number\n\t) => {\n\t\tsetPage(newPage);\n\t};\n\tconst handleChangeRowsPerPage = (\n\t\tevent: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n\t) => {\n\t\tsetRowsPerPage(parseInt(event.target.value, 10));\n\t\tsetPage(0);\n\t};\n\n\tconst emptyRows =\n\t\trowsPerPage - Math.min(rowsPerPage, state.rows.length - page * rowsPerPage);\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tconst interval = setInterval(async () => {\n\t\t\t\tawait getPluginList().then((rows) => {\n\t\t\t\t\tsetState({\n\t\t\t\t\t\ttoggle: state.toggle,\n\t\t\t\t\t\trows,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t\treturn () => clearInterval(interval);\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Unable to retrieve plugin list\", e);\n\t\t}\n\t}, [state.toggle]);\n\n\treturn (\n\t\t<>\n\t\t\t<TableContainer>\n\t\t\t\t<Table>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow key={\"plugin\"}>\n\t\t\t\t\t\t\t<TableCell align=\"left\">PLUGINS</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody aria-label=\"PluginTable\">\n\t\t\t\t\t\t{state.rows\n\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t.map((pluginName: string) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow key={pluginName}>\n\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t\t\t\t{pluginName}\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeletePlugin(pluginName).then(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoggle: state.toggle && false,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Plugin Deleted\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<DeleteOutlinedIcon className={classes.btn} />\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t{emptyRows > 0 && (\n\t\t\t\t\t\t\t<TableRow style={{ height: 53 * emptyRows }}>\n\t\t\t\t\t\t\t\t<TableCell colSpan={6} />\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\n\t\t\t\t<TablePagination\n\t\t\t\t\taria-label=\"pagination\"\n\t\t\t\t\trowsPerPageOptions={[5, 10, 25]}\n\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\tcount={state.rows.length}\n\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\tpage={page}\n\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t/>\n\t\t\t</TableContainer>\n\t\t</>\n\t);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { GraplHeader } from \"../reusableComponents\";\n\nimport { UploadForm } from \"./utils/uploadPlugins\";\nimport { PluginTable } from \"./utils/pluginTable\";\nimport { checkLogin } from \"../../services/login/checkLoginService\";\nimport { LoginNotification } from \"../reusableComponents\";\n\nimport { useStyles } from \"./uploadPluginStyles\";\n\nconst UploadPlugin = () => {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    loggedIn: true,\n    renderedOnce: false,\n  });\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged Out\");\n        }\n        setState({\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  const loggedIn = state.loggedIn;\n\n  return (\n    <>\n      <GraplHeader displayBtn={true} />\n\n      <div className={classes.loggedIn}>\n        {!loggedIn ? <LoginNotification /> : \"\"}\n      </div>\n\n      <div className={classes.upload}>\n        <div className={classes.uploadFormContainer}>\n          <UploadForm />\n          <div id=\"message\" />\n        </div>\n        <div className={classes.pluginTable}>\n          <PluginTable />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadPlugin;\n","import Routes from \"./routes\";\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport \"../components/login/LogIn.css\";\nimport { LogIn } from \"../components/login/Login\";\nimport { EngagementUx } from \"../components/engagementView/EngagementView\";\nimport Dashboard from \"../components/dashboard/Dashboard\";\nimport UploadPlugin from \"../components/uploadPlugin/UploadPluginView\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nexport default function Routes() {\n  console.log(\"Grapl loaded\");\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/login\" component={LogIn} />\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/plugins\" component={UploadPlugin} />\n        <Route exact path=\"/engagements\" component={EngagementUx} />\n      </Switch>\n    </HashRouter>\n  );\n}\n","import React from \"react\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n  console.log(\"Welcome to Grapl\");\n  return (\n    <>\n      <Routes />\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#373740',\n        }\n    }\n})\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ThemeProvider theme={darkTheme}>\n                <App />, \n            </ThemeProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}