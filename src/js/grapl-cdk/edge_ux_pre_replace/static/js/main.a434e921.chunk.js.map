{"version":3,"sources":["components/login/styles.tsx","services/constants.ts","services/fetch.ts","services/login/loginService.tsx","components/login/utils/passwordHashing.tsx","components/login/Login.tsx","components/graphDisplay/utils/graph/graph_traverse.tsx","services/graphQL/utils_GraphQlEndpointRetrieveGraph/unpackPluginNodes.tsx","services/graphQL/graphQlEndpointRetrieveGraphReq.tsx","services/graphQL/utils_GraphQlEndpointRetrieveGraph/expandScopeQuery.tsx","components/graphDisplay/utils/calculations/node/nodeCalcs.tsx","components/graphDisplay/utils/calculations/link/linkCalcs.tsx","components/graphDisplay/utils/graphColoring/coloring.tsx","components/graphDisplay/utils/graph/mergeGraphs.tsx","components/graphDisplay/utils/graphQL/graphQLAdjacencyMatrix.tsx","components/graphDisplay/utils/graph/labels.tsx","components/graphDisplay/GraphDisplay.tsx","components/engagementView/nodeTable/styles.tsx","components/engagementView/nodeTable/NodeTable.tsx","components/engagementView/nodeTable/nodeTableHeader.tsx","components/engagementView/dynamicEngagementViewFeatures/styles.tsx","components/engagementView/dynamicEngagementViewFeatures/utils/selectLens.tsx","components/engagementView/dynamicEngagementViewFeatures/utils/lensPagedTable.tsx","services/graphQL/graphQlEndpointGetLensesReq.tsx","components/engagementView/dynamicEngagementViewFeatures/utils/toggleLensTable.tsx","components/engagementView/dynamicEngagementViewFeatures/utils/toggleNodeTable.tsx","components/engagementView/dynamicEngagementViewFeatures/DynamicEngagementViewFeatures.tsx","components/reusableComponents/graplHeader/styles.tsx","components/reusableComponents/graplHeader/GraplHeader.tsx","components/reusableComponents/notifications/Notifications.tsx","components/reusableComponents/notifications/styles.tsx","services/login/checkLoginService.ts","components/graphDisplay/GraphDisplayStyles.tsx","components/engagementView/EngagementView.tsx","components/dashboard/styles.tsx","services/sagemakerNotebook/notebookService.ts","components/dashboard/Dashboard.tsx","services/uploadPlugin/uploadFilesToDgraph.tsx","components/uploadPlugin/uploadPluginStyles.tsx","components/uploadPlugin/utils/uploadPlugins.tsx","services/uploadPlugin/getPluginList.tsx","services/uploadPlugin/deletePlugin.tsx","components/uploadPlugin/utils/pluginTable.tsx","components/uploadPlugin/UploadPluginView.tsx","routes/index.ts","routes/routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loginStyles","makeStyles","theme","createStyles","valErrorMsg","marginLeft","color","fontSize","DEV_API_EDGES","auth","window","location","hostname","graphQL","modelPluginEdge","apiFetch","urlSlug","a","method","fetch","credentials","headers","Headers","catch","e","console","warn","Error","response","json","apiFetchWithBody","body","loginService","username","password","loginBody","JSON","stringify","loginData","log","sha256","message","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join","sha256WithPepper","hashed","i","LogIn","_","classes","validationSchema","Yup","shape","userName","required","React","useState","loginFailed","state","setState","className","initialValues","onSubmit","values","history","replaceState","reload","errors","touched","name","type","placeholder","mapGraph","node","f","visited","Set","mapEdgeProps","edgeName","neighbor","_mapGraph","has","uid","add","mapEdges","prop","Object","prototype","hasOwnProperty","call","maybeNeighbor","isArray","undefined","builtins","unpackPluginNodes","nodes","predicates","edge_name","dgraph_type","pluginNode","keys","forEach","key","retrieveGraph","lens","lensName","expandScopeQueryData","lensScopeQuery","query","then","res","data","lens_scope","queryResponse","lensWithScopeData","debug","scope","calcNodeRiskPercentile","_nodeRisk","_allRisks","nodeRisk","risk","allRisks","n","sort","length","riskIndex","Math","floor","findNode","id","calcLinkRiskPercentile","link","Graph","linkRisk","srcNode","source","dstNode","target","error","srcRisk","dstRisk","round","calcLinkRisk","BKDRHash","str","hash","MAX_SAFE_INTEGER","parseInt","charCodeAt","calcNodeRgb","colorHash","nodeType","rgb","percentToColor","percentile","calcLinkColor","mergeNodes","x","y","merged","mapNodeProps","mergeGraphs","curGraph","update","links","outputGraph","updated","Map","set","newNode","get","label","newLink","newLinkSource","newLinkTarget","getNodeType","t","node_type","randomInt","min","max","random","graphQLAdjacencyMatrix","inputGraph","nodeMap","traverseNeighbors","callback","fromNode","toNode","push","traverseNodes","nodeLabel","_node","process_name","process_id","file_path","external_ip","lens_name","getNodeLabel","strippedNode","analyzer_names","risks","risk_score","analyzer_name","edge","_neighbor","vizNode","HSL2RGB","H","S","L","q","p","o","ColorHash","options","hsl","hueRanges","range","apply","LS","lightness","saturation","param","concat","this","hue","updateGraph","curLensName","mergeUpdate","graphData","GraphDisplay","setCurNode","intervalMap","defaultGraphDisplayState","forceRef","useRef","useEffect","current","d3Force","d3","abs","vx","vy","interval","setInterval","clearInterval","enableNodeDrag","linkDirectionalParticles","linkDirectionalParticleWidth","linkRiskPercentile","calcLinkParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleSpeed","onNodeClick","event","linkDirectionalArrowLength","linkWidth","linkDirectionalArrowRelPos","riskPercentile","calcLinkDirectionalArrowRelPos","linkCanvasObjectMode","linkCanvasObject","ctx","start","end","textPos","assign","c","relLink","maxTextLength","sqrt","pow","LABEL_NODE_MARGIN","textAngle","atan2","PI","mapLabel","font","measureText","width","textWidth","bckgDimensions","save","translate","rotate","fillStyle","fillRect","textAlign","textBaseline","fillText","restore","nodeCanvasObject","globalScale","NODE_R","beginPath","arc","nodeColors","riskColor","fill","nodeRbg","ref","useStyles","root","nodeTable","minWidth","tableHeader","backgroundColor","nodeTableData","NodeTable","hidden","displayNode","propName","includes","Date","toLocaleString","TableContainer","Table","styles","TableHead","TableRow","TableCell","align","TableBody","entries","entry","value","node_key","button","title","icon","margin","expand","header","display","table","pagination","SelectLens","props","component","Button","onClick","setLens","lens_type","score","getLenses","first","offset","gqlQuery","graphQLQuery","lenses","lensQueryData","ToggleLensTable","toggled","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","handleChangeRowsPerPage","TablePagination","aria-label","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","Number","pagedTable","Divider","ToggleNodeTable","curNode","toggle","NodeDetails","EngagementViewContent","justifyContent","textDecoration","GraplHeader","displayBtn","AppBar","position","Toolbar","Typography","variant","to","maxWidth","postion","border","LoginNotification","Card","CardActionArea","CardContent","CardActions","size","checkLogin","padding","loggedIn","alignItems","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","flexGrow","contentShift","headerContent","close","EngagementView","curLens","open","setOpen","clsx","IconButton","noWrap","Drawer","anchor","paper","paragraph","EngagementUx","renderedOnce","dasboardStyles","welcome","height","nav","flexDirection","dashboard","borderRadius","textTransform","fontWeight","getNotebookUrl","result","success","notebook_url","Dashboard","asyncSagemakerUrl","useAsync","loading","alert","uploadFilesToDgraph","payload","dgraphPayload","dgraphFileUpload","pluginFiles","Success","formContainer","btn","inputFiles","upload","succMsg","errMsg","pluginTable","boxShadow","uploadFormContainer","uploadForm","fontFamily","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","fileRes","TextDecoder","decode","readAsText","Message","status","UploadForm","curFiles","fileMap","reads","fileRead","fileResult","path","webkitRelativePath","mozRelativePath","all","plugins","didSucceed","directory","webkitdirectory","mozdirectory","multiple","onChange","currentTarget","files","getPluginList","getPluginListReq","pluginList","plugin_list","deletePlugin","pluginName","plugins_to_delete","PluginTable","rows","emptyRows","style","colSpan","newPage","UploadPlugin","Routes","exact","App","Boolean","match","darkTheme","createMuiTheme","palette","primary","main","rootElement","document","getElementById","ReactDOM","render","StrictMode","ThemeProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a434e921.chunk.js","sourcesContent":["import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const loginStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles(\n            {\n                valErrorMsg:{\n                    marginLeft: \".8rem\",\n                    color: \"red\",\n                    fontSize: \".75rem\"\n                }\n            }\n        )\n);\n","const DEV_API_EDGES = {\n  auth: \"http://\" + window.location.hostname + \":8900\",\n  graphQL: \"http://\" + window.location.hostname + \":5000\",\n  modelPluginEdge: \"http://\" + window.location.hostname + \":8123\",\n};\n\nexport default DEV_API_EDGES;\n","export const apiFetch = async (urlSlug: string, method = \"GET\") => {\n  const response = await fetch(urlSlug, {\n    method,\n    credentials: \"include\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n    }),\n  }).catch((e) => {\n    console.warn(e);\n    throw new Error(`API Request Error: ${e}`);\n  });\n\n  return response.json();\n};\n\n\nexport const apiFetchWithBody = async(urlSlug: string, method = \"POST\", body: string) => {\n  const response = await fetch(urlSlug, {\n    method,\n    credentials: \"include\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n    }),\n    body: body,\n  }).catch((e) => {\n    console.warn(e);\n    throw new Error(`Error with Post Request: ${e}`);\n  });\n\n  return response.json();\n};\n","import DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const loginService = async (username: string, password: string) => {\n    const loginBody = JSON.stringify({ 'username': username, 'password': password });\n\n    try {\n        const loginData = await apiFetchWithBody(`${DEV_API_EDGES.auth}/login`, \"post\", loginBody)\n        return loginData['success'] === 'True';\n    } catch (e) {\n        console.log(\"Login Error\", e);\n        return false;\n    }\n};","async function sha256(message: string) {\n    // encode as UTF-8\n    const msgBuffer = new TextEncoder().encode(message);\n\n    // hash the message\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n\n    // convert ArrayBuffer to Array\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n    // convert bytes to hex string\n    return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n}\n\n\nexport const sha256WithPepper = async (username: string, password: string) => {\n    // The pepper only exists to prevent rainbow tables for extremely weak passwords\n    // Client side hashing itself is only to prevent cases where the password is\n    // exposed before it makes it into the password database\n    const pepper = \"f1dafbdcab924862a198deaa5b6bae29aef7f2a442f841da975f1c515529d254\";\n\n    let hashed = await sha256(password + pepper + username);\n\n    for (let i = 0; i < 5000; i++) {\n        hashed = await sha256(hashed)\n    }\n\n    return hashed\n};","import React from 'react';\nimport * as Yup from \"yup\";\nimport {Field, Form, Formik} from \"formik\";\n\nimport './LogIn.css';\nimport {loginStyles} from './styles';\nimport {LoginProps} from 'types/CustomTypes';\nimport {loginService} from 'services/login/loginService';\nimport {sha256WithPepper} from './utils/passwordHashing';\n\n\nexport const LogIn = (_: LoginProps) => {\n  const useStyles = loginStyles; \n  \n  const classes = useStyles();\n\n  const validationSchema = Yup.object().shape({\n    userName: Yup.string().required(\"Username Required\"),\n    password: Yup.string().required(\"Password Required\")\n  })\n  \n  const [state, setState] = React.useState({\n    loginFailed: false\n  })\n\n  return (\n    <div className = \"backgroundImage\">\n      <div className = \"grapl\"> Grapl </div>\n\n      <div className = \"formContainer\">\n        <Formik\n          initialValues={ {userName: \"\", password: \"\"} }\n          validationSchema = {validationSchema}\n          onSubmit = { \n            async values => {\n              const password = await sha256WithPepper(\n                values.userName, values.password\n              );\n              \n              const loginSuccess = await loginService(values.userName, password);\n              \n              if (loginSuccess === true) {\n                window.history.replaceState('#/login', \"\", \"#/\")\n                window.location.reload();\n                console.log(\"Logged In\");\n              } else {\n                setState({\n                  ...state,\n                  loginFailed: true\n                })\n              }\n            }\n          }\n        >\n\n          {\n            ({ errors, touched }) => (\n                <Form>\n                  <Field name=\"userName\" type=\"text\" placeholder=\"Username\"  />\n                  {touched.userName && errors.userName && <div className = {classes.valErrorMsg}>{errors.userName}</div>}\n              \n                  <Field name=\"password\" type=\"password\" placeholder=\"Password\"/> <br/>\n                  {touched.password && errors.password && <div className = {classes.valErrorMsg}>{errors.password}</div>}\n\n                  <button className=\"submitBtn\"  type=\"submit\">Submit</button>\n\n                  {state.loginFailed && <div className= {classes.valErrorMsg}>Unsuccessful Login</div>}\n                </Form>\n            )\n          }\n        </Formik>\n      </div>\n    </div>\n  );\n}\n\nexport default LogIn;","import { Node } from \"types/CustomTypes\";\n\nconst _mapGraph = (node: Node, visited: Set<string>, f:(node:Node, prop:string, neighbor: Node) => void) => {\n    mapEdgeProps(node, (edgeName: string, neighbor:Node) => {\n        if (visited.has(node.uid + edgeName + neighbor.uid)) {\n            return\n        }\n\n        visited.add(node.uid + edgeName + neighbor.uid);\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f)\n    })\n};\n\nexport const mapGraph = (node:Node, f:(node:Node, prop:string, neighbor: Node) => void) => {\n    const visited: Set<string> = new Set();\n    mapEdgeProps(node, (edgeName:string , neighbor:Node) => {\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f)\n    })\n};\n\n// type fType = (prop:string, neighbor: Node) => void)\n// Given a node, call 'f' on any of its neighbors\nexport const mapEdges = (node: Node, f: (prop:string, neighbor: Node) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const maybeNeighbor = (node as any)[prop];\n            if(Array.isArray(maybeNeighbor)) {\n                for (const neighbor of maybeNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            } else {\n                if (maybeNeighbor && maybeNeighbor.uid !== undefined) {\n                    f(prop, maybeNeighbor)\n                }\n            }\n        }\n    }\n};\n\nexport const mapEdgeProps = (node: Node, f: (prop:string, neighbor: Node) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const maybeNeighbor = (node as any)[prop];\n            if(Array.isArray(maybeNeighbor)) {\n                for (const neighbor of maybeNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            } else {\n                if (maybeNeighbor && maybeNeighbor.uid !== undefined) {\n                    f(prop, maybeNeighbor)\n                }\n            }\n        }\n    }\n};\n\nexport const traverseNodes = (node: Node, callback: (node: Node) => void) => {\n    callback(node);\n    mapEdges(node, (_, neighbor) => {\n        traverseNodes(neighbor, callback);\n    })\n}\n\nexport const traverseNeighbors = (node: Node, callback: (node:Node, prop:string, neighbor: Node) => void) => {\n    mapEdges(node, (edgeName: string, neighbor: Node) => {\n        callback(node, edgeName, neighbor);\n\n        traverseNeighbors(neighbor, callback);\n    })\n}\n\n","import {BaseNode} from '../../../types/CustomTypes'\nimport {mapGraph} from \"components/graphDisplay/utils/graph/graph_traverse\";\n\nconst builtins = new Set([\n    'Process',\n    'File',\n    'IpAddress',\n    'Asset',\n    'Risk',\n    'IpConnections',\n    'ProcessInboundConnections',\n    'ProcessOutboundConnections',\n])\n\nexport const unpackPluginNodes = (nodes: BaseNode[]) => {\n    for (const node of nodes) {\n        if (!(node as any).predicates) {\n            continue\n        }\n        mapGraph(node, (node, edge_name, neighbor) => {\n            if ((node as any).predicates) {\n                if(!builtins.has((node as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(node as any).predicates};\n                    delete (node as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (node as any)[key] = pluginNode[key]; });\n                }\n            }\n\n            if ((neighbor as any).predicates) {\n                if(!builtins.has((neighbor as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(neighbor as any).predicates};\n                    delete (neighbor as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (neighbor as any)[key] = pluginNode[key]; });\n                }\n            }\n        })\n\n    }\n}","import {BaseNode, LensScopeResponse} from '../../types/CustomTypes';\nimport {unpackPluginNodes} from './utils_GraphQlEndpointRetrieveGraph/unpackPluginNodes';\nimport {expandScopeQuery} from './utils_GraphQlEndpointRetrieveGraph/expandScopeQuery';\n\nimport DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const retrieveGraph = async (lens: string): Promise<(LensScopeResponse & BaseNode)> => {\n    const expandScopeQueryData = expandScopeQuery(lens);\n\n    const lensScopeQuery = JSON.stringify({ query: expandScopeQueryData })\n\n    const queryResponse = \n        await apiFetchWithBody(`${DEV_API_EDGES.graphQL}/graphQlEndpoint/graphql`, \"POST\", lensScopeQuery)\n            .then(res => res)\n            .then(res => {\n                if(res.errors){\n                    console.log(\"Unable to retrieve graph data \", res.errors)\n                }\n                console.log('Retrieved Graph Data: ', res);\n                return res\n            })\n            .then((res) => res.data)\n            .then((res) => res.lens_scope);\n\n    const lensWithScopeData = await queryResponse;\n    \n    console.debug('LensWithScope: ', lensWithScopeData);\n\n    unpackPluginNodes(lensWithScopeData.scope);\n\n    return lensWithScopeData;\n};\n","export const expandScopeQuery = (lensName: string) => {\n    console.log(\"expanding scope for: \", lensName);\n\n    const query = `\n    {\n        lens_scope(lens_name: \"${lensName}\") {\n            uid,\n            node_key,\n            lens_name,\n            lens_type,\n            dgraph_type,\n            scope {\n                ... on Process {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    process_name, \n                    process_id,\n                    children {\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n            \n                ... on Asset {\n                    uid, \n                    node_key, \n                    dgraph_type,\n                    hostname,\n                    asset_ip{\n                        ip_address\n                    }, \n                    asset_processes{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    },\n                    files_on_asset{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        file_path\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n\n                ... on File {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n\n                ... on PluginType {\n                    predicates,\n                }\n            }\n        }\n    }\n`;\n\n    return query;\n}\n","import {VizGraph, VizNode} from '../../../../../types/CustomTypes';\n\nexport const calcNodeRiskPercentile = (_nodeRisk: number | {risk: number}, _allRisks: any) => {\n    let nodeRisk = _nodeRisk;\n    if (typeof _nodeRisk === 'object') {\n        nodeRisk = _nodeRisk.risk;\n    }\n\n    const allRisks = _allRisks\n        .map((n: any) => n || 0)\n        .sort((a: number, b: number) => a - b);\n\n    if (nodeRisk === undefined || nodeRisk === 0 || allRisks.length === 0) {\n        return 0\n    }\n\n    let riskIndex = 0;\n    for (const risk of allRisks) {\n        if (nodeRisk >= risk) {\n            riskIndex += 1;\n        }\n    }\n\n    return Math.floor((riskIndex / allRisks.length) * 100)\n};\n\n\nexport const nodeRisk = (node: VizNode, Graph: VizGraph) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile >= 75) {\n        return 6\n    } else if (riskPercentile >= 25) {\n        return 5\n    } else {\n        return 4\n    }\n};\n","import { calcNodeRiskPercentile } from '../node/nodeCalcs'; \nimport { LinkType, VizNode, VizGraph } from '../../../../../types/CustomTypes';\n\n\nconst findNode = (id: number, nodes: VizNode[]) => {\n    for (const node of (nodes || [])) {\n        if (node.id === id) {\n            return node\n        }\n    }\n    return null\n};\n\nexport const calcLinkRisk = (link: LinkType, Graph: VizGraph) => {\n    // console.log(\"LINK\", link)\n    let srcNode = \n        findNode(link.source as any, Graph.nodes) ||\n        findNode(link.source.name as any, Graph.nodes);\n    let dstNode = \n        findNode(link.target as any, Graph.nodes) ||\n        findNode(link.target.name as any, Graph.nodes);\n\n    if (!srcNode || !dstNode) {\n        console.error(\"Missing srcNode/dstNode\", srcNode, link.source, dstNode, Graph.nodes);\n        return 0;\n    }\n\n    const srcRisk = srcNode.risk || 0;\n    const dstRisk = dstNode.risk || 0;\n\n    return Math.round((srcRisk + dstRisk) / 2)\n};\n\nexport const calcLinkDirectionalArrowRelPos = (link: LinkType, Graph: VizGraph) => {\n    const node = \n    // findNode(link.target, Graph.nodes) || \n        findNode(link.target.name, Graph.nodes);\n\n    if (node === null || node.risk === 0) {\n        return 1.0\n    }\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        return 1.0\n    }\n\n    if (riskPercentile >= 75) {\n        return 0.95\n    } else if (riskPercentile >= 50) {\n        return 0.9\n    } else if (riskPercentile >= 25) {\n        return 0.85\n    } else {\n        return 1.0\n    }\n};\n\nexport const calcLinkRiskPercentile = (link: LinkType, Graph: VizGraph) => {\n    const linkRisk = calcLinkRisk(link, Graph);\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    return calcNodeRiskPercentile(linkRisk, nodes);\n};\n\nexport const calcLinkParticleWidth = (link: LinkType, Graph:VizGraph) => {\n    const linkRiskPercentile = calcLinkRiskPercentile(link, Graph);\n    if (linkRiskPercentile >= 75) {\n        return 5\n    } else if (linkRiskPercentile >= 50) {\n        return 4\n    } else if (linkRiskPercentile >= 25) {\n        return 3\n    } else {\n        return 2\n    }\n};\n","import { calcNodeRiskPercentile } from '../calculations/node/nodeCalcs';\nimport { calcLinkRiskPercentile } from '../calculations/link/linkCalcs';\nimport { LinkType, VizGraph, VizNode } from '../../../../types/CustomTypes'\nimport { ColorHash } from '../../GraphDisplay';\n\nexport const BKDRHash = (str: string) => {\n    const seed = 131;\n    const seed2 = 137;\n    let hash = 0 as number;\n    // make hash more sensitive for short string like 'a', 'b', 'c'\n    str += 'x';\n    // Note: Number.MAX_SAFE_INTEGER equals 9007199254740991\n    const MAX_SAFE_INTEGER = parseInt(9007199254740991 / seed2 as any) as any;\n    for (let i = 0; i < str.length; i++) {\n        if (hash > MAX_SAFE_INTEGER) {\n            hash = parseInt(hash / seed2 as any);\n        }\n        hash = hash * seed + str.charCodeAt(i);\n    }\n    return hash;\n};\n\n//# TODO: Add custom coloring for each node\nexport const calcNodeRgb = (node: VizNode, colorHash: ColorHash) => {\n    if (node.nodeType === 'Process') {\n        return [31, 185, 128]\n    } else if (node.nodeType === 'File') {\n        return [177, 93, 255]\n    } \n    \n    // else if (node.nodeType === 'Lens'){\n    //     return []\n    // } else if(node.nodeType === 'IpPort'){\n    //     return []\n    // } else if(node.nodeType === 'IpConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessInboundConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessOutboundConnection'){\n    //     return []\n    // } \n    \n    else{\n        return colorHash.rgb(node.nodeType)\n    }\n}\n\n\nexport const percentToColor = (percentile: number) => {\n    const hue = (100 - percentile) * 40 / 100;\n\n    return `hsl(${hue}, 100%, 50%)`;\n};\n\nexport const calcLinkColor = (link: LinkType, Graph: VizGraph) => {\n    const risk = calcLinkRiskPercentile(link, Graph);\n    // Default link color if no risk\n    if (risk === 0) {\n        return 'white'\n    }\n    return percentToColor(risk);\n};\n\n\nexport const riskColor = (node: VizNode, Graph: VizGraph, colorHash: ColorHash) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        const nodeColors = calcNodeRgb(node, colorHash);\n        return `rgba(${nodeColors[0]}, ${nodeColors[1]}, ${nodeColors[2]}, 1)`;\n    }\n\n    return percentToColor(riskPercentile);\n};\n\n\n","import {mapNodeProps} from '../../GraphDisplay';\nimport {Node, MergeGraphType} from '../../../../types/CustomTypes'; \n\n// merges y into x, returns true if update occurred\nconst mergeNodes = (x: Node, y: Node) => {\n    let merged = false;\n    mapNodeProps(y, (prop: string) => {\n        if (!Object.prototype.hasOwnProperty.call(x, prop)) {\n            if ((x as any)[prop] !== (y as any)[prop]) {\n                (x as any)[prop] = (y as any)[prop];\n                merged = true;\n            }\n        }\n    });\n\n    return merged;\n};\n\nexport const mergeGraphs = (curGraph: MergeGraphType, update: MergeGraphType): MergeGraphType | null => {\n    // Merges two graphs into a new graph\n    // returns 'null' if there are no updates to be made\n\n    if (!update.nodes && !update.links) {\n        // empty update\n        return null\n    }\n\n    const outputGraph: MergeGraphType = {nodes: [], links: []};\n\n    let updated = false;\n\n    const nodes = new Map();\n    const links = new Map();\n\n    for (const node of curGraph.nodes) {\n        nodes.set(node.uid, node)\n    }\n\n    for (const newNode of update.nodes) {\n        const node = nodes.get(newNode.uid);\n        if (node) {\n            if (mergeNodes(node, newNode)) {\n                updated = true;\n            }\n        } else {\n            nodes.set(newNode.uid, newNode);\n            console.debug('new node added ', newNode);\n            updated = true;\n        }\n    }\n// #TODO: console.log on link.source, check to see if it's an object or not. It should never be an object\n// this should only be a string / an int. At some point, it was getting sent as an object\n    for (const link of curGraph.links) {\n        if (link) {\n            const source = link.source.uid || link.source;\n            const target = link.target.uid || link.target;\n            links.set(\n                source + link.label + target,\n                link,\n            )\n        }\n    }\n\n    for (const newLink of update.links) {\n        const newLinkSource =  newLink.source || newLink.source;\n        const newLinkTarget =  newLink.target || newLink.target;\n        const link = links.get(newLinkSource + newLink.label + newLinkTarget);\n        if (!link) {\n            console.debug('newlink', newLink)\n            links.set(newLink.source + newLink.label + newLink.target, newLink);\n            updated = true;\n        }\n    }\n\n    outputGraph.nodes = Array.from(nodes.values());\n    outputGraph.links = Array.from(links.values());\n    if (updated) {\n        return outputGraph;\n    } else {\n        return null;\n    }\n}","import { traverseNodes, traverseNeighbors, mapEdges } from \"../graph/graph_traverse\"\nimport { getNodeLabel } from '../graph/labels';\nimport {LensScopeResponse, BaseNode} from \"../../../../types/CustomTypes\"\n\ninterface IVizNode {\n    uid: number,\n    name: number,\n    id: number, \n    nodeType: string,\n    nodeLabel: string,\n    x: number,\n    y: number,\n}\n\ninterface VizProcessNode extends IVizNode {\n    process_id: number,\n    process_name: string,\n    created_timestamp: number, \n    terminate_time: number,\n    image_name: string, \n    arguments: string,\n}\n\nexport interface File extends IVizNode {\n    file_name: string,\n    file_path: string,\n    file_extension: string,\n    file_mime_type: string,\n    file_size: number,\n    file_version: string, \n    file_description: string,\n    file_product: string,\n    file_company: string, \n    file_directory: string,\n    file_inode: number,\n    file_hard_links: string, \n    signed: boolean,\n    signed_status: string, \n    md5_hash: string,\n    sha1_hash: string,\n    sha256_hash: string,\n}\n\nexport interface IpConnections extends IVizNode {\n    src_ip_addr: string,\n    src_port: string,\n    dst_ip_addr: string,\n    dst_port: string,\n    created_timestamp: number,\n    terminated_timestamp: number,\n    last_seen_timestamp: number,\n}\ninterface VizAssetNode extends IVizNode {\n    hostname: string,\n}\n\ninterface VizLensNode extends IVizNode {\n    lens_name: string,\n    lens_type: string, \n}\n\ntype VizDynamicNode = IVizNode;\n\ntype VizNode = VizProcessNode | VizAssetNode | VizLensNode | VizDynamicNode;\n\ntype VizLink = {\n    source: number,\n    label: string,\n    target: number, \n}\n\ntype AdjacencyMatrix = {\n    nodes: VizNode[],\n    links: VizLink[]\n}\n\n\nconst getNodeType = (node: BaseNode) => {\n    const t = node.dgraph_type || node.node_type;\n\n    if (t) {\n        if (Array.isArray(t)) {\n            return t[0]\n        }\n        return t\n    }\n\n    console.warn('Unable to find type for node ', node);\n    return 'Unknown';\n};\n\nfunction randomInt(min: number, max: number) // min and max included\n{\n    let randomNum: number = Math.floor(Math.random() * (max - min + 1) + min);\n    return randomNum;\n}\n\n\nexport const graphQLAdjacencyMatrix = (inputGraph: (LensScopeResponse & BaseNode)): AdjacencyMatrix => {\n\n    const nodes: VizNode[] = []; \n    const links: VizLink[] = [];\n\n    const nodeMap: Map<number, VizNode> = new Map();\n\n    traverseNeighbors(inputGraph, \n        (fromNode: BaseNode, edgeName: string, toNode: BaseNode) => {\n            if(edgeName !== 'scope'){\n                \n                if(getNodeType(fromNode) === 'Unknown'){\n                    return;\n                }\n\n                if(getNodeType(toNode) === 'Unknown'){\n                    return;\n                }\n\n                if(getNodeType(fromNode) === 'Risk'){\n                    return;\n                }\n\n                if(getNodeType(toNode) === 'Risk'){\n                    return;\n                }\n                \n                links.push({\n                    source: fromNode.uid,\n                    label: edgeName, \n                    target: toNode.uid\n                })\n        } \n    })\n\n    traverseNodes(inputGraph, (node: BaseNode) => {\n        const nodeType = getNodeType(node);\n\n        if(nodeType === 'Unknown'){\n            return;\n        }\n\n        if(nodeType === 'Risk'){\n            return; \n        }\n\n        const nodeLabel = getNodeLabel(nodeType, node);\n\n        const strippedNode = {...node};\n\n        strippedNode.risk = strippedNode.risk || 0;\n        strippedNode.analyzer_names = strippedNode.analyzer_names || \"\";\n\n        for(const risk of node.risks || []){\n            strippedNode.risk += risk.risk_score || 0;\n            if (strippedNode.analyzer_names && risk.analyzer_name) {\n                // #TODO: Link to the analyzer details\n                strippedNode.analyzer_names += \", \"\n            }\n            strippedNode.analyzer_names += risk.analyzer_name || \"\";\n        }\n\n        mapEdges(node, (edge: string, _neighbor: BaseNode) => {\n            // The stripped node is being converted to another type, so we can cast\n            // to any here\n            (strippedNode as any)[edge] = undefined;\n        })\n\n        const vizNode = {\n            name: node.uid,\n            x: 200 + randomInt(1, 5),\n            y: 150 + randomInt(1, 5),\n            ...strippedNode,\n            id: node.uid,\n            nodeType,\n            nodeLabel,\n        };\n\n        nodeMap.set(node.uid, vizNode);\n    })\n\n    for (const vizNode of (nodeMap.values() as any)) {\n        nodes.push(vizNode)\n    }\n\n    return {\n        nodes, \n        links\n    }\n}\n","import { Node }  from '../../../../types/CustomTypes'\n\nconst getNodeLabel = (nodeType: string, node: Node) => {\n    console.log('nodetype', nodeType);\n\n    const _node = node as any; // ignore-any\n\n    switch(nodeType) {\n        case \"Process\": return _node.process_name || _node.process_id || 'Process';\n        case \"Asset\": return _node.hostname || 'Asset';\n        case \"File\": return _node.file_path || 'File';\n        case \"IpAddress\": return _node.external_ip || 'IpAddress';\n        case \"Lens\":  return _node.lens_name || 'Lens';\n        default: return nodeType || '';\n    }\n};\n\nconst mapLabel = (label: string) => {\n    if (label === 'children') {\n        return 'executed'\n    }\n    return label\n};\n\nexport { mapLabel, getNodeLabel }","// @ts-nocheck\nimport React, { useEffect, useRef } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport * as d3 from \"d3\";\n\nimport { retrieveGraph } from \"../../services/graphQL/graphQlEndpointRetrieveGraphReq\";\n\nimport { BKDRHash, riskColor, calcNodeRgb , calcLinkColor} from \"./utils/graphColoring/coloring.tsx\";\nimport { mapLabel } from './utils/graph/labels.tsx';\nimport { nodeRisk } from './utils/calculations/node/nodeCalcs.tsx'\nimport { calcLinkDirectionalArrowRelPos, calcLinkParticleWidth  } from './utils/calculations/link/linkCalcs.tsx'\nimport {mergeGraphs} from './utils/graph/mergeGraphs.tsx'\nimport {graphQLAdjacencyMatrix} from './utils/graphQL/graphQLAdjacencyMatrix.tsx'\nimport { Node, LinkType, GraphType, ColorHashOptions } from \"../../types/CustomTypes.tsx\"\n\ntype ColorHashOptions = {\n    lightness: number,\n    saturation: number,\n    hue: number,\n    hash: BKDRHash,\n}\n\ntype GraphDisplayProps = {\n    lensName: string | null,\n    setCurNode: (string) => void,\n}\n\ntype GraphDisplayState = {\n    graphData: AdjacencyMatrix,\n    curLensName: string | null,\n    intervalMap: any,\n}\n\ntype GraphState = {\n    curLensName: LensType[], \n    graphData: GraphType[]\n}\n\n/**\n * Convert HSL to RGB\n *\n * @see {@link http://zh.wikipedia.org/wiki/HSL和HSV色彩空间} for further information.\n * @param {Number} H Hue ∈ [0, 360)\n * @param {Number} S Saturation ∈ [0, 1]\n * @param {Number} L Lightness ∈ [0, 1]\n * @returns {Array} R, G, B ∈ [0, 255]\n */\n\nconst HSL2RGB = (H: number, S: number, L: number) => {\n    H /= 360;\n\n    const q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n    const p = 2 * L - q;\n\n    return [H + 1 / 3, H, H - 1 / 3].map((color) => {\n        if (color < 0) {\n            color++;\n        }\n        if (color > 1) {\n            color--;\n        }\n        if (color < 1 / 6) {\n            color = p + (q - p) * 6 * color;\n        } else if (color < 0.5) {\n            color = q;\n        } else if (color < 2 / 3) {\n            color = p + (q - p) * 6 * (2 / 3 - color);\n        } else {\n            color = p;\n        }\n        return Math.round(color * 255);\n    });\n};\n\nconst isArray = (o: Object) => {\n    return Object.prototype.toString.call(o) === '[object Array]';\n};\n\n/**\n * Color Hash Class\n *\n * @class\n */\n\nexport class ColorHash {\n    constructor(options: ColorHashOptions | undefined) {\n        options = options || {};\n\n        const LS = [options.lightness, options.saturation].map((param) => {\n            param = param || [0.35, 0.5, 0.65]; // note that 3 is a prime\n            return isArray(param) ? param.concat() : [param];\n        });\n    \n        this.L = LS[0];\n        this.S = LS[1];\n    \n        if (typeof options.hue === 'number') {\n            options.hue = {min: options.hue, max: options.hue};\n        }\n        if (typeof options.hue === 'object' && !isArray(options.hue)) {\n            options.hue = [options.hue];\n        }\n        if (typeof options.hue === 'undefined') {\n            options.hue = [];\n        }\n        this.hueRanges = options.hue.map(function (range: number) {\n            return {\n                min: typeof range.min === 'undefined' ? 0 : range.min,\n                max: typeof range.max === 'undefined' ? 360 : range.max\n            };\n        });\n    \n        this.hash = options.hash || BKDRHash;\n    } \n    /**\n     * Returns the hash in [h, s, l].\n     * Note that H ∈ [0, 360); S ∈ [0, 1]; L ∈ [0, 1];\n     *\n     * @param {String} str string to hash\n     * @returns {Array} [h, s, l]\n     */\n    hsl = (str: string) => {\n        let H, S, L;\n        let hash = this.hash(str);\n    \n        if (this.hueRanges.length) {\n            const range = this.hueRanges[hash % this.hueRanges.length];\n            const hueResolution = 727; // note that 727 is a prime\n            H = ((hash / this.hueRanges.length) % hueResolution) * (range.max - range.min) / hueResolution + range.min;\n        } else {\n            H = hash % 359; // note that 359 is a prime\n        }\n        hash = parseInt(hash / 360 as any);\n        S = this.S[hash % this.S.length];\n        hash = parseInt(hash / this.S.length as any);\n        L = this.L[hash % this.L.length];\n    \n        return [H, S, L];\n    }\n\n    /**\n     * Returns the hash in [r, g, b].\n     * Note that R, G, B ∈ [0, 255]\n     *\n     * @param {String} str string to hash\n     * @returns {Array} [r, g, b]\n     */\n    rgb = (str: string) => {\n        const hsl = this.hsl(str);\n        return HSL2RGB.apply(this, hsl);\n    };\n}\n\n\nexport const mapNodeProps = (node: Node, f: (string) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            if (Array.isArray(node[prop])) {\n                if (node[prop].length > 0) {\n                    if (node[prop][0].uid === undefined) {\n                        f(prop)\n                    }\n                }\n            } else {\n                f(prop)\n            }\n        }\n    }\n};\n\nconst updateGraph = async (\n    lensName: string, \n    state: GraphState, \n    setState: (state: GraphState) => void,\n) => {\n    if (!lensName) {\n        console.log('Attempted to fetch empty lensName')\n        return;\n    }\n\n    const curLensName = state.curLensName;\n    await retrieveGraph(lensName)\n        .then(async (scope) => {\n            const update = graphQLAdjacencyMatrix(scope);\n            console.debug('state: ', state);\n            console.debug('update', update);\n\n            const mergeUpdate = mergeGraphs(state.graphData, update);\n            if (mergeUpdate !== null) {\n                if (curLensName === lensName) {\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: mergeUpdate,\n                    })\n                } else {\n                    console.log(\"Switched lens, updating graph\", state.curLensName, 'ln', lensName);\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: update,\n                    })\n                }\n            }\n        })\n        .catch((e) => console.error(\"Failed to retrieveGraph \", e))\n}\n\n\nconst defaultGraphDisplayState = (lensName: string): GraphDisplayState => {\n    return {\n        graphData: {nodes: [], links: []},\n        curLensName: lensName,\n        intervalMap: {},\n    }\n}\n\nconst GraphDisplay = ({lensName, setCurNode}: GraphDisplayProps) => {\n    const [state, setState] = React.useState(defaultGraphDisplayState(lensName));\n    const forceRef = useRef(null);\n\n    useEffect(() => {\n        // console.log(\"useEffect - setting forceRef state\");\n        forceRef.current.d3Force(\"link\", d3.forceLink());\n        forceRef.current.d3Force('collide', d3.forceCollide(22));   \n        forceRef.current.d3Force(\"charge\", d3.forceManyBody());\n        forceRef.current.d3Force('box', () => {\n            const N = 100;\n            // console.log(Graph.width(), Graph.height())\n            const SQUARE_HALF_SIDE = 20 * N * 0.5;\n            state.graphData.nodes.forEach(node => {\n                const x = node.x || 0, y = node.y || 0;\n                // bounce on box walls\n                if (Math.abs(x) > SQUARE_HALF_SIDE) {\n                    node.vx *= -1;\n                }\n                if (Math.abs(y) > SQUARE_HALF_SIDE) {\n                    node.vy *= -1;\n                }\n            });\n        });\n    }, [state])\n\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            if (lensName) {\n                console.debug('updating graph');\n                await updateGraph(lensName, state, setState);\n            }\n        }, 1000);\n        console.debug('setting lensName', lensName);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [lensName, state, setState]);\n\n    const graphData = state.graphData;\n\n    const colorHash = new ColorHash({});\n\n    // #TODO: ADD ZOOM HANDLERS FOR MAX ZOOM IN/OUT\n\n    return (\n        <>\n            <ForceGraph2D\n                graphData={graphData}\n                nodeLabel={(node: Node) => node.nodeLabel}\n                enableNodeDrag={true}\n                linkDirectionalParticles={1}\n                linkDirectionalParticleWidth={(link) => {\n                    return calcLinkParticleWidth(link, graphData);\n                }}\n                linkDirectionalParticleColor={(link) => {\n                    return calcLinkColor(link, graphData)\n                }}\n                linkDirectionalParticleSpeed={0.005}\n                onNodeClick={\n                    (node: Node, event: string) => {\n                        setCurNode(node);\n                    }\n                }\n                linkDirectionalArrowLength={8}\n                linkWidth={4}\n                linkDirectionalArrowRelPos={(link => {\n                    return calcLinkDirectionalArrowRelPos(link, graphData);\n                })}\n                linkCanvasObjectMode={(() => 'after')}\n                linkCanvasObject={((link: LinkType, ctx: any) => {\n                    const MAX_FONT_SIZE = 8;\n                    const LABEL_NODE_MARGIN = 8 * 1.5;\n                    const start = link.source;\n                    const end = link.target;\n                    // ignore unbound links\n                    link.color = calcLinkColor(link, graphData);\n\n                    if (typeof start !== 'object' || typeof end !== 'object') return;\n                    // calculate label positioning\n                    const textPos = Object.assign(\n                        ...['x', 'y'].map((c: any) => (\n                            {\n                                [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\n                            }\n                        )) as any\n                    );\n\n                    const relLink = {x: end.x - start.x, y: end.y - start.y};\n\n                    const maxTextLength = Math.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) - LABEL_NODE_MARGIN * 8;\n\n                    let textAngle = Math.atan2(relLink.y, relLink.x);\n                    // maintain label vertical orientation for legibility\n                    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n                    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n                    const label = mapLabel(link.label);\n                    // estimate fontSize to fit in link length\n                    ctx.font = '50px Arial';\n                    const fontSize = Math.min(MAX_FONT_SIZE, maxTextLength / ctx.measureText(label).width);\n                    ctx.font = `${fontSize + 5}px Arial`;\n\n                    let textWidth = ctx.measureText(label).width;\n\n                    textWidth += Math.round(textWidth * 0.25);\n\n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // draw text label (with background rect)\n                    ctx.save();\n                    ctx.translate(textPos.x, textPos.y);\n                    ctx.rotate(textAngle);\n                    ctx.fillStyle = 'rgb(115,222,255,1)';\n                    ctx.fillRect(-bckgDimensions[0] / 2, -bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'white';\n                    //content, left/right, top/bottom\n                    ctx.fillText(label, .75, 3);\n                    ctx.restore();\n                })}\n                nodeCanvasObject={((node: Node, ctx: any, globalScale: any) => {\n                    // add ring just for highlighted nodes\n\n                    const NODE_R = nodeRisk(node, graphData);\n                    ctx.save();\n\n                    // Risk outline color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.3, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = riskColor(node, graphData, colorHash);\n                    ctx.fill();\n                    ctx.restore();\n\n                    ctx.save();\n\n                    // Node color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.2, 0, 2 * Math.PI, false);\n\n                    const nodeRbg = calcNodeRgb(node, colorHash);\n\n                    ctx.fillStyle = `rgba(${nodeRbg[0]}, ${nodeRbg[1]}, ${nodeRbg[2]}, 1)`;\n                    ctx.fill();\n                    ctx.restore();\n\n                    const label = node.nodeLabel;\n\n                    const fontSize = 15 / globalScale;\n\n                    ctx.font = `${fontSize}px Arial`;\n\n\n                    const textWidth = ctx.measureText(label).width;\n\n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // node label color\n                    ctx.fillStyle = 'rgba(48, 48, 48, 0.8)';\n                    ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'white';\n                    ctx.fillText(label, node.x, node.y);\n\n                })}\n                ref={forceRef}\n            />\n        </>\n    )\n}\n\nexport default GraphDisplay;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const nodeTableStyles = makeStyles({\n    root: {\n        fontSize: \".75em\"\n    },\n    nodeTable: {\n        minWidth: 450,\n    }, \n    tableHeader: {\n        fontSize: \".85rem\", \n        backgroundColor: \"#595959\"\n    }, \n    nodeTableData: {\n        fontSize: \".75rem\"\n    },\n});\n","import React from \"react\";\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { mapEdgeProps } from '../../graphDisplay/utils/graph/graph_traverse';\nimport { mapNodeProps } from '../../graphDisplay/GraphDisplay';\nimport { Node } from \"types/CustomTypes\";\n\nimport { tableHeader } from \"./nodeTableHeader\";\nimport { nodeTableStyles } from \"./styles\"; \n\nconst useStyles = nodeTableStyles; \n\ntype NodeTableProps = {\n    node: Node\n}\n\nfunction NodeTable({node}: NodeTableProps){\n    const classes = useStyles();\n    const hidden = new Set(\n        ['id', 'dgraph.type', 'dgraph_type', '__indexColor', 'risks','uid', 'scope', 'name', 'nodeType', 'nodeLabel', 'x', 'y', 'index', 'vy', 'vx', 'fx', 'fy']\n    );\n\n    mapEdgeProps(node, (edgeName: string, _neighbor: Node) => {\n        hidden.add(edgeName)\n    });\n\n    const displayNode = {} as any;\n\n    mapNodeProps(\n        node, \n        (propName: string) => {\n            const prop = (node as any)[propName];\n\n            if(!hidden.has(propName)){\n                if (prop) {\n                    if (propName.includes('_time')) {\n                        displayNode[propName] = new Date(prop).toLocaleString()\n                    } else {\n                        displayNode[propName] = prop;\n                    }\n                }\n            }           \n        }\n    )\n\n    return(\n        <TableContainer>\n            <Table className={classes.nodeTable}>\n            { tableHeader(node, classes) }\n            <TableBody>\n                    {\n                        Object.entries(displayNode).map((entry) => {\n                            const [key, value] = entry;\n                            \n                            return(\n                                <TableRow key = {node.node_key + key}> \n                                    <TableCell className = {classes.nodeTableData} align=\"left\"><b>{key}</b></TableCell>\n                                    <TableCell className = {classes.nodeTableData} align=\"left\">{value as any}</TableCell>\n                                </TableRow>\n                            ) \n                        })\n                    }\n            </TableBody>\n            </Table>\n        </TableContainer>\n    ) \n}\n\n\nexport default  NodeTable ","import React from \"react\";\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { Node } from \"types/CustomTypes\";\n\nexport function tableHeader(node: Node, styles: any) {\n    if(node) {\n        return (\n        <TableHead >\n            <TableRow>\n                <TableCell \n                    align=\"left\" \n                    className={styles.tableHeader}>\n                    <b> PROPERTY </b>\n                </TableCell>\n                <TableCell \n                    align=\"left\"\n                    className={styles.tableHeader}\n                >\n                    <b> VALUE </b>\n                </TableCell>\n            </TableRow>\n        </TableHead>\n    )\n    } else {\n        return <></>\n    }\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root:{\n        fontSize: \"1rem\",\n    },\n    button: {\n        width: \".005%\",\n        color: \"white\",\n        backgroundColor:\"#424242\",\n    },\n    title: {\n        fontSize: \"25px\",\n        color: \"#ffffff\",\n    },\n    icon:{\n        color: \"#42C6FF\",\n        margin: \"15px 0 0 10px\",\n    }, \n    expand:{\n        color: \"#42C6FF\",\n        margin: \"0px\"\n    },\n    header:{\n        display: \"flex\"\n    }, \n    table: {\n        minWidth: 450, \n    },\n    lensName: {\n        fontSize: \"16px\",\n    },\n    pagination: {\n        margin: \".5rem\",\n        backgroundColor: \"#595959\",\n    }\n});","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { useStyles } from '../styles';\n\nimport { SelectLensProps } from \"types/DynamicEngagementViewTypes\"\n\nexport function SelectLens(props: SelectLensProps) {\n    const classes = useStyles();\n    return (\n        <TableRow key={props.uid}>\n            <TableCell component=\"th\" scope=\"row\">\n            <Button className = {classes.lensName}\n                onClick={\n                    () => { \n                        props.setLens(props.lens)    \n                    }\n            }>\n                {props.lens_type + \" :\\t\\t\" + props.lens + \"\\t\\t\" + props.score}\n            </Button>\n            </TableCell>\n        </TableRow>\n    )\n}","import React from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from '@material-ui/core/TablePagination';\n\nimport { ClassNameMap } from '@material-ui/styles/withStyles';\nimport { SelectLens } from './selectLens';\nimport { Lens } from \"types/CustomTypes\";\nimport { PaginationState } from \"types/CustomTypes\";\n\nexport const pagedTable = (\n    state: PaginationState, \n    page: number, \n    rowsPerPage: number, \n    handleChangePage: (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) => void, \n    handleChangeRowsPerPage: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void, \n    setLens: (lens: string) => void, \n    classes: ClassNameMap<string>\n) => {\n    return (\n        <TableContainer>\n            <TablePagination\n                className = {classes.pagination}\n                aria-label = \"pagination\"\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={state.lenses.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            {\n                state.lenses \n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(\n                    (lens: Lens) => {\n                        return(\n                            <Table className={classes.table} aria-label=\"lens table\" key={Number(lens.uid)}>\n                                <TableBody>\n                                    <SelectLens \n                                        key={Number(lens.uid)}\n                                        uid={lens.uid}\n                                        lens={lens.lens_name}\n                                        lens_type={lens.lens_type}\n                                        score={lens.score}\n                                        setLens={setLens}\n                                    />\n                                </TableBody>\n                            </Table>\n                        )\n                    }\n                )\n            }\n        </TableContainer>\n    )\n}","import DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const getLenses = async (first: number, offset: number) => {\n    const gqlQuery = `\n        {\n            lenses(first: ${first}, offset: ${offset}) {\n                uid,\n                node_key,\n                lens_name,\n                score, \n                lens_type,\n            }\n        }\n    `;\n\n    const graphQLQuery = JSON.stringify({ query: gqlQuery })\n    \n    const response = \n        await apiFetchWithBody(`${DEV_API_EDGES.graphQL}/graphQlEndpoint/graphql`, \"POST\", graphQLQuery)\n            .then(res => res)\n            .then(res => {\n                if (res.errors) {\n                    console.error(\"Unable to retrieve lenses \", res.errors);\n                    res.data = {lenses: []};\n                }\n                return res\n            })\n            .then((res) => res.data);\n\n    const lensQueryData = await response;\n    console.log(\"Retrieved lenses: \", lensQueryData);\n    \n    return lensQueryData;\n};\n","import React, {useEffect, useState} from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { pagedTable } from \"./lensPagedTable\";\nimport { getLenses}  from \"services/graphQL/graphQlEndpointGetLensesReq\";\n\n\nimport {\n    ToggleLensTableProps, \n    ToggleLensTableState, \n} from \"types/CustomTypes\";\n\nimport { useStyles } from '../styles';\n\nconst defaultToggleLensTableState = (): ToggleLensTableState => {\n    return {\n        toggled: true,\n        lenses: [],\n        first: 100, // first is the page size\n        offset: 0, // by default, start from page 0\n    }\n}\n\n\nexport function ToggleLensTable( {setLens}: ToggleLensTableProps ) {\n    const [state, setState] = useState(defaultToggleLensTableState());\n    const classes = useStyles();\n\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) => {\n        setPage(page);\n    }\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        console.log(\"Handle Row Event\", event)\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    }\n\n    useEffect( () => {\n        const interval = setInterval(\n            () => {\n            console.log(\"Fetching lenses\");\n\n            getLenses(state.first, state.offset)\n                .then((response) => {\n                    if (response.lenses && response.lenses !== state.lenses) {\n                        const lenses = state.lenses.concat(response.lenses);\n                        setState({\n                            ...state,\n                            offset: state.offset + response.lenses.length || 0,\n                            lenses,\n                        })\n                    }\n                }\n            )\n        }, 5000);\n        return () => clearInterval(interval);\n    });\n\n    return (\n        <>\n            <div className={classes.header}>\n                <b className={classes.title}>\n                    <BubbleChartIcon className = {classes.icon} />\n                    LENSES \n                </b>\n                <Button\n                    className = {classes.button}\n                    onClick={() => { \n                        setState({\n                            ...state,\n                            toggled: !state.toggled,\n                        }) \n                    }}> \n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n        \n            <div className=\"lensToggle\">\n                {   \n                    state.toggled && \n                    pagedTable(state, page, rowsPerPage, handleChangePage, handleChangeRowsPerPage, setLens, classes)\n                }\n            </div>\n\n            <Divider />\n        </>\n    )\n}\n","import React, {useState} from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport LensIcon from '@material-ui/icons/Lens';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport {\n    ToggleNodeTableProps,\n} from \"types/DynamicEngagementViewTypes\";\n\n\nimport {NodeDetails} from '../DynamicEngagementViewFeatures'\n\nimport { useStyles } from '../styles';\n\n\nexport function ToggleNodeTable({curNode}: ToggleNodeTableProps) {\n    const [toggled, toggle] = useState(true);\n    const classes = useStyles();\n    return (\n        <div>\n            <div className={classes.header}>\n                <b className={classes.title}><LensIcon className={classes.icon}/> NODE</b>\n                <Button\n                    className = {classes.button}\n                    onClick={\n                        () => { toggle(toggled => !toggled) }\n                    }> \t\n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n\n            <div className=\"nodeToggle\">\n                {\n                    toggled && curNode && \n                        <>\n                            { <NodeDetails node={curNode}/> }\n                        </>\n                }\n            </div>\n        </div>\n    )\n}","import React from \"react\";\n\nimport NodeTable from '../nodeTable/NodeTable';\nimport { NodeDetailsProps, EngagementViewContentProps } from \"types/DynamicEngagementViewTypes\";\n\nimport {ToggleLensTable} from \"./utils/toggleLensTable\";\nimport {ToggleNodeTable} from './utils/toggleNodeTable';\n\nexport const NodeDetails = ({node}: NodeDetailsProps) => {\n    return ( \n        <> <NodeTable node={node} /> </> \n    )\n}\n\nexport default function EngagementViewContent({setLens, curNode}: EngagementViewContentProps) {\n    return (\n        <>\n            <ToggleLensTable setLens={setLens}/>\n            <ToggleNodeTable curNode={curNode}/>\n        </>\n    );\n}","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const graplHeaderStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles({\n            root: {\n                display: \"flex\",\n            },\n            header: {\n                justifyContent: \"space-between\",\n            }, \n            link:{\n                color:\"#42C6FF\", \n                textDecoration: \"none\"\n            }\n        }\n    )\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Home from '@material-ui/icons/Home';\n\nimport {graplHeaderStyles} from './styles';\nimport {GraplHeaderProps} from 'types/GraplHeaderTypes'; \n\nconst useStyles = graplHeaderStyles; \n\nconst GraplHeader = (\n        {displayBtn}: GraplHeaderProps) => {\n            const classes = useStyles();\n            \n            return(\n                <>\n                    <AppBar position=\"static\">\n                        <Toolbar className = {classes.header}>\n                            <Typography variant=\"h6\" >\n                                GRAPL\n                            </Typography>\n                            {\n                                displayBtn &&\n                                    <Link to = \"/\" className = {classes.link}><Home /></Link>\n                            }\n                        </Toolbar>\n                    </AppBar>\n                </>\n    )    \n}\n\nexport default GraplHeader; ","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { notificationsStyles } from './styles';\n\nconst useStyles = notificationsStyles; \n\nexport default function LoginNotification() {\n    const classes = useStyles();\n\n    return (\n        <Card variant=\"outlined\" className={classes.root}>\n            <CardActionArea>\n                <CardContent>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        You are not logged in and changes cannot be saved.\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n\n            <CardActions>\n                <Button \n                    className = {classes.button}\n                    size = \"small\" \n                    onClick = { \n                        () => {\n                            window.history.replaceState('#/', \"\", \"#/login\");\n                            window.location.reload();\n                        } \n                    }\n                > Login </Button>\n            </CardActions>\n        </Card>\n    );\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const notificationsStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        postion: \"fixed\",\n    },\n    button: {\n        border: \"2px solid white\",\n        backgroundColor: \"#42c6ff\",\n    }\n});","import { apiFetch } from \"../fetch\";\nimport DEV_API_EDGES from \"../constants\";\n\nexport const checkLogin = async (): Promise<boolean | null> => {\n  try {\n    const loginData = await apiFetch(`${DEV_API_EDGES.auth}/checkLogin`, \"post\");\n    return loginData['success'] === 'True';\n  } catch (e) {\n    return null;\n  }\n};\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst drawerWidth = 500;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        },\n        button: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.20rem\",\n        }, \n        loggedIn: {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n        },\n        appBar: {\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n            })\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n            })\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            color: \"#42C6FF\"\n        },\n        hide: {\n            display: \"none\"\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        drawerHeader: {\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: theme.spacing(0, 1),\n            // necessary for content to be below app bar\n            ...theme.mixins.toolbar,\n            justifyContent: \"flex-end\"\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n            }),\n            marginLeft: -drawerWidth\n        },\n        contentShift: {\n            transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n            }),\n            marginLeft: 0,\n        },\n        lensName:{\n            color:\"#EAFDFF\",\n            fontSize: \"1.5rem\", \n        },\n        header:{\n            fontSize: \"35px\",\n        }, \n        headerContent: {\n            width: \"100vw\",\n            display: \"flex\",  \n            justifyContent: \"space-between\",\n        },\n        close:{\n            color:\"#42C6FF\",\n        },\n        link: {\n            color: \"#42C6FF\", \n            textDecoration: \"none\"\n        }\n    })\n);","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport Home from \"@material-ui/icons/Home\";\n\nimport { Node } from \"types/CustomTypes\";\nimport GraphDisplay from \"../graphDisplay/GraphDisplay\";\nimport EngagementViewContent from \"./dynamicEngagementViewFeatures/DynamicEngagementViewFeatures\";\nimport { LoginNotification } from \"../reusableComponents\";\nimport { checkLogin } from \"../../services/login/checkLoginService\";\nimport { useStyles } from \"../graphDisplay/GraphDisplayStyles\";\n\ntype EngagementViewProps = {\n  setLens: (lens: string) => void;\n  curLens: string;\n  curNode: Node | null;\n};\n\nconst defaultEngagementUxState = (): EngagementUxState => {\n  return {\n    curLens: \"\",\n    curNode: null,\n    loggedIn: true,\n    renderedOnce: false,\n  };\n};\n\nexport default function EngagementView({\n  setLens,\n  curLens,\n  curNode,\n}: EngagementViewProps) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      {/* <CssBaseline /> */}\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, { [classes.appBarShift]: open })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            {/* // Menu Icon  */}\n            &#9776;\n          </IconButton>\n\n          <div className={classes.headerContent}>\n            <Typography variant=\"h5\" noWrap>\n              <b className={classes.header}> GRAPL </b>\n            </Typography>\n            <Link to=\"/\" className={classes.link}>\n              <Home />\n            </Link>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <Button onClick={handleDrawerClose}>\n            <KeyboardArrowLeftIcon className={classes.close} />\n          </Button>\n        </div>\n\n        <Divider />\n\n        <EngagementViewContent setLens={setLens} curNode={curNode} />\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n\n        <h3 className={classes.lensName}>\n          {/* selected lens name */}\n          {curLens || \"\"}\n        </h3>\n\n        <Typography paragraph></Typography>\n      </main>\n    </div>\n  );\n}\n\ntype EngagementUxState = {\n  curLens: string;\n  curNode: Node | null;\n  loggedIn: boolean;\n  renderedOnce: boolean;\n};\n\nexport const EngagementUx = () => {\n  const classes = useStyles();\n  const [state, setState] = React.useState(defaultEngagementUxState());\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged out\");\n        }\n        setState({\n          ...state,\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  const loggedIn = state.loggedIn;\n\n  return (\n    <>\n      <EngagementView\n        setLens={(lens: string) =>\n          setState({\n            ...state,\n            curLens: lens,\n          })\n        }\n        curLens={state.curLens}\n        curNode={state.curNode}\n      />\n      <>\n        <div className={classes.loggedIn}>\n          {!loggedIn ? <LoginNotification /> : \"\"}\n        </div>\n\n        <GraphDisplay\n          lensName={state.curLens}\n          setCurNode={(node: Node) => {\n            setState({\n              ...state,\n              curNode: node,\n            });\n          }}\n        />\n      </>\n    </>\n  );\n};\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport const dasboardStyles = makeStyles( (theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n        },\n        button: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.25rem\",\n        }, \n        welcome: {\n            width:\"70%\",\n            textAlign:\"center\",\n            backgroundColor: \"#373740\",\n            height: \"100vh\",\n            color: \"white\",\n        },\n        loggedIn: {\n            display:\"flex\", \n            justifyContent: \"flex-end\",\n        }, \n        nav: {\n            margin: \"2rem\",\n            width: \"30%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n        dashboard: {\n            display: \"flex\",\n            flexDirection: \"row\",\n        }, \n        link: {\n            color: \"white\",\n            textDecoration: \"none\",\n            padding: \".75rem\",\n            backgroundColor: \"#42C6FF\",\n            margin: \"1rem\",\n            textAlign: \"center\",\n            borderRadius: \".35rem\",\n            textTransform: \"uppercase\",\n            fontWeight: \"bolder\"\n        },\n        \n    })\n);","import  { apiFetch } from \"../fetch\";\nimport DEV_API_EDGES from \"../constants\";\n\nexport const getNotebookUrl = async (): Promise<string> => {\n  return apiFetch(`${DEV_API_EDGES.auth}/getNotebook`, \"post\")\n  .then(\n    (result) => result.success.notebook_url\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useAsync } from \"react-async-hook\";\nimport { checkLogin } from \"services/login/checkLoginService\";\nimport { Link } from \"react-router-dom\";\nimport { dasboardStyles } from \"./styles\";\nimport  GraplHeader  from \"../reusableComponents/graplHeader/GraplHeader\";\nimport  LoginNotification from \"../reusableComponents/notifications/Notifications\";\nimport { getNotebookUrl } from \"services/sagemakerNotebook/notebookService\";\n\nconst useStyles = dasboardStyles;\n\nexport default function Dashboard() {\n  const asyncSagemakerUrl = useAsync(getNotebookUrl, []);\n  const classes = useStyles();\n\n  const [state, setState] = useState({\n    loggedIn: true,\n    renderedOnce: false,\n  });\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged out\");\n        }\n        setState({\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  console.log(\"state - loggedin\", state.loggedIn);\n\n  const loggedIn = state.loggedIn;\n\n  const openSagemakerUrl = () => {\n    if (asyncSagemakerUrl.loading || !asyncSagemakerUrl.result) {\n      alert('sagemaker url not ready');\n      return;\n    }\n    \n    window.open(asyncSagemakerUrl.result);\n  };\n\n  return (\n    <>\n      <GraplHeader displayBtn={false} />\n\n      <div className={classes.dashboard}>\n        <section className={classes.nav}>\n          <Link to=\"/engagements\" className={classes.link}> Engagements </Link>\n          <Link to=\"/plugins\" className={classes.link}> Upload Plugin </Link>\n          <Button onClick={openSagemakerUrl} className={classes.link}> Open Engagement Notebook </Button>\n        </section>\n\n        <section className={classes.welcome}>\n          <div className={classes.loggedIn}>\n            {!loggedIn ? <LoginNotification /> : \"\"}\n          </div>\n\n          <h1> Welcome! </h1>\n        </section>\n      </div>\n    </>\n  );\n}\n","import { PluginPayload } from \"../../types/uploadPluginTypes\";\nimport DEV_API_EDGES from \"../constants\";\nimport {apiFetchWithBody} from '../fetch';\n\nexport const uploadFilesToDgraph = async (payload: PluginPayload ): Promise<boolean> => {\n\n    const dgraphPayload = JSON.stringify(payload);\n\n    const dgraphFileUpload = await apiFetchWithBody(`${DEV_API_EDGES.modelPluginEdge}/deploy`, \"post\", dgraphPayload);\n\n    const pluginFiles = await dgraphFileUpload;\n\n    return pluginFiles.success.Success;\n};","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles({\n            root: {\n                display: \"flex\",\n            },\n            formContainer: {\n                color: \"white\", \n                margin: \"1rem\",\n            },\n            btn: {\n                backgroundColor: \"#42C6FF\",\n                margin: \"0.25rem\",\n                padding: \"0.25rem\",\n                borderRadius: \"6px\",\n            },\n            loggedIn: {\n                display:\"flex\", \n                justifyContent: \"flex-end\",\n            }, \n            inputFiles: {\n                border: \"none\",\n                width: \"35vw\",\n            },\n            upload: {\n                display: \"flex\",\n            },\n            succMsg: {\n                color: \"#03dac6\",\n            }, \n            errMsg: {\n                color: \"#CF6679\",\n            }, \n            pluginTable: {\n                backgroundColor: \"#292929\",\n                margin: \"1em\",\n                width: \"50%\",\n                height: \"100%\",\n                boxShadow: \" 1.5px 1.5px #000000\",\n            }, \n            uploadFormContainer: {\n                backgroundColor: \"#292929\",\n                margin: \"1em\", \n                width: \"50%\",\n                height: \"100%\",\n                boxShadow: \"1.5px 1.5px #000000\",\n                display: \"flex\", \n            }, \n            uploadForm: {\n                fontFamily: \"Arial\",\n                display: \"flex\",\n                fontSize: \".75rem\",\n            }\n        }\n    )\n);","import React, { SyntheticEvent } from 'react';\nimport { Field, Form, Formik } from \"formik\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nimport { Event, UploadFormState, DirectoryUpload, MessageProps} from \"../../../types/uploadPluginTypes\"\nimport { uploadFilesToDgraph } from \"../../../services/uploadPlugin/uploadFilesToDgraph\";\nimport { useStyles } from \"../uploadPluginStyles\";\n\nconst readFile = async (file: Blob): Promise <string> => {\n    return await new Promise(\n        (resolve, reject) => {\n            const reader = new FileReader();\n            reader.addEventListener('load', (event: ProgressEvent<FileReader>) => {\n                if (event.target === null) {\n                    console.warn(\"onload event was null\");\n                    return;\n                } else {\n                    const fileRes = event.target.result;\n                    if (fileRes === null) {\n                        console.warn(\"Read pluginfile was null\");\n                        reject(null)\n                        return;\n                    } else {\n                        if (typeof(fileRes) === 'string') {\n                            resolve(fileRes);\n                        } else {\n                            resolve(new TextDecoder().decode(fileRes));\n                        }\n                    }\n                }\n            });\n            return reader.readAsText(file);\n        }\n    )\n}\n\nconst defaultUploadFormState = (): UploadFormState => {\n    return {curFiles: null, success: null}\n}\n\nconst Message = ({status}: MessageProps) => {\n    const classes = useStyles();\n    if (status === true) {\n        return(\n            <div className = {classes.succMsg}>Plugins Successfully Deployed!</div>\n        )\n    } else if (status === false){\n        return(\n            <div className = {classes.errMsg}>Upload Unsuccessful</div>\n        )\n    } else {\n        return (<div />)\n    }\n    \n}\n\nexport const UploadForm = () => {\n    const [state, setState] = React.useState(defaultUploadFormState());\n    const classes = useStyles();\n\n    return(\n        <div className = {classes.formContainer}>\n            <h4>UPLOAD DIRECTORY WITH PLUGINS:</h4>\n            <Formik\n                initialValues={{ \"filename\": \"\" }}\n                onSubmit={\n                    (event: Event) => { \n                        const fileMap = {} as any;\n                        const reads: Promise<void>[] = [];\n                        const {curFiles} = state;\n\n                        if (curFiles === null) {\n                            console.warn(\"Attempted to upload files without selecting any\");\n                            return\n                        }\n                        \n                        for(const f of curFiles){\n                            let fileRead = readFile(f).then((fileResult) => {\n                                // This any is because webkitRelativePath is not standard, and therefor\n                                // is not part of the File type\n                                const path = ((f as any).webkitRelativePath || (f as any).mozRelativePath);\n\n                                fileMap[path] = fileResult;\n                            });\n                            reads.push(fileRead);\n                        }\n                        let success = true;\n                        Promise.all(reads).then(() => {\n                            return uploadFilesToDgraph({plugins: fileMap});\n                        })\n                        .then((didSucceed) => {success = success && didSucceed;})\n                        .then(() => setState({...state, success}))\n                    }\n                }\n            >\n                <Form className = {classes.uploadForm}>\n                    {/* accept = property to restrict types, currently we accept ANY type */}\n                    <Field \n                        className = {classes.inputFiles}\n                        name=\"plugin\" \n                        directory=\"\" \n                        webkitdirectory=\"\"\n                        mozdirectory=\"\"\n                        type=\"file\" \n                        multiple placeholder=\"Plugin\" \n                        onChange={\n                            (event: SyntheticEvent<DirectoryUpload>) => {\n                                setState({\n                                    ...state,\n                                    curFiles: event.currentTarget.files\n                                })\n                            }\n                        }\n                    /> \n                    <Button className=\"submitBtn\"  type=\"submit\"><CloudUploadIcon className = {classes.btn}/></Button>\n                </Form>\n            </Formik>\n            <br />\n            <Message status = {state.success}/>\n        </div>\n    )\n}","import DEV_API_EDGES from '../constants';\nimport {apiFetch} from '../fetch';\n\nexport const getPluginList = async () => {\n    try { \n        const getPluginListReq = await apiFetch(`${DEV_API_EDGES.modelPluginEdge}/listModelPlugins`, \"POST\");\n\n        let pluginList: string[] = getPluginListReq.success.plugin_list;\n\n        return pluginList;\n    } catch (e) {\n        console.warn(\"Error retrieving pluginList\", e);\n        return [];\n    }\n}\n","import DEV_API_EDGES from '../constants';\nimport {apiFetchWithBody} from '../fetch';\n\nexport const deletePlugin = async ( pluginName: string ): Promise <boolean> => {\n    const body = JSON.stringify( {plugins_to_delete: [pluginName]} );\n    \n    try{ \n        const response = await apiFetchWithBody(`${DEV_API_EDGES.modelPluginEdge}/deleteModelPlugin`, \"post\", body);\n    \n        await response.success;\n        return true; \n    } catch (e){\n        console.warn(\"Error deleting plugin\", e);\n        return false; \n    }\n};\n","import React, { useEffect, useState } from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Button from \"@material-ui/core/Button\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { PluginTableState } from \"../../../types/uploadPluginTypes\"\n\nimport { getPluginList } from \"../../../services/uploadPlugin/getPluginList\";\nimport { deletePlugin } from \"../../../services/uploadPlugin/deletePlugin\";\nimport { useStyles } from \"../uploadPluginStyles\";\n\nconst defaultPluginTableState = (): PluginTableState => {\n    return {\n        rows: [],\n        toggle: true,\n    }\n}\n\nexport const PluginTable = () => {\n    const classes = useStyles();\n    const [state, setState] = React.useState(defaultPluginTableState());\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, newPage:number) => {\n        setPage(newPage);\n    }\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        console.log(\"Event\", event)\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    }\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, state.rows.length - page * rowsPerPage);\n\n    useEffect(\n        () => {\n            try{    \n                const interval = setInterval(async () => {\n                    await getPluginList()\n                    .then((rows) => {\n                        setState({\n                            toggle: state.toggle ,\n                            rows\n                        })\n                    });\n                }, 1000);\n                return () => clearInterval(interval);\n            } catch (e) {\n                console.error(\"Unable to retrieve plugin list\", e);\n            }\n        }, \n        [state.toggle]\n    )\n\n    return(\n        <>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow key = {\"plugin\"}>\n                            <TableCell align = \"left\">PLUGINS</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody aria-label = \"PluginTable\">\n                        {state.rows\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map(\n                                (pluginName: string) => {\n                                    return <TableRow key = { pluginName }> \n                                                <TableCell \n                                                    align = \"right\"> \n                                                    {pluginName} \n                                                    <Button onClick={\n                                                        () => { \n                                                            deletePlugin(pluginName)\n                                                            .then( \n                                                                () => {\n                                                                    setState({\n                                                                        ...state, \n                                                                        toggle: state.toggle && false\n                                                                    })\n                                                                    console.log(\"Plugin Deleted\");\n                                                                }\n                                                            )\n                                                        } \n                                                    }\n                                                >\n                                                <DeleteOutlinedIcon className = {classes.btn}/></Button>\n                                            </TableCell> \n                                        </TableRow>\n                                }\n                            )}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                    </TableBody>\n                </Table>\n\n                <TablePagination\n                    aria-label = \"pagination\"\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={state.rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </TableContainer>\n        </>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { GraplHeader } from \"../reusableComponents\";\n\nimport { UploadForm } from \"./utils/uploadPlugins\";\nimport { PluginTable } from \"./utils/pluginTable\";\nimport { checkLogin } from \"../../services/login/checkLoginService\";\nimport { LoginNotification } from \"../reusableComponents\";\n\nimport { useStyles } from \"./uploadPluginStyles\";\n\nconst UploadPlugin = () => {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    loggedIn: true,\n    renderedOnce: false,\n  });\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged Out\");\n        }\n        setState({\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  const loggedIn = state.loggedIn;\n\n  return (\n    <>\n      <GraplHeader displayBtn={true} />\n\n      <div className={classes.loggedIn}>\n        {!loggedIn ? <LoginNotification /> : \"\"}\n      </div>\n\n      <div className={classes.upload}>\n        <div className={classes.uploadFormContainer}>\n          <UploadForm />\n          <div id=\"message\" />\n        </div>\n        <div className={classes.pluginTable}>\n          <PluginTable />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadPlugin;\n","import Routes from \"./routes\";\n\nexport default Routes;\n","import React from \"react\";\nimport \"../components/login/LogIn.css\";\nimport { LogIn } from \"../components/login/Login\";\nimport { EngagementUx } from \"../components/engagementView/EngagementView\";\nimport Dashboard from \"../components/dashboard/Dashboard\";\nimport UploadPlugin from \"../components/uploadPlugin/UploadPluginView\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nexport default function Routes() {\n  console.log(\"Grapl loaded\");\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/login\" component={LogIn} />\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/plugins\" component={UploadPlugin} />\n        <Route exact path=\"/engagements\" component={EngagementUx} />\n      </Switch>\n    </HashRouter>\n  );\n}\n","import React from \"react\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n  console.log(\"Grapl loaded\");\n\n  return (\n    <>\n      <Routes />\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#373740',\n        }\n    }\n})\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ThemeProvider theme={darkTheme}>\n                <App />, \n            </ThemeProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}