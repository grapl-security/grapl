{"version":3,"sources":["Login.tsx","modules/GraphViz/calculations/node/nodeCalcs.tsx","modules/GraphViz/calculations/link/linkCalcs.tsx","modules/GraphViz/graphColoring/coloring.tsx","modules/GraphViz/graph/graph_traverse.tsx","modules/GraphViz/graphQL/expandScope.tsx","modules/GraphViz/graph/mergeGraphs.tsx","modules/GraphViz/graphQL/graphQLAdjacencyMatrix.tsx","modules/GraphViz/graph/labels.tsx","components/GraphViz.tsx","components/makeStyles/NodeTableStyles.tsx","components/NodeTable.tsx","components/makeStyles/EngagementViewContentStyles.tsx","components/EngagementViewContent.tsx","services/fetch.ts","services/loginService.ts","components/reusableComponents/GraplHeader.tsx","components/reusableComponents/Notifications.tsx","components/makeStyles/GraphVizStyles.tsx","components/EngagementView.tsx","components/makeStyles/DashboardStyles.tsx","services/notebookService.ts","components/Dashboard.tsx","modules/uploads/plugins/useStyles.tsx","modules/uploads/plugins/apiRequests.tsx","modules/uploads/plugins/uploadPlugins.tsx","modules/uploads/plugins/pluginTable.tsx","components/UploadPlugin.tsx","routes/index.ts","routes/routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","valErrorMsg","marginLeft","color","fontSize","validationSchema","Yup","shape","userName","required","password","LogIn","_","classes","React","useState","loginFailed","state","setState","className","initialValues","onSubmit","values","a","sha256WithPepper","login","window","history","replaceState","location","reload","console","log","errors","touched","name","type","placeholder","sha256","message","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join","username","hashed","i","fetch","method","body","JSON","stringify","headers","credentials","res","json","calcNodeRiskPercentile","_nodeRisk","_allRisks","nodeRisk","risk","allRisks","n","sort","undefined","length","riskIndex","Math","floor","findNode","id","nodes","node","calcLinkRiskPercentile","link","Graph","linkRisk","srcNode","source","dstNode","target","error","srcRisk","dstRisk","round","calcLinkRisk","BKDRHash","str","hash","MAX_SAFE_INTEGER","parseInt","charCodeAt","calcNodeRgb","colorHash","nodeType","rgb","percentToColor","percentile","calcLinkColor","mapGraph","f","visited","Set","mapEdgeProps","edgeName","neighbor","_mapGraph","has","uid","add","mapEdges","prop","Object","prototype","hasOwnProperty","call","maybeNeighbor","isArray","builtins","unpackPluginNodes","predicates","edge_name","dgraph_type","pluginNode","keys","forEach","key","retrieveGraph","lens","query","expandScope","then","data","lens_scope","lensWithScope","debug","scope","lensName","mergeNodes","x","y","merged","mapNodeProps","mergeGraphs","curGraph","update","links","outputGraph","updated","Map","set","newNode","get","label","newLink","newLinkSource","newLinkTarget","getNodeType","t","node_type","warn","randomInt","min","max","random","graphQLAdjacencyMatrix","inputGraph","nodeMap","traverseNeighbors","callback","fromNode","toNode","push","traverseNodes","nodeLabel","_node","process_name","process_id","hostname","file_path","external_ip","lens_name","getNodeLabel","strippedNode","analyzer_names","risks","risk_score","analyzer_name","edge","_neighbor","vizNode","HSL2RGB","H","S","L","q","p","o","ColorHash","options","hsl","hueRanges","range","apply","LS","lightness","saturation","param","concat","this","hue","updateGraph","curLensName","mergeUpdate","graphData","catch","e","GraphDisplay","setCurNode","intervalMap","defaultGraphDisplayState","forceRef","useRef","useEffect","current","d3Force","d3","abs","vx","vy","interval","setInterval","clearInterval","enableNodeDrag","linkDirectionalParticles","linkDirectionalParticleWidth","linkRiskPercentile","calcLinkParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleSpeed","onNodeClick","event","linkDirectionalArrowLength","linkWidth","linkDirectionalArrowRelPos","riskPercentile","calcLinkDirectionalArrowRelPos","linkCanvasObjectMode","linkCanvasObject","ctx","start","end","textPos","assign","c","relLink","maxTextLength","sqrt","pow","LABEL_NODE_MARGIN","textAngle","atan2","PI","mapLabel","font","measureText","width","textWidth","bckgDimensions","save","translate","rotate","fillStyle","fillRect","textAlign","textBaseline","fillText","restore","nodeCanvasObject","globalScale","NODE_R","nodeSize","beginPath","arc","nodeColors","riskColor","fill","nodeRbg","ref","root","nodeTable","minWidth","tableHeader","backgroundColor","nodeTableData","NodeTable","hidden","displayNode","propName","includes","Date","toLocaleString","TableContainer","Table","styles","TableHead","TableRow","TableCell","align","innerTable","TableBody","entries","entry","value","node_key","button","title","icon","margin","expand","header","display","table","pagination","SelectLens","props","component","Button","onClick","setLens","lens_type","score","ToggleLensTable","toggled","lenses","first","offset","page","setPage","rowsPerPage","setRowsPerPage","getLenses","response","handleChangePage","handleChangeRowsPerPage","TablePagination","aria-label","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","Number","pagedTable","Divider","jres","NodeDetails","ToggleNodeTable","curNode","toggle","EngagementViewContent","apiFetch","urlSlug","Headers","Error","checkLogin","loginData","justifyContent","textDecoration","GraplHeader","displayBtn","AppBar","position","Toolbar","Typography","variant","to","maxWidth","postion","border","LoginNotification","Card","CardActionArea","CardContent","CardActions","size","padding","loggedIn","alignItems","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","flexGrow","contentShift","headerContent","close","EngagementView","curLens","open","setOpen","clsx","IconButton","noWrap","Drawer","anchor","paper","paragraph","EngagementUx","renderedOnce","dasboardStyles","welcome","height","nav","flexDirection","dashboard","borderRadius","textTransform","fontWeight","getNotebookUrl","result","success","notebook_url","Dashboard","asyncSagemakerUrl","useAsync","loading","alert","formContainer","btn","inputFiles","upload","succMsg","errMsg","pluginTable","boxShadow","uploadFormContainer","uploadForm","fontFamily","getPluginList","pluginList","plugin_list","deletePlugin","pluginName","plugins_to_delete","uploadFilesToDgraph","payload","Success","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","fileRes","TextDecoder","decode","readAsText","Message","status","UploadForm","curFiles","fileMap","reads","fileRead","fileResult","path","webkitRelativePath","mozRelativePath","all","plugins","didSucceed","directory","webkitdirectory","mozdirectory","multiple","onChange","currentTarget","files","PluginTable","rows","emptyRows","style","colSpan","newPage","UploadPlugin","Routes","exact","App","Boolean","match","darkTheme","createMuiTheme","palette","primary","main","rootElement","document","getElementById","ReactDOM","render","StrictMode","ThemeProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9d7f0ab.chunk.js","sourcesContent":["import React from 'react';\nimport * as Yup from \"yup\";\nimport {Field, Form, Formik} from \"formik\";\nimport './LogIn.css';\nimport {LoginProps} from '../src/modules/GraphViz/CustomTypes';\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(\n  (theme: Theme) =>\n      createStyles({\n        valErrorMsg:{\n          marginLeft: \".8rem\",\n          color: \"red\",\n          fontSize: \".75rem\"\n        }\n      }\n  )\n);\n\nconst validationSchema = Yup.object().shape({\n  userName: Yup.string().required(\"Username Required\"),\n  password: Yup.string().required(\"Password Required\")\n})\n\nexport const LogIn = (_: LoginProps) => {\n  const classes = useStyles()\n  const [state, setState] = React.useState({\n    loginFailed: false\n  })\n  return (\n    <div className = \"backgroundImage\">\n      <div className=\"grapl\"> Grapl </div>\n      <div className = \"formContainer\">\n      <Formik\n        initialValues={{ \n          userName: \"\", \n          password: \"\" \n        }}\n        validationSchema = {validationSchema}\n        onSubmit={ async values => {\n          const password = await sha256WithPepper(\n            values.userName, values.password\n          );\n          \n          const loginSuccess = await login(values.userName, password);\n          \n          if (loginSuccess === true) {\n            window.history.replaceState('#/login', \"\", \"#/\")\n            window.location.reload();\n            console.log(\"Logged In\")\n          } else {\n            setState({\n              ...state,\n              loginFailed: true\n            })\n          }\n        }}\n      >\n\n      {({ errors, touched }) => (\n        <Form>\n\n            <Field name=\"userName\" type=\"text\" placeholder=\"Username\"  />\n            {touched.userName && errors.userName && <div className = {classes.valErrorMsg}>{errors.userName}</div>}\n        \n            <Field name=\"password\" type=\"password\" placeholder=\"Password\"/> <br/>\n            {touched.password && errors.password && <div className = {classes.valErrorMsg}>{errors.password}</div>}\n\n            <button className=\"submitBtn\"  type=\"submit\">Submit</button>\n\n            {state.loginFailed && <div className= {classes.valErrorMsg}>Unsuccessful Login</div>}\n          </Form>\n        )}\n      </Formik>\n        \n      </div>\n    </div>\n  );\n}\n\nasync function sha256(message: string) {\n  // encode as UTF-8\n  const msgBuffer = new TextEncoder().encode(message);\n\n  // hash the message\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n\n  // convert ArrayBuffer to Array\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n  // convert bytes to hex string\n  return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n}\n\n\nconst sha256WithPepper = async (username: string, password: string) => {\n  // The pepper only exists to prevent rainbow tables for extremely weak passwords\n  // Client side hashing itself is only to prevent cases where the password is\n  // exposed before it makes it into the password database\n  const pepper = \"f1dafbdcab924862a198deaa5b6bae29aef7f2a442f841da975f1c515529d254\";\n  let hashed = await sha256(password + pepper + username);\n\n  for (let i = 0; i < 5000; i++) {\n      hashed = await sha256(hashed)\n  }\n  return hashed\n};\n\nconst login = async (username: string, password: string) => {\n      try {\n          console.log(`logging in via /login`)\n          const res = await fetch(`/prod/auth/login`, {\n              method: 'post',\n              body: JSON.stringify({\n                  'username': username,\n                  'password': password\n              }),\n              headers: {\n                  'Content-Type': 'application/json',\n              },\n              credentials: 'include',\n          });\n          \n          const body = await res.json();\n\n          return body['success'] === 'True';\n        } catch (e) {\n          console.log(\"Login Error\", e);\n          return false\n      }\n    };\n\nexport default LogIn;\n","import {VizGraph, VizNode} from '../../CustomTypes';\n\nexport const calcNodeRiskPercentile = (_nodeRisk: number | {risk: number}, _allRisks: any) => {\n    let nodeRisk = _nodeRisk;\n    if (typeof _nodeRisk === 'object') {\n        nodeRisk = _nodeRisk.risk;\n    }\n\n    const allRisks = _allRisks\n        .map((n: any) => n || 0)\n        .sort((a: number, b: number) => a - b);\n\n    if (nodeRisk === undefined || nodeRisk === 0 || allRisks.length === 0) {\n        return 0\n    }\n\n    let riskIndex = 0;\n    for (const risk of allRisks) {\n        if (nodeRisk >= risk) {\n            riskIndex += 1;\n        }\n    }\n\n    return Math.floor((riskIndex / allRisks.length) * 100)\n};\n\n\nexport const nodeSize = (node: VizNode, Graph: VizGraph) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile >= 75) {\n        return 6\n    } else if (riskPercentile >= 25) {\n        return 5\n    } else {\n        return 4\n    }\n};\n","import { calcNodeRiskPercentile } from '../node/nodeCalcs'; \nimport { LinkType, VizNode, VizGraph } from '../../CustomTypes';\n\n\nconst findNode = (id: number, nodes: VizNode[]) => {\n    for (const node of (nodes || [])) {\n        if (node.id === id) {\n            return node\n        }\n    }\n    return null\n};\n\nexport const calcLinkRisk = (link: LinkType, Graph: VizGraph) => {\n    // console.log(\"LINK\", link)\n    let srcNode = \n        findNode(link.source as any, Graph.nodes) ||\n        findNode(link.source.name as any, Graph.nodes);\n    let dstNode = \n        findNode(link.target as any, Graph.nodes) ||\n        findNode(link.target.name as any, Graph.nodes);\n\n    if (!srcNode || !dstNode) {\n        console.error(\"Missing srcNode/dstNode\", srcNode, link.source, dstNode, Graph.nodes);\n        return 0;\n    }\n\n    const srcRisk = srcNode.risk || 0;\n    const dstRisk = dstNode.risk || 0;\n\n    return Math.round((srcRisk + dstRisk) / 2)\n};\n\nexport const calcLinkDirectionalArrowRelPos = (link: LinkType, Graph: VizGraph) => {\n    const node = \n    // findNode(link.target, Graph.nodes) || \n        findNode(link.target.name, Graph.nodes);\n\n    if (node === null || node.risk === 0) {\n        return 1.0\n    }\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        return 1.0\n    }\n\n    if (riskPercentile >= 75) {\n        return 0.95\n    } else if (riskPercentile >= 50) {\n        return 0.9\n    } else if (riskPercentile >= 25) {\n        return 0.85\n    } else {\n        return 1.0\n    }\n};\n\nexport const calcLinkRiskPercentile = (link: LinkType, Graph: VizGraph) => {\n    const linkRisk = calcLinkRisk(link, Graph);\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    return calcNodeRiskPercentile(linkRisk, nodes);\n};\n\nexport const calcLinkParticleWidth = (link: LinkType, Graph:VizGraph) => {\n    const linkRiskPercentile = calcLinkRiskPercentile(link, Graph);\n    if (linkRiskPercentile >= 75) {\n        return 5\n    } else if (linkRiskPercentile >= 50) {\n        return 4\n    } else if (linkRiskPercentile >= 25) {\n        return 3\n    } else {\n        return 2\n    }\n};\n","import { calcNodeRiskPercentile } from '../calculations/node/nodeCalcs';\nimport { calcLinkRiskPercentile } from '../calculations/link/linkCalcs';\nimport { LinkType, VizGraph, VizNode } from '../CustomTypes'\nimport { ColorHash } from '../../../components/GraphViz';\n\nexport const BKDRHash = (str: string) => {\n    const seed = 131;\n    const seed2 = 137;\n    let hash = 0 as number;\n    // make hash more sensitive for short string like 'a', 'b', 'c'\n    str += 'x';\n    // Note: Number.MAX_SAFE_INTEGER equals 9007199254740991\n    const MAX_SAFE_INTEGER = parseInt(9007199254740991 / seed2 as any) as any;\n    for (let i = 0; i < str.length; i++) {\n        if (hash > MAX_SAFE_INTEGER) {\n            hash = parseInt(hash / seed2 as any);\n        }\n        hash = hash * seed + str.charCodeAt(i);\n    }\n    return hash;\n};\n\n//# TODO: Add custom coloring for each node\nexport const calcNodeRgb = (node: VizNode, colorHash: ColorHash) => {\n    if (node.nodeType === 'Process') {\n        return [31, 185, 128]\n    } else if (node.nodeType === 'File') {\n        return [177, 93, 255]\n    } \n    \n    // else if (node.nodeType === 'Lens'){\n    //     return []\n    // } else if(node.nodeType === 'IpPort'){\n    //     return []\n    // } else if(node.nodeType === 'IpConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessInboundConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessOutboundConnection'){\n    //     return []\n    // } \n    \n    else{\n        return colorHash.rgb(node.nodeType)\n    }\n}\n\n\nexport const percentToColor = (percentile: number) => {\n    const hue = (100 - percentile) * 40 / 100;\n\n    return `hsl(${hue}, 100%, 50%)`;\n};\n\nexport const calcLinkColor = (link: LinkType, Graph: VizGraph) => {\n    const risk = calcLinkRiskPercentile(link, Graph);\n    // Default link color if no risk\n    if (risk === 0) {\n        return 'white'\n    }\n    return percentToColor(risk);\n};\n\n\nexport const riskColor = (node: VizNode, Graph: VizGraph, colorHash: ColorHash) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        const nodeColors = calcNodeRgb(node, colorHash);\n        return `rgba(${nodeColors[0]}, ${nodeColors[1]}, ${nodeColors[2]}, 1)`;\n    }\n\n    return percentToColor(riskPercentile);\n};\n\n\n","import { Node } from \"../CustomTypes\";\n\nconst _mapGraph = (node: Node, visited: Set<string>, f:(node:Node, prop:string, neighbor: Node) => void) => {\n    mapEdgeProps(node, (edgeName: string, neighbor:Node) => {\n        if (visited.has(node.uid + edgeName + neighbor.uid)) {\n            return\n        }\n\n        visited.add(node.uid + edgeName + neighbor.uid);\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f)\n    })\n};\n\nexport const mapGraph = (node:Node, f:(node:Node, prop:string, neighbor: Node) => void) => {\n    const visited: Set<string> = new Set();\n    mapEdgeProps(node, (edgeName:string , neighbor:Node) => {\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f)\n    })\n};\n\n// type fType = (prop:string, neighbor: Node) => void)\n// Given a node, call 'f' on any of its neighbors\nexport const mapEdges = (node: Node, f: (prop:string, neighbor: Node) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const maybeNeighbor = (node as any)[prop];\n            if(Array.isArray(maybeNeighbor)) {\n                for (const neighbor of maybeNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            } else {\n                if (maybeNeighbor && maybeNeighbor.uid !== undefined) {\n                    f(prop, maybeNeighbor)\n                }\n            }\n        }\n    }\n};\n\nexport const mapEdgeProps = (node: Node, f: (prop:string, neighbor: Node) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const maybeNeighbor = (node as any)[prop];\n            if(Array.isArray(maybeNeighbor)) {\n                for (const neighbor of maybeNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            } else {\n                if (maybeNeighbor && maybeNeighbor.uid !== undefined) {\n                    f(prop, maybeNeighbor)\n                }\n            }\n        }\n    }\n};\n\nexport const traverseNodes = (node: Node, callback: (node: Node) => void) => {\n    callback(node);\n    mapEdges(node, (_, neighbor) => {\n        traverseNodes(neighbor, callback);\n    })\n}\n\nexport const traverseNeighbors = (node: Node, callback: (node:Node, prop:string, neighbor: Node) => void) => {\n    mapEdges(node, (edgeName: string, neighbor: Node) => {\n        callback(node, edgeName, neighbor);\n\n        traverseNeighbors(neighbor, callback);\n    })\n}\n\n","import {BaseNode, LensScopeResponse} from '../../GraphViz/CustomTypes'\nimport {mapGraph} from \"../graph/graph_traverse\";\n\nconst builtins = new Set([\n    'Process',\n    'File',\n    'IpAddress',\n    'Asset',\n    'Risk',\n    'IpConnections',\n    'ProcessInboundConnections',\n    'ProcessOutboundConnections',\n])\n\nconst unpackPluginNodes = (nodes: BaseNode[]) => {\n    for (const node of nodes) {\n        if (!(node as any).predicates) {\n            continue\n        }\n        mapGraph(node, (node, edge_name, neighbor) => {\n            if ((node as any).predicates) {\n                if(!builtins.has((node as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(node as any).predicates};\n                    delete (node as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (node as any)[key] = pluginNode[key]; });\n                }\n            }\n\n            if ((neighbor as any).predicates) {\n                if(!builtins.has((neighbor as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(neighbor as any).predicates};\n                    delete (neighbor as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (neighbor as any)[key] = pluginNode[key]; });\n                }\n            }\n        })\n\n    }\n}\n\nexport const retrieveGraph = async (lens: string): Promise<(LensScopeResponse & BaseNode)> => {\n    const query = expandScope(lens);\n    \n    const res = await fetch(`/prod/graphQlEndpoint/graphql`,\n        {\n            method: 'post',\n            body: JSON.stringify({ query }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        })\n        .then(res => res.json())\n        .then(res => {\n            if(res.errors){\n                console.log(\"graphql query failed in retrieve graph, expand scope ln 63: \", res.errors)\n            }\n            console.log('retrieveGraph res', res);\n            return res\n        })\n        .then((res) => res.data)\n        .then((res) => res.lens_scope);\n\n    const lensWithScope = await res;\n\n    console.debug('LensWithScope: ', lensWithScope);\n\n    unpackPluginNodes(lensWithScope.scope);\n\n    return lensWithScope;\n};\n\nexport const expandScope = (lensName: string) => {\n    console.log(\"expanding scope for: \", lensName);\n\n    const query = `\n    {\n        lens_scope(lens_name: \"${lensName}\") {\n            uid,\n            node_key,\n            lens_name,\n            lens_type,\n            dgraph_type,\n            scope {\n                ... on Process {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    process_name, \n                    process_id,\n                    children {\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n            \n                ... on Asset {\n                    uid, \n                    node_key, \n                    dgraph_type,\n                    hostname,\n                    asset_ip{\n                        ip_address\n                    }, \n                    asset_processes{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    },\n                    files_on_asset{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        file_path\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n\n                ... on File {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n\n                ... on PluginType {\n                    predicates,\n                }\n            }\n        }\n    }\n`;\n\n    return query;\n}\n","import {mapNodeProps} from '../../../../src/components/GraphViz';\nimport {Node, MergeGraphType} from '../CustomTypes'; \n\n// merges y into x, returns true if update occurred\nconst mergeNodes = (x: Node, y: Node) => {\n    let merged = false;\n    mapNodeProps(y, (prop: string) => {\n        if (!Object.prototype.hasOwnProperty.call(x, prop)) {\n            if ((x as any)[prop] !== (y as any)[prop]) {\n                (x as any)[prop] = (y as any)[prop];\n                merged = true;\n            }\n        }\n    });\n\n    return merged;\n};\n\nexport const mergeGraphs = (curGraph: MergeGraphType, update: MergeGraphType): MergeGraphType | null => {\n    // Merges two graphs into a new graph\n    // returns 'null' if there are no updates to be made\n\n    if (!update.nodes && !update.links) {\n        // empty update\n        return null\n    }\n\n    const outputGraph: MergeGraphType = {nodes: [], links: []};\n\n    let updated = false;\n\n    const nodes = new Map();\n    const links = new Map();\n\n    for (const node of curGraph.nodes) {\n        nodes.set(node.uid, node)\n    }\n\n    for (const newNode of update.nodes) {\n        const node = nodes.get(newNode.uid);\n        if (node) {\n            if (mergeNodes(node, newNode)) {\n                updated = true;\n            }\n        } else {\n            nodes.set(newNode.uid, newNode);\n            console.debug('new node added ', newNode);\n            updated = true;\n        }\n    }\n// #TODO: console.log on link.source, check to see if it's an object or not. It should never be an object\n// this should only be a string / an int. At some point, it was getting sent as an object\n    for (const link of curGraph.links) {\n        if (link) {\n            const source = link.source.uid || link.source;\n            const target = link.target.uid || link.target;\n            links.set(\n                source + link.label + target,\n                link,\n            )\n        }\n    }\n\n    for (const newLink of update.links) {\n        const newLinkSource =  newLink.source || newLink.source;\n        const newLinkTarget =  newLink.target || newLink.target;\n        const link = links.get(newLinkSource + newLink.label + newLinkTarget);\n        if (!link) {\n            console.debug('newlink', newLink)\n            links.set(newLink.source + newLink.label + newLink.target, newLink);\n            updated = true;\n        }\n    }\n\n    outputGraph.nodes = Array.from(nodes.values());\n    outputGraph.links = Array.from(links.values());\n    if (updated) {\n        return outputGraph;\n    } else {\n        return null;\n    }\n}","import { traverseNodes, traverseNeighbors, mapEdges } from \"../graph/graph_traverse\"\nimport { getNodeLabel } from '../graph/labels';\nimport {LensScopeResponse, BaseNode} from \"../../GraphViz/CustomTypes\"\n\ninterface IVizNode {\n    uid: number,\n    name: number,\n    id: number, \n    nodeType: string,\n    nodeLabel: string,\n    x: number,\n    y: number,\n}\n\ninterface VizProcessNode extends IVizNode {\n    process_id: number,\n    process_name: string,\n    created_timestamp: number, \n    terminate_time: number,\n    image_name: string, \n    arguments: string,\n}\n\nexport interface File extends IVizNode {\n    file_name: string,\n    file_path: string,\n    file_extension: string,\n    file_mime_type: string,\n    file_size: number,\n    file_version: string, \n    file_description: string,\n    file_product: string,\n    file_company: string, \n    file_directory: string,\n    file_inode: number,\n    file_hard_links: string, \n    signed: boolean,\n    signed_status: string, \n    md5_hash: string,\n    sha1_hash: string,\n    sha256_hash: string,\n}\n\nexport interface IpConnections extends IVizNode {\n    src_ip_addr: string,\n    src_port: string,\n    dst_ip_addr: string,\n    dst_port: string,\n    created_timestamp: number,\n    terminated_timestamp: number,\n    last_seen_timestamp: number,\n}\ninterface VizAssetNode extends IVizNode {\n    hostname: string,\n}\n\ninterface VizLensNode extends IVizNode {\n    lens_name: string,\n    lens_type: string, \n}\n\ntype VizDynamicNode = IVizNode;\n\ntype VizNode = VizProcessNode | VizAssetNode | VizLensNode | VizDynamicNode;\n\ntype VizLink = {\n    source: number,\n    label: string,\n    target: number, \n}\n\ntype AdjacencyMatrix = {\n    nodes: VizNode[],\n    links: VizLink[]\n}\n\n\nconst getNodeType = (node: BaseNode) => {\n    const t = node.dgraph_type || node.node_type;\n\n    if (t) {\n        if (Array.isArray(t)) {\n            return t[0]\n        }\n        return t\n    }\n\n    console.warn('Unable to find type for node ', node);\n    return 'Unknown';\n};\n\nfunction randomInt(min: number, max: number) // min and max included\n{\n    let randomNum: number = Math.floor(Math.random() * (max - min + 1) + min);\n    return randomNum;\n}\n\n\nexport const graphQLAdjacencyMatrix = (inputGraph: (LensScopeResponse & BaseNode)): AdjacencyMatrix => {\n\n    const nodes: VizNode[] = []; \n    const links: VizLink[] = [];\n\n    const nodeMap: Map<number, VizNode> = new Map();\n\n    traverseNeighbors(inputGraph, \n        (fromNode: BaseNode, edgeName: string, toNode: BaseNode) => {\n            if(edgeName !== 'scope'){\n                \n                if(getNodeType(fromNode) === 'Unknown'){\n                    return;\n                }\n\n                if(getNodeType(toNode) === 'Unknown'){\n                    return;\n                }\n\n                if(getNodeType(fromNode) === 'Risk'){\n                    return;\n                }\n\n                if(getNodeType(toNode) === 'Risk'){\n                    return;\n                }\n                \n                links.push({\n                    source: fromNode.uid,\n                    label: edgeName, \n                    target: toNode.uid\n                })\n        } \n    })\n\n    traverseNodes(inputGraph, (node: BaseNode) => {\n        const nodeType = getNodeType(node);\n\n        if(nodeType === 'Unknown'){\n            return;\n        }\n\n        if(nodeType === 'Risk'){\n            return; \n        }\n\n        const nodeLabel = getNodeLabel(nodeType, node);\n\n        const strippedNode = {...node};\n\n        strippedNode.risk = strippedNode.risk || 0;\n        strippedNode.analyzer_names = strippedNode.analyzer_names || \"\";\n\n        for(const risk of node.risks || []){\n            strippedNode.risk += risk.risk_score || 0;\n            if (strippedNode.analyzer_names && risk.analyzer_name) {\n                // #TODO: Link to the analyzer details\n                strippedNode.analyzer_names += \", \"\n            }\n            strippedNode.analyzer_names += risk.analyzer_name || \"\";\n        }\n\n        mapEdges(node, (edge: string, _neighbor: BaseNode) => {\n            // The stripped node is being converted to another type, so we can cast\n            // to any here\n            (strippedNode as any)[edge] = undefined;\n        })\n\n        const vizNode = {\n            name: node.uid,\n            x: 200 + randomInt(1, 5),\n            y: 150 + randomInt(1, 5),\n            ...strippedNode,\n            id: node.uid,\n            nodeType,\n            nodeLabel,\n        };\n\n        nodeMap.set(node.uid, vizNode);\n    })\n\n    for (const vizNode of (nodeMap.values() as any)) {\n        nodes.push(vizNode)\n    }\n\n    return {\n        nodes, \n        links\n    }\n}\n","import { Node }  from '../CustomTypes'\n\nconst getNodeLabel = (nodeType: string, node: Node) => {\n    console.log('nodetype', nodeType);\n\n    const _node = node as any; // ignore-any\n\n    switch(nodeType) {\n        case \"Process\": return _node.process_name || _node.process_id || 'Process';\n        case \"Asset\": return _node.hostname || 'Asset';\n        case \"File\": return _node.file_path || 'File';\n        case \"IpAddress\": return _node.external_ip || 'IpAddress';\n        case \"Lens\":  return _node.lens_name || 'Lens';\n        default: return nodeType || '';\n    }\n};\n\nconst mapLabel = (label: string) => {\n    if (label === 'children') {\n        return 'executed'\n    }\n    return label\n};\n\nexport { mapLabel, getNodeLabel }","// @ts-nocheck\nimport React, { useEffect, useRef } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport * as d3 from \"d3\";\nimport { BKDRHash, riskColor, calcNodeRgb , calcLinkColor} from \"../modules/GraphViz/graphColoring/coloring.tsx\";\nimport { retrieveGraph } from '../modules/GraphViz/graphQL/expandScope.tsx';\nimport { mapLabel } from '../modules/GraphViz/graph/labels.tsx';\nimport { nodeSize } from '../modules/GraphViz/calculations/node/nodeCalcs.tsx'\nimport { calcLinkDirectionalArrowRelPos, calcLinkParticleWidth  } from '../modules/GraphViz/calculations/link/linkCalcs.tsx'\nimport {mergeGraphs} from '../modules/GraphViz/graph/mergeGraphs.tsx'\nimport {graphQLAdjacencyMatrix} from '../modules/GraphViz/graphQL/graphQLAdjacencyMatrix.tsx'\nimport { Node, LinkType, GraphType, ColorHashOptions } from \"../modules/GraphViz/CustomTypes\"\n\ntype ColorHashOptions = {\n    lightness: number,\n    saturation: number,\n    hue: number,\n    hash: BKDRHash,\n}\n\n/**\n * Convert HSL to RGB\n *\n * @see {@link http://zh.wikipedia.org/wiki/HSL和HSV色彩空间} for further information.\n * @param {Number} H Hue ∈ [0, 360)\n * @param {Number} S Saturation ∈ [0, 1]\n * @param {Number} L Lightness ∈ [0, 1]\n * @returns {Array} R, G, B ∈ [0, 255]\n */\nconst HSL2RGB = (H: number, S: number, L: number) => {\n    H /= 360;\n\n    const q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n    const p = 2 * L - q;\n\n    return [H + 1 / 3, H, H - 1 / 3].map((color) => {\n        if (color < 0) {\n            color++;\n        }\n        if (color > 1) {\n            color--;\n        }\n        if (color < 1 / 6) {\n            color = p + (q - p) * 6 * color;\n        } else if (color < 0.5) {\n            color = q;\n        } else if (color < 2 / 3) {\n            color = p + (q - p) * 6 * (2 / 3 - color);\n        } else {\n            color = p;\n        }\n        return Math.round(color * 255);\n    });\n};\n\nconst isArray = (o: Object) => {\n    return Object.prototype.toString.call(o) === '[object Array]';\n};\n\n/**\n * Color Hash Class\n *\n * @class\n */\n\nexport class ColorHash {\n    constructor(options: ColorHashOptions | undefined) {\n        options = options || {};\n\n        const LS = [options.lightness, options.saturation].map((param) => {\n            param = param || [0.35, 0.5, 0.65]; // note that 3 is a prime\n            return isArray(param) ? param.concat() : [param];\n        });\n    \n        this.L = LS[0];\n        this.S = LS[1];\n    \n        if (typeof options.hue === 'number') {\n            options.hue = {min: options.hue, max: options.hue};\n        }\n        if (typeof options.hue === 'object' && !isArray(options.hue)) {\n            options.hue = [options.hue];\n        }\n        if (typeof options.hue === 'undefined') {\n            options.hue = [];\n        }\n        this.hueRanges = options.hue.map(function (range: number) {\n            return {\n                min: typeof range.min === 'undefined' ? 0 : range.min,\n                max: typeof range.max === 'undefined' ? 360 : range.max\n            };\n        });\n    \n        this.hash = options.hash || BKDRHash;\n    } \n    /**\n     * Returns the hash in [h, s, l].\n     * Note that H ∈ [0, 360); S ∈ [0, 1]; L ∈ [0, 1];\n     *\n     * @param {String} str string to hash\n     * @returns {Array} [h, s, l]\n     */\n    hsl = (str: string) => {\n        let H, S, L;\n        let hash = this.hash(str);\n    \n        if (this.hueRanges.length) {\n            const range = this.hueRanges[hash % this.hueRanges.length];\n            const hueResolution = 727; // note that 727 is a prime\n            H = ((hash / this.hueRanges.length) % hueResolution) * (range.max - range.min) / hueResolution + range.min;\n        } else {\n            H = hash % 359; // note that 359 is a prime\n        }\n        hash = parseInt(hash / 360 as any);\n        S = this.S[hash % this.S.length];\n        hash = parseInt(hash / this.S.length as any);\n        L = this.L[hash % this.L.length];\n    \n        return [H, S, L];\n    }\n\n    /**\n     * Returns the hash in [r, g, b].\n     * Note that R, G, B ∈ [0, 255]\n     *\n     * @param {String} str string to hash\n     * @returns {Array} [r, g, b]\n     */\n    rgb = (str: string) => {\n        const hsl = this.hsl(str);\n        return HSL2RGB.apply(this, hsl);\n    };\n}\n\n\nexport const mapNodeProps = (node: Node, f: (string) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            if (Array.isArray(node[prop])) {\n                if (node[prop].length > 0) {\n                    if (node[prop][0].uid === undefined) {\n                        f(prop)\n                    }\n                }\n            } else {\n                f(prop)\n            }\n        }\n    }\n};\n\ntype GraphState = {\n    curLensName: LensType[], \n    graphData: GraphType[]\n}\n\nconst updateGraph = async (\n    lensName: string, \n    state: GraphState, \n    setState: (state: GraphState) => void,\n) => {\n    if (!lensName) {\n        console.log('Attempted to fetch empty lensName')\n        return;\n    }\n\n    const curLensName = state.curLensName;\n    await retrieveGraph(lensName)\n        .then(async (scope) => {\n            const update = graphQLAdjacencyMatrix(scope);\n            console.debug('state: ', state);\n            console.debug('update', update);\n\n            const mergeUpdate = mergeGraphs(state.graphData, update);\n            if (mergeUpdate !== null) {\n                if (curLensName === lensName) {\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: mergeUpdate,\n                    })\n                } else {\n                    console.log(\"Switched lens, updating graph\", state.curLensName, 'ln', lensName);\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: update,\n                    })\n                }\n            }\n        })\n        .catch((e) => console.error(\"Failed to retrieveGraph \", e))\n}\n\ntype GraphDisplayProps = {\n    lensName: string | null,\n    setCurNode: (string) => void,\n}\n\ntype GraphDisplayState = {\n    graphData: AdjacencyMatrix,\n    curLensName: string | null,\n    intervalMap: any,\n}\n\nconst defaultGraphDisplayState = (lensName: string): GraphDisplayState => {\n    return {\n        graphData: {nodes: [], links: []},\n        curLensName: lensName,\n        intervalMap: {},\n    }\n}\n\nconst GraphDisplay = ({lensName, setCurNode}: GraphDisplayProps) => {\n    const [state, setState] = React.useState(defaultGraphDisplayState(lensName));\n    const forceRef = useRef(null);\n\n    useEffect(() => {\n        // console.log(\"useEffect - setting forceRef state\");\n        forceRef.current.d3Force(\"link\", d3.forceLink());\n        forceRef.current.d3Force('collide', d3.forceCollide(22));   \n        forceRef.current.d3Force(\"charge\", d3.forceManyBody());\n        forceRef.current.d3Force('box', () => {\n            const N = 100;\n            // console.log(Graph.width(), Graph.height())\n            const SQUARE_HALF_SIDE = 20 * N * 0.5;\n            state.graphData.nodes.forEach(node => {\n                const x = node.x || 0, y = node.y || 0;\n                // bounce on box walls\n                if (Math.abs(x) > SQUARE_HALF_SIDE) {\n                    node.vx *= -1;\n                }\n                if (Math.abs(y) > SQUARE_HALF_SIDE) {\n                    node.vy *= -1;\n                }\n            });\n        });\n    }, [state])\n\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            if (lensName) {\n                console.debug('updating graph');\n                await updateGraph(lensName, state, setState);\n            }\n        }, 1000);\n        console.debug('setting lensName', lensName);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [lensName, state, setState]);\n\n    const graphData = state.graphData;\n\n    const colorHash = new ColorHash({});\n\n    // #TODO: ADD ZOOM HANDLERS FOR MAX ZOOM IN/OUT\n\n    return (\n        <>\n            <ForceGraph2D\n                graphData={graphData}\n                nodeLabel={(node: Node) => node.nodeLabel}\n                enableNodeDrag={true}\n                linkDirectionalParticles={1}\n                linkDirectionalParticleWidth={(link) => {\n                    return calcLinkParticleWidth(link, graphData);\n                }}\n                linkDirectionalParticleColor={(link) => {\n                    return calcLinkColor(link, graphData)\n                }}\n                linkDirectionalParticleSpeed={0.005}\n                onNodeClick={\n                    (node: Node, event: string) => {\n                        setCurNode(node);\n                    }\n                }\n                linkDirectionalArrowLength={8}\n                linkWidth={4}\n                linkDirectionalArrowRelPos={(link => {\n                    return calcLinkDirectionalArrowRelPos(link, graphData);\n                })}\n                linkCanvasObjectMode={(() => 'after')}\n                linkCanvasObject={((link: LinkType, ctx: any) => {\n                    const MAX_FONT_SIZE = 8;\n                    const LABEL_NODE_MARGIN = 8 * 1.5;\n                    const start = link.source;\n                    const end = link.target;\n                    // ignore unbound links\n                    link.color = calcLinkColor(link, graphData);\n\n                    if (typeof start !== 'object' || typeof end !== 'object') return;\n                    // calculate label positioning\n                    const textPos = Object.assign(\n                        ...['x', 'y'].map((c: any) => (\n                            {\n                                [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\n                            }\n                        )) as any\n                    );\n\n                    const relLink = {x: end.x - start.x, y: end.y - start.y};\n\n                    const maxTextLength = Math.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) - LABEL_NODE_MARGIN * 8;\n\n                    let textAngle = Math.atan2(relLink.y, relLink.x);\n                    // maintain label vertical orientation for legibility\n                    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n                    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n                    const label = mapLabel(link.label);\n                    // estimate fontSize to fit in link length\n                    ctx.font = '50px Arial';\n                    const fontSize = Math.min(MAX_FONT_SIZE, maxTextLength / ctx.measureText(label).width);\n                    ctx.font = `${fontSize + 5}px Arial`;\n\n                    let textWidth = ctx.measureText(label).width;\n\n                    textWidth += Math.round(textWidth * 0.25);\n\n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // draw text label (with background rect)\n                    ctx.save();\n                    ctx.translate(textPos.x, textPos.y);\n                    ctx.rotate(textAngle);\n                    ctx.fillStyle = 'rgb(115,222,255,1)';\n                    ctx.fillRect(-bckgDimensions[0] / 2, -bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'white';\n                    //content, left/right, top/bottom\n                    ctx.fillText(label, .75, 3);\n                    ctx.restore();\n                })}\n                nodeCanvasObject={((node: Node, ctx: any, globalScale: any) => {\n                    // add ring just for highlighted nodes\n\n                    const NODE_R = nodeSize(node, graphData);\n                    ctx.save();\n\n                    // Risk outline color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.3, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = riskColor(node, graphData, colorHash);\n                    ctx.fill();\n                    ctx.restore();\n\n                    ctx.save();\n\n                    // Node color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.2, 0, 2 * Math.PI, false);\n\n                    const nodeRbg = calcNodeRgb(node, colorHash);\n\n                    ctx.fillStyle = `rgba(${nodeRbg[0]}, ${nodeRbg[1]}, ${nodeRbg[2]}, 1)`;\n                    ctx.fill();\n                    ctx.restore();\n\n                    const label = node.nodeLabel;\n\n                    const fontSize = 15 / globalScale;\n\n                    ctx.font = `${fontSize}px Arial`;\n\n\n                    const textWidth = ctx.measureText(label).width;\n\n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // node label color\n                    ctx.fillStyle = 'rgba(48, 48, 48, 0.8)';\n                    ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'white';\n                    ctx.fillText(label, node.x, node.y);\n\n                })}\n                ref={forceRef}\n            />\n        </>\n    )\n}\n\nexport default GraphDisplay;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles({\n    root: {\n        fontSize: \".75em\"\n    },\n    nodeTable: {\n        minWidth: 450,\n    }, \n    tableHeader: {\n        fontSize: \".85rem\", \n        backgroundColor: \"#595959\"\n    }, \n    nodeTableData: {\n        fontSize: \".75rem\"\n    },\n});\n","import React from \"react\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { mapEdgeProps } from '../modules/GraphViz/graph/graph_traverse';\nimport { mapNodeProps } from './GraphViz';\nimport { Node } from \"../modules/GraphViz/CustomTypes\";\nimport { useStyles } from \"./makeStyles/NodeTableStyles\"; \n\nfunction innerTable(node: Node, styles: any) {\n    if(node) {\n        return (\n        <TableHead >\n            <TableRow>\n                <TableCell \n                    align=\"left\" \n                    className={styles.tableHeader}>\n                    <b> PROPERTY </b>\n                </TableCell>\n                <TableCell \n                    align=\"left\"\n                    className={styles.tableHeader}\n                >\n                    <b> VALUE </b>\n                </TableCell>\n            </TableRow>\n        </TableHead>\n    )\n    } else {\n        return <></>\n    }\n}\n\ntype NodeTableProps = {\n    node: Node\n}\n\nfunction NodeTable({node}: NodeTableProps){\n    const classes = useStyles();\n    const hidden = new Set(\n        ['id', 'dgraph.type', 'dgraph_type', '__indexColor', 'risks','uid', 'scope', 'name', 'nodeType', 'nodeLabel', 'x', 'y', 'index', 'vy', 'vx', 'fx', 'fy']\n    );\n\n    mapEdgeProps(node, (edgeName: string, _neighbor: Node) => {\n        hidden.add(edgeName)\n    });\n\n    const displayNode = {} as any;\n\n    mapNodeProps(\n        node, \n        (propName: string) => {\n            const prop = (node as any)[propName];\n\n            if(!hidden.has(propName)){\n                if (prop) {\n                    if (propName.includes('_time')) {\n                        displayNode[propName] = new Date(prop).toLocaleString()\n                    } else {\n                        displayNode[propName] = prop;\n                    }\n                }\n            }           \n        }\n    )\n\n    return(\n        <TableContainer>\n            <Table className={classes.nodeTable}>\n            {\n                innerTable(node, classes)\n            }\n            <TableBody>\n                    {\n                        Object.entries(displayNode).map((entry) => {\n                            const [key, value] = entry;\n                            \n                            return(\n                                <TableRow key = {node.node_key + key}> \n                                    <TableCell className = {classes.nodeTableData} align=\"left\"><b>{key}</b></TableCell>\n                                    <TableCell className = {classes.nodeTableData} align=\"left\">{value as any}</TableCell>\n                                </TableRow>\n                            ) \n                        })\n                    }\n            </TableBody>\n            </Table>\n        </TableContainer>\n    ) \n}\n\n\nexport default  NodeTable ","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root:{\n        fontSize: \"1rem\",\n    },\n    button: {\n        width: \".005%\",\n        color: \"white\",\n        backgroundColor:\"#424242\",\n    },\n    title: {\n        fontSize: \"25px\",\n        color: \"#ffffff\",\n    },\n    icon:{\n        color: \"#42C6FF\",\n        margin: \"15px 0 0 10px\",\n    }, \n    expand:{\n        color: \"#42C6FF\",\n        margin: \"0px\"\n    },\n    header:{\n        display: \"flex\"\n    }, \n    table: {\n        minWidth: 450, \n    },\n    lensName: {\n        fontSize: \"16px\",\n    },\n    pagination: {\n        margin: \".5rem\",\n        backgroundColor: \"#595959\",\n    }\n});","import React, {useEffect, useState} from \"react\";\nimport NodeTable from './NodeTable'\nimport Button from \"@material-ui/core/Button\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport LensIcon from '@material-ui/icons/Lens';\nimport Divider from \"@material-ui/core/Divider\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Lens } from \"../modules/GraphViz/CustomTypes\";\n\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { ClassNameMap } from '@material-ui/styles/withStyles';\nimport {SelectLensProps, ToggleLensTableProps, ToggleLensTableState, EngagementViewContentProps, NodeDetailsProps, ToggleNodeTableProps, PaginationState} from \"../modules/GraphViz/CustomTypes\"\n\nimport { useStyles } from './makeStyles/EngagementViewContentStyles';\n\nfunction SelectLens(props: SelectLensProps) {\n    const classes = useStyles();\n    return (\n        <>\n            <TableRow key={props.uid}>\n                <TableCell component=\"th\" scope=\"row\">\n                <Button className = {classes.lensName}\n                    onClick={\n                        () => { \n                            props.setLens(props.lens)    \n                        }\n                }>\n                    {/* #TODO: change color of lens name based on score */}\n                    {props.lens_type + \" :\\t\\t\" + props.lens + \"\\t\\t\" + props.score}\n                </Button>\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}\n\nconst defaultToggleLensTableState = (): ToggleLensTableState => {\n    return {\n        toggled: true,\n        lenses: [],\n        first: 100, // first is the page size\n        offset: 0, // by default, start from page 0\n    }\n}\n\n\nconst pagedTable = (\n    state: PaginationState, \n    page: number, \n    rowsPerPage: number, \n    handleChangePage: (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) => void, \n    handleChangeRowsPerPage: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void, \n    setLens: (lens: string) => void, \n    classes: ClassNameMap<string>\n) => {\n    return (\n        <TableContainer>\n            <TablePagination\n                className = {classes.pagination}\n                aria-label = \"pagination\"\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={state.lenses.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            {\n                state.lenses \n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(\n                    (lens: Lens) => {\n                        return(\n                            <Table className={classes.table} aria-label=\"lens table\" key={Number(lens.uid)}>\n                                <TableBody>\n                                    <SelectLens \n                                        key={Number(lens.uid)}\n                                        uid={lens.uid}\n                                        lens={lens.lens_name}\n                                        lens_type={lens.lens_type}\n                                        score={lens.score}\n                                        setLens={setLens}\n                                    />\n                                </TableBody>\n                            </Table>\n                        )\n                    }\n                )\n            }\n        </TableContainer>\n    )\n}\n\nfunction ToggleLensTable( {setLens}: ToggleLensTableProps ) {\n    const [state, setState] = useState(defaultToggleLensTableState());\n    const classes = useStyles();\n\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) => {\n        setPage(page);\n    }\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        console.log(\"Handle Row Event\", event)\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    }\n\n    useEffect( () => {\n        const interval = setInterval(\n            () => {\n            console.log(\"Fetching lenses\");\n            getLenses(state.first, state.offset)\n                .then((response) => {\n                    if (response.lenses && response.lenses !== state.lenses) {\n                        const lenses = state.lenses.concat(response.lenses);\n                        setState({\n                            ...state,\n                            offset: state.offset + response.lenses.length || 0,\n                            lenses,\n                        })\n                    }\n                }\n            )\n        }, 5000);\n        return () => clearInterval(interval);\n    });\n\n    return (\n        <>\n            <div className={classes.header}>\n                <b className={classes.title}>\n                    <BubbleChartIcon className = {classes.icon} />\n                    LENSES \n                </b>\n                <Button\n                    className = {classes.button}\n                    onClick={() => { \n                        setState({\n                            ...state,\n                            toggled: !state.toggled,\n                        }) \n                    }}> \n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n        \n            <div className=\"lensToggle\">\n                {   \n                    state.toggled && \n                    pagedTable(state, page, rowsPerPage, handleChangePage, handleChangeRowsPerPage, setLens, classes)\n                }\n            </div>\n\n            <Divider />\n        </>\n    )\n}\n\n\nconst getLenses = async (first: number, offset: number) => {\n\n    const query = `\n        {\n            lenses(first: ${first}, offset: ${offset}) {\n                uid,\n                node_key,\n                lens_name,\n                score, \n                lens_type,\n            }\n        }\n    `;\n\n    const res = await fetch(`/prod/graphQlEndpoint/graphql`,\n        {\n            method: 'post',\n            body: JSON.stringify({ query: query }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.errors) {\n                console.error(\"lenses failed\", res.errors);\n                res.data = {lenses: []};\n            }\n            return res\n        })\n        .then((res) => res.data);\n\n        const jres = await res;\n\n        console.log(\"queried graphql_edge in engagement view content\", jres);\n    return jres;\n};\n\nconst NodeDetails = ({node}: NodeDetailsProps) => {\n    return (\n        <>\n            <NodeTable node={node} />\n        </>\n    )\n}\n\nfunction ToggleNodeTable({curNode}: ToggleNodeTableProps) {\n    const [toggled, toggle] = useState(true);\n    const classes = useStyles();\n    return (\n        <>\n        <div>\n            <div className={classes.header}>\n                <b className={classes.title}><LensIcon className={classes.icon}/> NODE</b>\n                <Button\n                    className = {classes.button}\n                    onClick={\n                        () => { toggle(toggled => !toggled) }\n                    }> \t\n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n\n            <div className=\"nodeToggle\">\n                {\n                    toggled && curNode && \n                        <>\n                            { <NodeDetails node={curNode}/> }\n                        </>\n                }\n            </div>\n        </div>\n        </>\n    )\n}\n\n\n\nexport default function EngagementViewContent({setLens, curNode}: EngagementViewContentProps) {\n    return (\n        <>\n            <ToggleLensTable setLens={setLens}/>\n            <ToggleNodeTable curNode={curNode}/>\n        </>\n    );\n}\n","const apiFetch = async (urlSlug: string, method = \"get\") => {\n  // const url = `api/${encodeURIComponent(urlSlug)}`;\n\n  const response = await fetch(urlSlug, {\n    method,\n    credentials: \"include\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n    }),\n  }).catch((e) => {\n    console.warn(e);\n    throw new Error(`Error: ${e}`);\n  });\n\n  return response.json();\n};\n\nexport default apiFetch;\n","import apiFetch from \"./fetch\";\n\nexport const checkLogin = async (): Promise<boolean | null> => {\n  try {\n    const loginData = await apiFetch(`/prod/auth/checkLogin`, \"post\");\n    return loginData['success'] === 'True';\n  } catch (e) {\n    return null;\n  }\n};\n","import React from 'react';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Home from '@material-ui/icons/Home';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles({\n            root: {\n                display: \"flex\",\n            },\n            header: {\n                justifyContent: \"space-between\",\n            }, \n            link:{\n                color:\"#42C6FF\", \n                textDecoration: \"none\"\n            }\n        }\n    )\n);\n\ntype GraplHeaderProps = {\n    displayBtn: boolean\n}\n\nconst GraplHeader = ({displayBtn}: GraplHeaderProps) => {\n    const classes = useStyles();\n    return(\n        <>\n            <AppBar position=\"static\">\n                <Toolbar className = {classes.header}>\n                    <Typography variant=\"h6\" >\n                        GRAPL\n                    </Typography>\n                    {\n                        displayBtn &&\n                            <Link to = \"/\" className = {classes.link}><Home /></Link>\n\n                    }\n                </Toolbar>\n            </AppBar>\n        </>\n    )    \n}\n\nexport default GraplHeader; ","    import React from 'react';\n    import { makeStyles } from '@material-ui/core/styles';\n    import Card from '@material-ui/core/Card';\n    import CardActionArea from '@material-ui/core/CardActionArea';\n    import CardActions from '@material-ui/core/CardActions';\n    import CardContent from '@material-ui/core/CardContent';\n    import Button from '@material-ui/core/Button';\n    import Typography from '@material-ui/core/Typography';\n\n    const useStyles = makeStyles({\n        root: {\n            maxWidth: 345,\n            postion: \"fixed\",\n        },\n        button: {\n            border: \"2px solid white\",\n            backgroundColor: \"#42c6ff\",\n        }\n    });\n\n\n    export default function LoginNotification() {\n    const classes = useStyles();\n\n        return (\n            <Card variant=\"outlined\" className={classes.root}>\n                <CardActionArea>\n                    <CardContent>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        You are not logged in and changes cannot be saved.\n                        \n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n\n                <CardActions>\n                    <Button \n                        className = {classes.button}\n                        size = \"small\" \n                        onClick = { \n                            () => {\n                                window.history.replaceState('#/', \"\", \"#/login\");\n                                window.location.reload();\n                            } \n                        }> \n                        Login\n                    </Button>\n                </CardActions>\n            </Card>\n        );\n    }\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst drawerWidth = 500;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        },\n        button: {\n            backgroundColor: \"#42C6FF\",\n            margin: \"0.25rem\",\n            padding: \"0.20rem\",\n        }, \n        loggedIn: {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n        },\n        appBar: {\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n            })\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n            })\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            color: \"#42C6FF\"\n        },\n        hide: {\n            display: \"none\"\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        drawerHeader: {\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: theme.spacing(0, 1),\n            // necessary for content to be below app bar\n            ...theme.mixins.toolbar,\n            justifyContent: \"flex-end\"\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n            }),\n            marginLeft: -drawerWidth\n        },\n        contentShift: {\n            transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n            }),\n            marginLeft: 0,\n        },\n        lensName:{\n            color:\"#EAFDFF\",\n            fontSize: \"1.5rem\", \n        },\n        header:{\n            fontSize: \"35px\",\n        }, \n        headerContent: {\n            width: \"100vw\",\n            display: \"flex\",  \n            justifyContent: \"space-between\",\n        },\n        close:{\n            color:\"#42C6FF\",\n        },\n        link: {\n            color: \"#42C6FF\", \n            textDecoration: \"none\"\n        }\n    })\n);","import GraphDisplay from \"./GraphViz\";\nimport React, { useEffect } from \"react\";\nimport EngagementViewContent from \"./EngagementViewContent\";\nimport clsx from \"clsx\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport { Node } from \"../modules/GraphViz/CustomTypes\";\nimport Home from \"@material-ui/icons/Home\";\nimport { Link } from \"react-router-dom\";\nimport { checkLogin } from \"../services/loginService\";\nimport { LoginNotification } from \"./reusableComponents\";\nimport { useStyles } from \"./makeStyles/GraphVizStyles\";\n\ntype EngagementViewProps = {\n  setLens: (lens: string) => void;\n  curLens: string;\n  curNode: Node | null;\n};\n\nconst defaultEngagementUxState = (): EngagementUxState => {\n  return {\n    curLens: \"\",\n    curNode: null,\n    loggedIn: true,\n    renderedOnce: false,\n  };\n};\n\nexport default function EngagementView({\n  setLens,\n  curLens,\n  curNode,\n}: EngagementViewProps) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      {/* <CssBaseline /> */}\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, { [classes.appBarShift]: open })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            {/* // Menu Icon  */}\n            &#9776;\n          </IconButton>\n\n          <div className={classes.headerContent}>\n            <Typography variant=\"h5\" noWrap>\n              <b className={classes.header}> GRAPL </b>\n            </Typography>\n            <Link to=\"/\" className={classes.link}>\n              <Home />\n            </Link>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <Button onClick={handleDrawerClose}>\n            <KeyboardArrowLeftIcon className={classes.close} />\n          </Button>\n        </div>\n\n        <Divider />\n\n        <EngagementViewContent setLens={setLens} curNode={curNode} />\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n\n        <h3 className={classes.lensName}>\n          {/* selected lens name */}\n          {curLens || \"\"}\n        </h3>\n\n        <Typography paragraph></Typography>\n      </main>\n    </div>\n  );\n}\n\ntype EngagementUxState = {\n  curLens: string;\n  curNode: Node | null;\n  loggedIn: boolean;\n  renderedOnce: boolean;\n};\n\nexport const EngagementUx = () => {\n  const classes = useStyles();\n  const [state, setState] = React.useState(defaultEngagementUxState());\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged out\");\n        }\n        setState({\n          ...state,\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  const loggedIn = state.loggedIn;\n\n  return (\n    <>\n      <EngagementView\n        setLens={(lens: string) =>\n          setState({\n            ...state,\n            curLens: lens,\n          })\n        }\n        curLens={state.curLens}\n        curNode={state.curNode}\n      />\n      <>\n        <div className={classes.loggedIn}>\n          {!loggedIn ? <LoginNotification /> : \"\"}\n        </div>\n\n        <GraphDisplay\n          lensName={state.curLens}\n          setCurNode={(node: Node) => {\n            setState({\n              ...state,\n              curNode: node,\n            });\n          }}\n        />\n      </>\n    </>\n  );\n};\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport const dasboardStyles = makeStyles( (theme: Theme) =>\ncreateStyles({\n    root: {\n        display: \"flex\",\n    },\n    button: {\n        backgroundColor: \"#42C6FF\",\n        margin: \"0.25rem\",\n        padding: \"0.25rem\",\n    }, \n    welcome: {\n        width:\"70%\",\n        textAlign:\"center\",\n        backgroundColor: \"#373740\",\n        height: \"100vh\",\n        color: \"white\",\n    },\n    loggedIn: {\n        display:\"flex\", \n        justifyContent: \"flex-end\",\n    }, \n    nav: {\n        margin: \"2rem\",\n        width: \"30%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    dashboard: {\n        display: \"flex\",\n        flexDirection: \"row\",\n    }, \n    link: {\n        color: \"white\",\n        textDecoration: \"none\",\n        padding: \".75rem\",\n        backgroundColor: \"#42C6FF\",\n        margin: \"1rem\",\n        textAlign: \"center\",\n        borderRadius: \".35rem\",\n        textTransform: \"uppercase\",\n        fontWeight: \"bolder\"\n    },\n    \n})\n);","import apiFetch from \"./fetch\";\n\nexport const getNotebookUrl = async (): Promise<string> => {\n  return apiFetch(`/prod/auth/getNotebook`, \"post\").then(\n    (result) => result.success.notebook_url\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useAsync } from \"react-async-hook\";\nimport { checkLogin } from \"../services/loginService\";\nimport { Link } from \"react-router-dom\";\nimport { dasboardStyles } from \"./makeStyles/DashboardStyles\";\nimport { LoginNotification, GraplHeader } from \"./reusableComponents\";\nimport { getNotebookUrl } from \"../services/notebookService\";\n\nconst useStyles = dasboardStyles;\n\nexport default function Dashboard() {\n  const asyncSagemakerUrl = useAsync(getNotebookUrl, []);\n  const classes = useStyles();\n\n  const [state, setState] = useState({\n    loggedIn: true,\n    renderedOnce: false,\n  });\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged out\");\n        }\n        setState({\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  console.log(\"state - loggedin\", state.loggedIn);\n\n  const loggedIn = state.loggedIn;\n\n  const openSagemakerUrl = () => {\n    if (asyncSagemakerUrl.loading || !asyncSagemakerUrl.result) {\n      alert('sagemaker url not ready');\n      return;\n    }\n    \n    window.open(asyncSagemakerUrl.result);\n  };\n\n  return (\n    <>\n      <GraplHeader displayBtn={false} />\n\n      <div className={classes.dashboard}>\n        <section className={classes.nav}>\n          <Link to=\"/engagements\" className={classes.link}>\n            Engagements\n          </Link>\n          <Link to=\"/plugins\" className={classes.link}>\n            Upload Plugin\n          </Link>\n          <Button onClick={openSagemakerUrl} className={classes.link}>\n            Open Engagement Notebook\n          </Button>\n        </section>\n\n        <section className={classes.welcome}>\n          <div className={classes.loggedIn}>\n            {!loggedIn ? <LoginNotification /> : \"\"}\n          </div>\n\n          <h1> Welcome! </h1>\n        </section>\n      </div>\n    </>\n  );\n}\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles(\n    (theme: Theme) =>\n        createStyles({\n            root: {\n                display: \"flex\",\n            },\n            formContainer: {\n                color: \"white\", \n                margin: \"1rem\",\n            },\n            btn: {\n                backgroundColor: \"#42C6FF\",\n                margin: \"0.25rem\",\n                padding: \"0.25rem\",\n                borderRadius: \"6px\",\n            },\n            loggedIn: {\n                display:\"flex\", \n                justifyContent: \"flex-end\",\n            }, \n            inputFiles: {\n                border: \"none\",\n                width: \"35vw\",\n            },\n            upload: {\n                display: \"flex\",\n            },\n            succMsg: {\n                color: \"#03dac6\",\n            }, \n            errMsg: {\n                color: \"#CF6679\",\n            }, \n            pluginTable: {\n                backgroundColor: \"#292929\",\n                margin: \"1em\",\n                width: \"50%\",\n                height: \"100%\",\n                boxShadow: \" 1.5px 1.5px #000000\",\n            }, \n            uploadFormContainer: {\n                backgroundColor: \"#292929\",\n                margin: \"1em\", \n                width: \"50%\",\n                height: \"100%\",\n                boxShadow: \"1.5px 1.5px #000000\",\n                display: \"flex\", \n            }, \n            uploadForm: {\n                fontFamily: \"Arial\",\n                display: \"flex\",\n                fontSize: \".75rem\",\n            }\n        }\n    )\n);","import { PluginPayload } from \"../plugins/uploadPluginTypes\";\n\nexport const getPluginList = async () => {\n    const res = await fetch(`/prod/modelPluginDeployer/listModelPlugins`,\n        {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        }\n    );\n\n    const body = await res.json() as any;\n\n    try { \n        let pluginList: string[] = body.success.plugin_list;\n        return pluginList\n    } catch (e) {\n        console.warn(e);\n        return []\n    }\n}\n\nexport const deletePlugin = async ( pluginName: string ): Promise <boolean> => {\n    const res = await fetch(`/prod/modelPluginDeployer/deleteModelPlugin`,\n        {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n            body: JSON.stringify({plugins_to_delete: [pluginName]})\n        }\n    );\n    await res.json();\n    return true;\n};\n\nexport const uploadFilesToDgraph = async (payload: PluginPayload ): Promise<boolean> => {\n    const res = await fetch(`/prod/modelPluginDeployer/deploy`,\n        {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n    );\n    const body = await res.json();\n\n    return body.success.Success;\n};\n","import React, { SyntheticEvent } from 'react';\nimport { Field, Form, Formik } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { Event, UploadFormState, DirectoryUpload, MessageProps} from \"./uploadPluginTypes\"\nimport { uploadFilesToDgraph } from \"./apiRequests\";\nimport { useStyles } from \"./useStyles\";\n\nconst readFile = async (file: Blob): Promise <string> => {\n    return await new Promise(\n        (resolve, reject) => {\n            const reader = new FileReader();\n            reader.addEventListener('load', (event: ProgressEvent<FileReader>) => {\n                if (event.target === null) {\n                    console.warn(\"onload event was null\");\n                    return;\n                } else {\n                    const fileRes = event.target.result;\n                    if (fileRes === null) {\n                        console.warn(\"Read pluginfile was null\");\n                        reject(null)\n                        return;\n                    } else {\n                        if (typeof(fileRes) === 'string') {\n                            resolve(fileRes);\n                        } else {\n                            resolve(new TextDecoder().decode(fileRes));\n                        }\n                    }\n                }\n            });\n            return reader.readAsText(file);\n        }\n    )\n}\n\nconst defaultUploadFormState = (): UploadFormState => {\n    return {curFiles: null, success: null}\n}\n\nconst Message = ({status}: MessageProps) => {\n    const classes = useStyles();\n    if (status === true) {\n        return(\n            <div className = {classes.succMsg}>Plugins Successfully Deployed!</div>\n        )\n    } else if (status === false){\n        return(\n            <div className = {classes.errMsg}>Upload Unsuccessful</div>\n        )\n    } else {\n        return (<div />)\n    }\n    \n}\n\nexport const UploadForm = () => {\n    const [state, setState] = React.useState(defaultUploadFormState());\n    const classes = useStyles();\n\n    return(\n        <div className = {classes.formContainer}>\n            <h4>UPLOAD DIRECTORY WITH PLUGINS:</h4>\n            <Formik\n                initialValues={{ \"filename\": \"\" }}\n                onSubmit={\n                    (event: Event) => { \n                        const fileMap = {} as any;\n                        const reads: Promise<void>[] = [];\n                        const {curFiles} = state;\n\n                        if (curFiles === null) {\n                            console.warn(\"Attempted to upload files without selecting any\");\n                            return\n                        }\n                        \n                        for(const f of curFiles){\n                            let fileRead = readFile(f).then((fileResult) => {\n                                // This any is because webkitRelativePath is not standard, and therefor\n                                // is not part of the File type\n                                const path = ((f as any).webkitRelativePath || (f as any).mozRelativePath);\n\n                                fileMap[path] = fileResult;\n                            });\n                            reads.push(fileRead);\n                        }\n                        let success = true;\n                        Promise.all(reads).then(() => {\n                            return uploadFilesToDgraph({plugins: fileMap});\n                        })\n                        .then((didSucceed) => {success = success && didSucceed;})\n                        .then(() => setState({...state, success}))\n                    }\n                }\n            >\n                <Form className = {classes.uploadForm}>\n                    {/* accept = property to restrict types, currently we accept ANY type */}\n                    <Field \n                        className = {classes.inputFiles}\n                        name=\"plugin\" \n                        directory=\"\" \n                        webkitdirectory=\"\"\n                        mozdirectory=\"\"\n                        type=\"file\" \n                        multiple placeholder=\"Plugin\" \n                        onChange={\n                            (event: SyntheticEvent<DirectoryUpload>) => {\n                                setState({\n                                    ...state,\n                                    curFiles: event.currentTarget.files\n                                })\n                            }\n                        }\n                    /> \n                    <Button className=\"submitBtn\"  type=\"submit\"><CloudUploadIcon className = {classes.btn}/></Button>\n                </Form>\n            </Formik>\n            <br />\n            <Message status = {state.success}/>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Button from \"@material-ui/core/Button\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { PluginTableState } from \"../plugins/uploadPluginTypes\"\nimport { getPluginList, deletePlugin} from \"../plugins/apiRequests\";\nimport { useStyles } from \"../plugins/useStyles\";\n\nconst defaultPluginTableState = (): PluginTableState => {\n    return {\n        rows: [],\n        toggle: true,\n    }\n}\n\nexport const PluginTable = () => {\n    const classes = useStyles();\n    const [state, setState] = React.useState(defaultPluginTableState());\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, newPage:number) => {\n        setPage(newPage);\n    }\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        console.log(\"Event\", event)\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    }\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, state.rows.length - page * rowsPerPage);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            await getPluginList().then((rows) => {\n                setState({\n                    toggle: state.toggle ,\n                    rows\n                })\n            });\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [state.toggle])\n\n    return(\n        <>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow key = {\"plugin\"}>\n                            <TableCell align = \"left\">PLUGINS</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody aria-label = \"PluginTable\">\n                        {state.rows\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map(\n                                (pluginName: string) => {\n                                    return <TableRow key = { pluginName }> \n                                                <TableCell \n                                                    align = \"right\"> \n                                                    {pluginName} \n                                                    <Button onClick={\n                                                        () => { \n                                                            deletePlugin(pluginName)\n                                                            .then( \n                                                                () => {\n                                                                    setState({\n                                                                        ...state, \n                                                                        toggle: state.toggle && false\n                                                                    })\n                                                                    console.log(\"Plugin Deleted\");\n                                                                }\n                                                            )\n                                                        } \n                                                    }\n                                                >\n                                                <DeleteOutlinedIcon className = {classes.btn}/></Button>\n                                            </TableCell> \n                                        </TableRow>\n                                }\n                            )}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                    </TableBody>\n                </Table>\n\n                <TablePagination\n                    aria-label = \"pagination\"\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={state.rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </TableContainer>\n        </>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { GraplHeader } from \"./reusableComponents\";\nimport { useStyles } from \"../modules/uploads/plugins/useStyles\";\nimport { UploadForm } from \"../modules/uploads/plugins/uploadPlugins\";\nimport { PluginTable } from \"../modules/uploads/plugins/pluginTable\";\nimport { checkLogin } from \"../services/loginService\";\nimport { LoginNotification } from \"./reusableComponents\";\n\nconst UploadPlugin = () => {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    loggedIn: true,\n    renderedOnce: false,\n  });\n\n  useEffect(() => {\n    if (state.renderedOnce) {\n      return;\n    }\n    const interval = setInterval(async () => {\n      await checkLogin().then((loggedIn) => {\n        if (!loggedIn) {\n          console.warn(\"Logged Out\");\n        }\n        setState({\n          loggedIn: loggedIn || false,\n          renderedOnce: true,\n        });\n      });\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [state, setState]);\n\n  const loggedIn = state.loggedIn;\n\n  return (\n    <>\n      <GraplHeader displayBtn={true} />\n\n      <div className={classes.loggedIn}>\n        {!loggedIn ? <LoginNotification /> : \"\"}\n      </div>\n\n      <div className={classes.upload}>\n        <div className={classes.uploadFormContainer}>\n          <UploadForm />\n          <div id=\"message\" />\n        </div>\n        <div className={classes.pluginTable}>\n          <PluginTable />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadPlugin;\n","import Routes from \"./routes\";\n\nexport default Routes;\n","import React from \"react\";\nimport \"../LogIn.css\";\nimport { LogIn } from \"../Login\";\nimport { EngagementUx } from \"../components/EngagementView\";\nimport Dashboard from \"../components/Dashboard\";\nimport UploadPlugin from \"../components/UploadPlugin\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\n// Updates our react state, as well as localStorage state, to reflect the page\n// we should render\n\nexport default function Routes() {\n  console.log(\"Grapl loaded\");\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/login\" component={LogIn} />\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/plugins\" component={UploadPlugin} />\n        <Route exact path=\"/engagements\" component={EngagementUx} />\n      </Switch>\n    </HashRouter>\n  );\n}\n","import React from \"react\";\nimport Routes from \"./routes\";\n\n// Updates our react state, as well as localStorage state, to reflect the page\n// we should render\n\nexport default function App() {\n  console.log(\"Grapl loaded\");\n\n  return (\n    <>\n      <Routes />\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#373740',\n        }\n    }\n})\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ThemeProvider theme={darkTheme}>\n                <App />, \n            </ThemeProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}