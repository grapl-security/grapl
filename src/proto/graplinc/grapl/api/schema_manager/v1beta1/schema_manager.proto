syntax = "proto3";

package graplinc.grapl.api.schema_manager.v1beta1;

import "graplinc/common/v1beta1/types.proto";
import "graplinc/grapl/common/v1beta1/types.proto";

// Which format of schema are we sending to Model Plugin Deployer?
enum SchemaType {
  // Undefined
  SCHEMA_TYPE_UNSPECIFIED = 0;
  // The only currently-supported schema type is GraphQL schemas.
  SCHEMA_TYPE_GRAPHQL_V0 = 1;
}

// Describes the model to deploy
message DeployModelRequest {
  // The tenant to deploy the model to.
  graplinc.common.v1beta1.Uuid tenant_id = 1;
  // The actual schema, in whichever format specified by schema_type
  bytes schema = 2;
  // Indicates the format and semantics for the schema to be deployed
  SchemaType schema_type = 3;
  // The version number of the schema - *must* be greater than the last
  // deployed version
  uint32 schema_version = 4;
}

// Output for DeployModel
message DeployModelResponse {
  // Intentionally empty
}

// The Cardinality of the edge
enum EdgeCardinality {
  // Unspecified
  EDGE_CARDINALITY_UNSPECIFIED = 0;
  // Indicates that the edge points to only one node
  EDGE_CARDINALITY_TO_ONE = 1;
  // Indicates that the edge points to many nodes
  EDGE_CARDINALITY_TO_MANY = 2;
}

// GetEdgeSchemaRequest contains the information needed to fetch
// additional metadata about an edge
message GetEdgeSchemaRequest {
  // The tenant to deploy the model to.
  graplinc.common.v1beta1.Uuid tenant_id = 1;
  // The name of the node that has this edge
  graplinc.grapl.common.v1beta1.NodeType node_type = 2;
  // The name of the edge
  graplinc.grapl.common.v1beta1.EdgeName edge_name = 3;
}

// GetEdgeSchemaResponse contains information about
// a given edge.
message GetEdgeSchemaResponse {
  // The name of the corresponding reverse edge
  graplinc.grapl.common.v1beta1.EdgeName reverse_edge_name = 1;
  // The cardinality of the source edge
  EdgeCardinality cardinality = 2;
  // The cardinality of the reverse edge
  EdgeCardinality reverse_cardinality = 3;
}

// The SchemaManagerService manages the deployment and querying of a tenant's
// Graph Schema.
service SchemaManagerService {
  // Deploy a new model to Grapl.
  rpc DeployModel(DeployModelRequest) returns (DeployModelResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // GetEdgeSchema returns the schema for a given edge, including cardinality
  // and the associated "reverse" edge
  rpc GetEdgeSchema(GetEdgeSchemaRequest) returns (GetEdgeSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}
