syntax = "proto3";

package graplinc.grapl.api.plugin_work_queue.v1beta1;

import "graplinc/common/v1beta1/types.proto";
import "graplinc/grapl/api/graph/v1beta1/types.proto";

// A job for a given plugin, for a given tenant, to be executed against `data`
message ExecutionJob {
  // The data that the plugin will be executed against
  bytes data = 1;
  // The tenant these data belong to
  graplinc.common.v1beta1.Uuid tenant_id = 2;
  // The logical operation these data are tied to
  graplinc.common.v1beta1.Uuid trace_id = 3;
  // The event source from which these data originated
  graplinc.common.v1beta1.Uuid event_source_id = 4;
}

// A request to create a new ExecutionJob for a Generator
message PushExecuteGeneratorRequest {
  // The job to be executed
  ExecutionJob execution_job = 1;
  // The plugin id of a generator that should handle this job
  graplinc.common.v1beta1.Uuid plugin_id = 2;
}

// The response to a PushExecuteGeneratorRequest, indicating success
message PushExecuteGeneratorResponse {}

// A request to create a new ExecutionJob for an Analyzer
message PushExecuteAnalyzerRequest {
  // The job to be executed
  ExecutionJob execution_job = 1;
  // The plugin id of an analyzer that should handle this job
  graplinc.common.v1beta1.Uuid plugin_id = 2;
}

// The response to a PushExecuteAnalyzerRequest, indicating success
message PushExecuteAnalyzerResponse {}

// A request to retrieve a new ExecutionJob for a Generator
message GetExecuteGeneratorRequest {
  // The plugin id of the plugin making this request
  graplinc.common.v1beta1.Uuid plugin_id = 1;
}

// A request to retrieve a new ExecutionJob for an Analyzer
message GetExecuteAnalyzerRequest {
  // The plugin id of the plugin making this request
  graplinc.common.v1beta1.Uuid plugin_id = 1;
}

// When there are no jobs left in the queue. Primarily for transport as we
// currently represent this as Option on the Rust side of things.
message NoAvailableJobs {}

// A response containing the next ExecutionJob to execute against a Generator
message GetExecuteGeneratorResponse {
  // The execution_job to be executed
  oneof maybe_job {
    // When a job is available
    ExecutionJob job = 1;
    // When a job is not available
    NoAvailableJobs no_jobs = 2;
  }

  // A request_id, to be used in Acknowledgement
  int64 request_id = 3;
}

// A response containing the next ExecutionJob to execute against an Analyzer
message GetExecuteAnalyzerResponse {
  // The execution_job to be executed
  oneof maybe_job {
    // When a job is available
    ExecutionJob job = 1;
    // When a job is not available
    NoAvailableJobs no_jobs = 2;
  }

  // A request_id, to be used in Acknowledgement
  int64 request_id = 3;
}

// A request to acknowledge that a generator job has been completed.
message AcknowledgeGeneratorRequest {
  // The request_id of the job that has been completed
  int64 request_id = 1;
  // Some(GraphDescription) if generator ran successfully, None if it failed.
  optional graplinc.grapl.api.graph.v1beta1.GraphDescription graph_description = 2;
  // The plugin id of the plugin that completed the request
  graplinc.common.v1beta1.Uuid plugin_id = 3;
  // The tenant the plugin belongs to
  graplinc.common.v1beta1.Uuid tenant_id = 4;
  // The logical operation this request is tied to
  graplinc.common.v1beta1.Uuid trace_id = 5;
  // The event source from which the graph description originated
  graplinc.common.v1beta1.Uuid event_source_id = 6;
}

// A response to an AcknowledgeGeneratorResponse
message AcknowledgeGeneratorResponse {}

// A request to acknowledge that an analyzer job has been completed.
message AcknowledgeAnalyzerRequest {
  // The request_id of the job that has been completed
  int64 request_id = 1;
  // 'true' if success, 'false' if failure
  // TODO: This will likely become an `optional GeneratedMessage` field like AcknowledgeGeneratorRequest
  bool success = 2;
  // The plugin id of the plugin that completed the request
  graplinc.common.v1beta1.Uuid plugin_id = 3;
}

// A response to an AcknowledgeAnalyzerRequest
message AcknowledgeAnalyzerResponse {}

// The PluginWorkQueueService manages ExecutionJobs for Generator and Analyzer plugins
service PluginWorkQueueService {
  // Adds a new execution job for a generator
  rpc PushExecuteGenerator(PushExecuteGeneratorRequest) returns (PushExecuteGeneratorResponse);
  // Adds a new execution job for an analyzer
  rpc PushExecuteAnalyzer(PushExecuteAnalyzerRequest) returns (PushExecuteAnalyzerResponse);
  // Retrieves a new execution job for a generator
  rpc GetExecuteGenerator(GetExecuteGeneratorRequest) returns (GetExecuteGeneratorResponse);
  // Retrieves a new execution job for an analyzer
  rpc GetExecuteAnalyzer(GetExecuteAnalyzerRequest) returns (GetExecuteAnalyzerResponse);
  // Acknowledges the completion of a generator job
  rpc AcknowledgeGenerator(AcknowledgeGeneratorRequest) returns (AcknowledgeGeneratorResponse);
  // Acknowledges the completion of an analyzer job
  rpc AcknowledgeAnalyzer(AcknowledgeAnalyzerRequest) returns (AcknowledgeAnalyzerResponse);
}
