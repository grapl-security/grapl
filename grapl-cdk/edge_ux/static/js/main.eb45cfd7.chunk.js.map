{"version":3,"sources":["Login.tsx","components/GraphViz.tsx","components/NodeTable.tsx","components/SideBarContent.tsx","components/SideBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["checkLogin","a","fetch","method","credentials","res","json","body","LogIn","props","className","initialValues","userName","password","onSubmit","values","sha256WithPepper","login","loginSuccess","console","log","warn","name","type","placeholder","sha256","message","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join","username","hashed","i","JSON","stringify","headers","BKDRHash","str","hash","MAX_SAFE_INTEGER","parseInt","length","charCodeAt","HSL2RGB","H","S","L","q","p","color","Math","round","isArray","o","Object","prototype","call","ColorHash","options","LS","lightness","saturation","param","concat","this","hue","min","max","hueRanges","range","hsl","rgb","apply","retrieveGraph","lens","uidHashes","json_res","updated_nodes","removed_nodes","getNodeType","node","undefined","process_id","file_path","external_ip","port","scope","node_type","is_array","randomInt","floor","random","getNodeLabel","nodeType","process_name","dgraphNodesToD3Format","dgraphNodes","graph","matricies","nodes","Map","links","key_uid","matrix","node_key","uid","set","edges","edge","edgeList","get","to_uid","edge_name","risks","risk","risk_score","analyzers","indexOf","analyzer_name","lensToAdjacencyMatrix","riskNode","nodeLabel","push","id","x","y","linkMap_","nodeId","linkMap","links_","source","label","substr","target","percentToColor","percentile","calcNodeRiskPercentile","_nodeRisk","_allRisks","nodeRisk","allRisks","n","sort","riskIndex","findNode","calcNodeRgb","colorHash","calcLinkRiskPercentile","link","Graph","linkRisk","srcNode","dstNode","srcRisk","dstRisk","calcLinkRisk","calcLinkColor","mapNodeProps","f","prop","hasOwnProperty","mergeNodes","merged","mergeGraphs","curGraph","update","updates","outputGraph","updated","newNode","newLink","newLinkSource","newLinkTarget","updateGraph","lensName","state","setState","then","mergeUpdate","graphData","curLensName","catch","e","error","GraphDisplay","setCurNode","React","useState","forceRef","useRef","useEffect","current","d3Force","d3","forEach","abs","vx","vy","interval","setInterval","clearInterval","enableNodeDrag","linkDirectionalParticles","linkDirectionalParticleWidth","linkRiskPercentile","calcLinkParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleSpeed","onNodeClick","event","linkDirectionalArrowLength","linkWidth","linkDirectionalArrowRelPos","riskPercentile","calcLinkDirectionalArrowRelPos","linkCanvasObjectMode","linkCanvasObject","ctx","start","end","textPos","assign","c","relLink","maxTextLength","sqrt","pow","LABEL_NODE_MARGIN","textAngle","atan2","PI","mapLabel","font","fontSize","measureText","width","textWidth","bckgDimensions","save","translate","rotate","fillStyle","fillRect","textAlign","textBaseline","fillText","restore","nodeCanvasObject","globalScale","NODE_R","nodeSize","beginPath","arc","nodeColors","riskColor","fill","nodeRbg","ref","useStyles","makeStyles","root","table","minWidth","tableHeader","NodeTable","classes","hidden","Set","mapEdgeProps","edgeName","_neighbor","add","displayNode","propName","has","includes","Date","toLocaleString","TableContainer","Table","TableHead","TableRow","TableCell","align","innerTable","TableBody","entries","entry","key","value","button","backgroundColor","title","icon","margin","expand","header","display","SelectLens","component","Button","onClick","setLens","score","ToggleLensTable","toggled","lenses","getLenses","response","_lens","aria-label","Number","Divider","jres","neighbor","NodeDetails","ToggleNodeTable","curNode","toggle","SideBarContent","theme","createStyles","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","close","SideBar","curLens","open","setOpen","AppBar","position","clsx","Toolbar","IconButton","Typography","variant","noWrap","Drawer","anchor","paper","paragraph","EngagementUx","redirectTo","routeState","setRouteState","page_name","curPage","localStorage","setItem","Router","getItem","lastCheckLoginCheck","now","loggedIn","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","primary","main","rootElement","document","getElementById","ReactDOM","render","StrictMode","ThemeProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb45cfd7.chunk.js","sourcesContent":["import React from 'react';\nimport './LogIn.css';\n// import axios from 'axios';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { Formik, Field, Form } from \"formik\";\n\nconst engagement_edge = \"http://localhost:8900/\";\n\nexport const checkLogin = async () => {\n    const res = await fetch(`${engagement_edge}checkLogin`, {\n        method: 'get',\n        credentials: 'include',\n    });\n\n    const body = await res.json();\n\n    return body['success'] === 'True';\n};\n\nexport const LogIn = (props: any) => {\n  return (\n    <div className = \"backgroundImage\">\n      <div className=\"grapl\">Grapl</div>\n      <div className = \"formContainer\">\n      <Formik\n        initialValues={{ userName: \"\", password: \"\" }}\n        onSubmit={async values => {\n          const password = await sha256WithPepper(\n            values.userName, values.password\n          );\n\n          const loginSuccess = login(values.userName, password);\n\n          if (loginSuccess) {\n            props.loginSuccess();\n            console.log(\"Logged in\");\n          } else {\n            console.warn(\"Login failed!\")\n          }\n        }}\n      >\n        <Form>\n          <Field name=\"userName\" type=\"text\" placeholder=\"Username\" /> <br/>\n          <Field name=\"password\" type=\"password\" placeholder=\"Password\"/> <br/>\n          <button className=\"submitBtn\"  type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n        \n      </div>\n    </div>\n  );\n}\n\nasync function sha256(message: string) {\n  // encode as UTF-8\n  const msgBuffer = new TextEncoder().encode(message);\n\n  // hash the message\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n\n  // convert ArrayBuffer to Array\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n  // convert bytes to hex string\n  return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n}\n\n\nconst sha256WithPepper = async (username: string, password: string) => {\n  // The pepper only exists to prevent rainbow tables for extremely weak passwords\n  // Client side hashing itself is only to prevent cases where the password is\n  // exposed before it makes it into the password database\n  const pepper = \"f1dafbdcab924862a198deaa5b6bae29aef7f2a442f841da975f1c515529d254\";\n  let hashed = await sha256(password + pepper + username);\n\n  for (let i = 0; i < 5000; i++) {\n      hashed = await sha256(hashed)\n  }\n  return hashed\n};\n\nconst login = async (username: string, password: string) => {\n      try {\n          const res = await fetch(`${engagement_edge}login`, {\n              method: 'post',\n              body: JSON.stringify({\n                  'username': username,\n                  'password': password\n              }),\n              headers: {\n                  'Content-Type': 'application/json',\n              },\n              credentials: 'include',\n          });\n          \n          const body = await res.json();\n          return body['success'] === 'True';\n        } catch (e) {\n          console.log(e);\n          return false\n      }\n    };\n\n// export default LogIn;\n","// @ts-nocheck\nimport React, { useRef, useState, useEffect } from 'react';\nimport { ForceGraph2D, ForceGraph3D } from 'react-force-graph';\nimport * as d3 from \"d3\";\n\nconst engagement_edge = \"http://localhost:8900/\";\n\nconst BKDRHash = (str: any) => {\n    const seed = 131;\n    const seed2 = 137;\n    let hash = 0 as any;\n    // make hash more sensitive for short string like 'a', 'b', 'c'\n    str += 'x';\n    // Note: Number.MAX_SAFE_INTEGER equals 9007199254740991\n    const MAX_SAFE_INTEGER = parseInt(9007199254740991 / seed2 as any) as any;\n    for(let i = 0; i < str.length; i++) {\n        if(hash > MAX_SAFE_INTEGER) {\n            hash = parseInt(hash / seed2 as any);\n        }\n        hash = hash * seed + str.charCodeAt(i);\n    }\n    return hash;\n};\n\n\n/**\n * Convert HSL to RGB\n *\n * @see {@link http://zh.wikipedia.org/wiki/HSL和HSV色彩空间} for further information.\n * @param {Number} H Hue ∈ [0, 360)\n * @param {Number} S Saturation ∈ [0, 1]\n * @param {Number} L Lightness ∈ [0, 1]\n * @returns {Array} R, G, B ∈ [0, 255]\n */\nconst HSL2RGB = (H: any, S: any, L: any) => {\n    H /= 360;\n\n    const q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n    const p = 2 * L - q;\n\n    return [H + 1/3, H, H - 1/3].map((color) => {\n        if(color < 0) {\n            color++;\n        }\n        if(color > 1) {\n            color--;\n        }\n        if(color < 1/6) {\n            color = p + (q - p) * 6 * color;\n        } else if(color < 0.5) {\n            color = q;\n        } else if(color < 2/3) {\n            color = p + (q - p) * 6 * (2/3 - color);\n        } else {\n            color = p;\n        }\n        return Math.round(color * 255);\n    });\n};\n\nconst isArray = (o: any) => {\n    return Object.prototype.toString.call(o) === '[object Array]';\n};\n\n/**\n * Color Hash Class\n *\n * @class\n */\nconst ColorHash = function(options: any) {\n    options = options || {};\n\n    const LS = [options.lightness, options.saturation].map((param) => {\n        param = param || [0.35, 0.5, 0.65]; // note that 3 is a prime\n        return isArray(param) ? param.concat() : [param];\n    });\n\n    this.L = LS[0];\n    this.S = LS[1];\n\n    if (typeof options.hue === 'number') {\n        options.hue = {min: options.hue, max: options.hue};\n    }\n    if (typeof options.hue === 'object' && !isArray(options.hue)) {\n        options.hue = [options.hue];\n    }\n    if (typeof options.hue === 'undefined') {\n        options.hue = [];\n    }\n    this.hueRanges = options.hue.map(function (range: any) {\n        return {\n            min: typeof range.min === 'undefined' ? 0 : range.min,\n            max: typeof range.max === 'undefined' ? 360: range.max\n        };\n    });\n\n    this.hash = options.hash || BKDRHash;\n};\n\n/**\n * Returns the hash in [h, s, l].\n * Note that H ∈ [0, 360); S ∈ [0, 1]; L ∈ [0, 1];\n *\n * @param {String} str string to hash\n * @returns {Array} [h, s, l]\n */\nColorHash.prototype.hsl = function(str: any) {\n    let H, S, L;\n    let hash = this.hash(str);\n\n    if (this.hueRanges.length) {\n        const range = this.hueRanges[hash % this.hueRanges.length];\n        const hueResolution = 727; // note that 727 is a prime\n        H = ((hash / this.hueRanges.length) % hueResolution) * (range.max - range.min) / hueResolution + range.min;\n    } else {\n        H = hash % 359; // note that 359 is a prime\n    }\n    hash = parseInt(hash / 360 as any);\n    S = this.S[hash % this.S.length];\n    hash = parseInt(hash / this.S.length as any);\n    L = this.L[hash % this.L.length];\n\n    return [H, S, L];\n};\n\n/**\n * Returns the hash in [r, g, b].\n * Note that R, G, B ∈ [0, 255]\n *\n * @param {String} str string to hash\n * @returns {Array} [r, g, b]\n */\nColorHash.prototype.rgb = function(str: any) {\n    const hsl = this.hsl(str);\n    return HSL2RGB.apply(this, hsl);\n};\n\n\n\nconst retrieveGraph = async (lens: string) => {\n\n    let uidHashes = {};\n\n    // for (const node of graph.nodes) {\n    //     if (node.lens !== undefined) {\n    //         continue\n    //     }\n    //     if (node.uid !== undefined) {\n    //         uidHashes[node.uid] = await hashNode(node);\n    //     }\n    // }\n\n    console.log(\"Getting graph\");\n\n    const res = await fetch(`${engagement_edge}update`, {\n        method: 'post',\n        body: JSON.stringify({\n            'lens': lens,\n            'uid_hashes': uidHashes,\n        }),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n    });\n\n    const json_res = await res.json();\n\n    const updated_nodes = json_res['success']['updated_nodes'];\n    const removed_nodes = json_res['success']['removed_nodes'];\n\n    return [updated_nodes, removed_nodes]\n};\n\nconst getNodeType = (node: any) => {\n    if (node.process_id !== undefined) {\n        return 'Process';\n    }\n    if (node.file_path !== undefined) {\n        return 'File';\n    }\n\n    if (node.external_ip !== undefined) {\n        return 'ExternalIp';\n    }\n\n    if (node.port !== undefined) {\n        return 'Connect';\n    }\n\n    if (node.scope !== undefined || node.lens !== undefined) {\n        return 'Lens';\n    }\n\n    // Dynamic nodes\n    if (node.node_type) {\n        if(Array.is_array(node.node_type)) {\n            return node.node_type[0]\n        }\n        return node.node_type\n    }\n\n    console.warn('Unable to find type for node ', node);\n    return 'Unknown';\n};\n\nfunction randomInt(min: number, max: number) // min and max included\n{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst lensToAdjacencyMatrix = (matricies: any) => {\n    const nodes = new Map();\n    const links = new Map();\n\n    const key_uid = new Map();\n\n    for (const matrix of matricies) {\n        const node_key = matrix.node['node_key'];\n        const uid = matrix.node['uid'];\n        if (matrix.node[\"analyzer_name\"]) {\n            continue\n        }\n        key_uid.set(node_key, uid);\n        console.log(node_key);\n        nodes.set(uid, matrix.node);\n    }\n\n    for (const matrix of matricies) {\n        const node_key = matrix.node['node_key'];\n        const uid = matrix.node['uid'];\n\n        for (const edge of matrix.edges) {\n            let edgeList = links.get(uid);\n            const to_uid = key_uid.get(edge['to']);\n\n            const edge_name = edge['edge_name'];\n            if (edge_name === \"risks\") {\n                console.log(\"Handling risks\");\n                const node = nodes.get(key_uid.get(edge['from']));\n                for (const risk of matrix.node.risks) {\n                    console.log('risk: ', risk);\n                    node.risk = (risk.risk_score || 0) + (node.risk || 0)\n                    if (node.analyzers) {\n                        if (node.analyzers.indexOf(risk.analyzer_name) === -1) {\n                            if (risk.analyzer_name) {\n                                node.analyzers += ', ' + risk.analyzer_name\n                            }\n                        }\n                    } else {\n                        node.analyzers = risk.analyzer_name\n                    }\n                }\n\n                continue\n            }\n\n            if (edgeList === undefined) {\n                edgeList = new Map();\n                edgeList.set(\n                    uid +  + to_uid,\n                    [uid, edge_name, to_uid]\n                );\n\n            } else {\n                edgeList.set(\n                    uid + edge_name + to_uid,\n                    [uid, edge_name, to_uid]\n                );\n            }\n            links.set(uid, edgeList)\n        }\n    }\n\n    console.log(links)\n\n    return {\n        nodes, links\n    }\n};\n\n\nconst getNodeLabel = (nodeType: any, node: any) => {\n    if (nodeType === 'Process') {\n        return node.process_name || node.process_id;\n    }\n\n    if (nodeType === 'File') {\n        return node.file_path;\n    }\n\n    if (nodeType === 'ExternalIp') {\n        return node.external_ip;\n    }\n\n    if (nodeType === 'Connect') {\n        return node.port;\n    }\n\n    if (nodeType === 'Lens') {\n        return node.lens;\n    }\n\n    return nodeType || '';\n};\n\nconst dgraphNodesToD3Format = (dgraphNodes: any) => {\n    const graph = lensToAdjacencyMatrix(dgraphNodes) as any;\n\n    // Calculate risks and attach to nodes\n    for (const node of graph.nodes.values()) {\n        const edges = graph.links.get(node.uid) || new Map();\n        for (const edge of edges.values()) {\n            if (edge[1] === 'risks') {\n                const riskNode = graph.nodes.get(edge[2]);\n                if (!riskNode.risk_score) {\n                    continue\n                }\n\n                if (node.risk === undefined) {\n                    node.risk = riskNode.risk_score || 0;\n                    node.analyzers = riskNode.analyzer_name;\n                } else {\n                    node.risk += riskNode.risk_score;\n                    if (node.analyzers && node.analyzers.indexOf(riskNode.analyzer_name) === -1) {\n                        node.analyzers += ', ' + riskNode.analyzer_name;\n                    }\n                }\n            }\n        }\n    }\n\n    // Flatten nodes\n    const nodes = [];\n\n    for (const node of graph.nodes.values()) {\n        if (node.risk_score || node.analyzer_name) {\n            continue\n        }\n        const nodeType = getNodeType(node);\n        if (nodeType === 'Unknown') {\n            continue\n        }\n        const nodeLabel = getNodeLabel(nodeType, node);\n        nodes.push({\n            name: node.uid,\n            id: node.uid,\n            ...node,\n            nodeType,\n            nodeLabel,\n            x: 200 + randomInt(1, 50),\n            y: 150 + randomInt(1, 50),\n        });\n    }\n\n    // Flatten links\n    const links = [];\n\n    for (const linkMap_ of graph.links) {\n        const nodeId = linkMap_[0];\n        const node = graph.nodes.get(nodeId);\n\n        if (node && node.lens) {\n            // Don't link lens nodes, it's ugly\n            continue\n        }\n        const linkMap = linkMap_[1];\n        for (const links_ of linkMap.values()) {\n            if (links_[1] === 'risks') {\n                continue\n            }\n            if (links_[1] === '~scope') {\n                continue\n            }\n\n            if (links_[1][0] === '~') {\n                links.push({\n                    source: links_[2],\n                    label: links_[1].substr(1),\n                    target: links_[0],\n                });\n            } else {\n                links.push({\n                    source: links_[0],\n                    label: links_[1],\n                    target: links_[2],\n                });\n            }\n\n        }\n    }\n\n    return {\n        nodes,\n        links,\n    };\n};\n\nconst mapLabel = (label: any) => {\n    if (label === 'children') {\n        return 'executed'\n    }\n    return label\n};\n\n\nconst percentToColor = (percentile: any) => {\n    const hue = (100 - percentile) * 40 / 100;\n    // if(percentile >= 75){\n    //     // BRIGHT ASS RED\n    // } else if (percentile >= 50){\n    //     //YELLOW\n    // } else if(percentile >=25) {\n    //     //blue \n    // } else if(percentile > 0){\n    //     // GREEN\n    // } else {\n    //     // more green\n    // }\n\n    return `hsl(${hue}, 100%, 50%)`;\n};\n\n\nconst calcNodeRiskPercentile = (_nodeRisk: any, _allRisks: any) => {\n    let nodeRisk = _nodeRisk;\n    if (typeof _nodeRisk === 'object') {\n        nodeRisk = _nodeRisk.risk;\n    }\n\n    const allRisks = _allRisks\n        .map((n: any) => n || 0)\n        .sort((a: any, b: any) => a - b);\n\n    if (nodeRisk === undefined || nodeRisk === 0 || allRisks.length === 0) {\n        return 0\n    }\n\n    let riskIndex = 0;\n    for (const risk of allRisks) {\n        if (nodeRisk >= risk) {\n            riskIndex += 1;\n        }\n    }\n\n    return Math.floor((riskIndex / allRisks.length) * 100)\n};\n\n\nconst nodeSize = (node: any, Graph: any) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile >= 75) {\n        return 6\n    } else if (riskPercentile >= 25) {\n        return 5\n    } else {\n        return 4\n    }\n};\n\nconst findNode = (id: any, nodes: any) => {\n    for (const node of (nodes || [])) {\n        if (node.id === id) {\n            return node\n        }\n    }\n    return null\n};\n\n// FILE TYPE COLORS\nconst calcNodeRgb = (node: any, colorHash: any) => {\n    if (node.nodeType === 'Process') {\n        return [31, 185, 128]\n    } else if (node.nodeType === 'File') {\n        return [177, 93, 255]\n    } \n    \n    // else if (node.nodeType === 'Lens'){\n    //     return []\n    // } else if(node.nodeType === 'IpPort'){\n    //     return []\n    // } else if(node.nodeType === 'IpConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessInboundConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessOutboundConnection'){\n    //     return []\n    // } \n    \n    else{\n        return colorHash.rgb(node.nodeType)\n    }\n}\n\n\nconst riskColor = (node: any, Graph: any, colorHash: any) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        const nodeColors = calcNodeRgb(node, colorHash);\n        return `rgba(${nodeColors[0]}, ${nodeColors[1]}, ${nodeColors[2]}, 1)`;\n    }\n\n    return percentToColor(riskPercentile);\n};\n\nconst calcLinkRisk = (link: any, Graph: any) => {\n    let srcNode = findNode(link.source, Graph.nodes)\n        || findNode(link.source.name, Graph.nodes);\n    let dstNode = findNode(link.target, Graph.nodes)\n        || findNode(link.target.name, Graph.nodes);\n\n    if (srcNode === null) {\n        srcNode = {risk: 0}\n    }\n\n    if (dstNode === null) {\n        dstNode = {risk: 0}\n    }\n\n    const srcRisk = srcNode.risk || 0;\n    const dstRisk = dstNode.risk || 0;\n\n    return Math.round((srcRisk + dstRisk) / 2)\n};\n\nconst calcLinkRiskPercentile = (link: any, Graph: any) => {\n    const linkRisk = calcLinkRisk(link, Graph);\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    return calcNodeRiskPercentile(linkRisk, nodes);\n};\n\nconst calcLinkColor = (link: any, Graph: any) => {\n    const risk = calcLinkRiskPercentile(link, Graph);\n    // Default link color if no risk\n    if (risk === 0) {return 'white'}\n    return percentToColor(risk);\n};\n\n\nexport const mapNodeProps = (node, f) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            if(Array.isArray(node[prop])) {\n                if (node[prop].length > 0) {\n                    if (node[prop][0].uid === undefined) {\n                        f(prop)\n                    }\n                }\n            } else {\n                f(prop)\n            }\n        }\n    }\n};\n\nconst calcLinkParticleWidth = (link, Graph) => {\n    const linkRiskPercentile = calcLinkRiskPercentile(link, Graph);\n    if (linkRiskPercentile >= 75) {\n        return 5\n    } else if (linkRiskPercentile >= 50) {\n        return 4\n    }  else if (linkRiskPercentile >= 25) {\n        return 3\n    } else {\n        return 2\n    }\n};\n\nconst calcLinkDirectionalArrowRelPos = (link, Graph) => {\n    const node = findNode(link.target, Graph.nodes)\n        || findNode(link.target.name, Graph.nodes);\n\n    if (node === null || node.risk === 0) {\n        return 1.0\n    }\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {return 1.0}\n\n    if (riskPercentile >= 75) {\n        return 0.95\n    } else if (riskPercentile >= 50) {\n        return 0.9\n    } else if (riskPercentile >= 25) {\n        return 0.85\n    } else {\n        return 1.0\n    }\n};\n\n\n\n// merges y into x, returns true if update occurred\nconst mergeNodes = (x, y) => {\n    let merged = false;\n    mapNodeProps(y, (prop) => {\n        if (!Object.prototype.hasOwnProperty.call(x, prop)) {\n            merged = true;\n            x[prop] = y[prop]\n        }\n    });\n\n    return merged;\n};\n\n\ntype LinkT = {\n\n    source: string,\n    label: string,\n    target: string,\n}\n\ntype GraphT = { \n    nodes: [any],\n    links: [LinkT],\n}\n\n// #TODO: This algorithm is exponential, and doesn't have to be\nconst mergeGraphs = (curGraph: GraphT, update: graphT) => {\n    // Merges two graphs into a new graph\n    // returns 'null' if there are no updates to be made\n\n    if (!update.nodes && !updates.links) {\n        // empty update\n        return null\n    }\n\n    const outputGraph = {nodes: [], links: []};\n\n    let updated = false;\n\n    const nodes = new Map();\n    const links = new Map();\n\n    for (const node of curGraph.nodes) {\n        nodes.set(node.uid, node)\n    }\n\n    for (const newNode of update.nodes) {\n        const node = nodes.get(newNode.uid);\n        if (node) {\n            if (mergeNodes(node, newNode)) {\n                updated = true;\n            }\n        } else {\n            nodes.set(newNode.uid, newNode);\n            updated = true;\n        }\n    }\n\n    for (const link of curGraph.links) {\n        if (link) {\n            const source = link.source.uid || link.source;\n            const target = link.target.uid || link.target;\n            links.set(\n                source + link.label + target,\n                link,\n            )\n        }\n    }\n\n    for (const newLink of update.links) {\n        const newLinkSource =  newLink.source.id || newLink.source;\n        const newLinkTarget =  newLink.target.id || newLink.target;\n        const link = links.get(newLinkSource + newLink.label + newLinkTarget);\n        if (!link) {\n            links.set(newLink.source + newLink.label + newLink.target, newLink);\n            updated = true;\n        }\n    }\n\n    outputGraph.nodes = Array.from(nodes.values());\n    outputGraph.links = Array.from(links.values());\n    if (updated) {\n        return outputGraph;\n    } else {\n        return null;\n    }\n}\n\nconst updateGraph = async (lensName: string, state: any, setState: any) => {\n    if (!lensName) {\n        return;\n    }\n    console.log(\"Retrieving graph from \" + lensName);\n    await retrieveGraph(lensName)\n        .then(async ([updated_nodes, removed_nodes]) => {\n            console.log('updated_nodes', updated_nodes);\n\n            const update = await dgraphNodesToD3Format(updated_nodes) as any;\n            const mergeUpdate = mergeGraphs(state.graphData, update);\n            if (mergeUpdate !== null) {\n                if (state.curLensName === lensName) {\n                    console.log(\"update for \",  state.curLensName, lensName);\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: mergeUpdate,\n                    })\n                } else {\n                    console.log(\"update, switch, for \",  state.curLensName, lensName);\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: update,\n                    })\n                }\n            }\n        })\n        .catch((e) => console.error(\"Failed to retrieveGraph \", e))\n}\n\nconst GraphDisplay = ({lensName, setCurNode}: any) => {\n    const [state, setState] = React.useState({\n        graphData: {nodes: [], links: []},\n        curLensName: lensName,\n    });\n    const forceRef = useRef(null);\n\n    // When the lensName changes we should reset the graphData\n    // useEffect(() => {\n    //     console.log('useEffect: ', lensName , state.curLensName);\n    //     if (lensName !== state.curLensName) {\n    //         console.log('useEffect clearing: ', lensName , state.curLensName);\n    //         setState({\n    //             ...state,\n    //             curLensName: lensName,\n    //             graphData: {nodes: [], links: []},\n    //         })\n    //     }\n    // }, [lensName, state])\n\n    useEffect(() => {\n        console.log(\"useEffect - setting forceRef state\");\n        forceRef.current.d3Force(\"link\", d3.forceLink());\n        forceRef.current.d3Force('collide', d3.forceCollide(22));\n        forceRef.current.d3Force(\"charge\", d3.forceManyBody());\n        forceRef.current.d3Force('box', () => {\n            const N = 100;\n            // console.log(Graph.width(), Graph.height())\n            const SQUARE_HALF_SIDE = 20 * N * 0.5;\n            state.graphData.nodes.forEach(node => {\n                const x = node.x || 0, y = node.y || 0;\n                // bounce on box walls\n                if (Math.abs(x) > SQUARE_HALF_SIDE) { node.vx *= -1; }\n                if (Math.abs(y) > SQUARE_HALF_SIDE) { node.vy *= -1; }\n            });\n        });\n    }, [state])\n\n\n    useEffect(() => {\n        updateGraph(lensName, state, setState);\n        const interval = setInterval(async () => {\n            if (lensName) {\n                await updateGraph(lensName, state, setState);\n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [lensName, state]);\n\n    console.log('GraphDisplay: ', lensName);\n\n    const graphData = state.graphData;\n    \n    const colorHash = new ColorHash({});\n\n    // #TODO: ADD ZOOM HANDLERS FOR MAX ZOOM IN/OUT\n\n\n    return(\n        <>\n        \n            <ForceGraph2D\n                graphData={graphData}\n                nodeLabel={(node: any) => node.nodeLabel}\n                enableNodeDrag={true}\n                linkDirectionalParticles = {1}\n                linkDirectionalParticleWidth = {(link) => {\n                    return calcLinkParticleWidth(link, graphData);\n                }}\n                linkDirectionalParticleColor = {(link) => {\n                    return calcLinkColor(link, graphData)\n                }}\n                linkDirectionalParticleSpeed = {0.005}\n                onNodeClick= {\n                    (node: any, event: any) => {\n                        console.log('clicked', node.nodeLabel);\n                        setCurNode(node);\n                    }\n                }\n                linkDirectionalArrowLength = {8}\n                linkWidth = {4}\n                linkDirectionalArrowRelPos = {(link => {\n                    return calcLinkDirectionalArrowRelPos(link, graphData);\n                })}\n                linkCanvasObjectMode = {(() => 'after')}\n                linkCanvasObject = {((link: any, ctx: any) => {\n                    const MAX_FONT_SIZE = 8;\n                    const LABEL_NODE_MARGIN = 8 * 1.5;\n                    const start = link.source;\n                    const end = link.target;\n                    // ignore unbound links\n                    link.color = calcLinkColor(link, graphData);\n        \n                    if (typeof start !== 'object' || typeof end !== 'object') return;\n                    // calculate label positioning\n                    const textPos = Object.assign(\n                        ...['x', 'y'].map((c: any) => (\n                            {\n                                [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\n                            }\n                        )) as any\n                    );\n\n                    const relLink = { x: end.x - start.x, y: end.y - start.y };\n        \n                    const maxTextLength = Math.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) - LABEL_NODE_MARGIN * 8;\n        \n                    let textAngle = Math.atan2(relLink.y, relLink.x);\n                    // maintain label vertical orientation for legibility\n                    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n                    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n                    const label = mapLabel(link.label);\n                    // estimate fontSize to fit in link length\n                    ctx.font = '50px Arial';\n                    const fontSize = Math.min(MAX_FONT_SIZE, maxTextLength / ctx.measureText(label).width);\n                    ctx.font = `${fontSize + 5}px Arial`;\n        \n                    let textWidth = ctx.measureText(label).width;\n        \n                    textWidth += Math.round(textWidth * 0.25);\n        \n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // draw text label (with background rect)\n                    ctx.save();\n                    ctx.translate(textPos.x, textPos.y);\n                    ctx.rotate(textAngle);\n                    ctx.fillStyle = 'rgb(115,222,255,1)';\n                    ctx.fillRect(- bckgDimensions[0] / 2, - bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'white';\n                    //content, left/right, top/bottom\n                    ctx.fillText(label, .75, 3);\n                    ctx.restore();\n                })}\n                nodeCanvasObject= {((node: any, ctx: any, globalScale: any) => {\n                    // add ring just for highlighted nodes\n\n                    const NODE_R = nodeSize(node, graphData);\n                    ctx.save();\n        \n                    // Risk outline color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.3, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = riskColor(node, graphData, colorHash);\n                    ctx.fill();\n                    ctx.restore();\n        \n                    ctx.save();\n        \n                    // Node color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.2, 0, 2 * Math.PI, false);\n        \n                    const nodeRbg = calcNodeRgb(node, colorHash);\n        \n                    ctx.fillStyle = `rgba(${nodeRbg[0]}, ${nodeRbg[1]}, ${nodeRbg[2]}, 1)`;\n                    ctx.fill();\n                    ctx.restore();\n        \n                    const label = node.nodeLabel;\n        \n                    const fontSize = 15/globalScale;\n        \n                    ctx.font = `${fontSize}px Arial`;\n                \n        \n                    const textWidth = ctx.measureText(label).width;\n        \n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // node label color\n                    ctx.fillStyle = 'rgba(48, 48, 48, 0.8)';\n                    ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n                    ctx.fillStyle = 'white';\n                    ctx.fillText(label, node.x, node.y);\n        \n                })}\n                ref={forceRef}\n            />\n        </>\n    )\n}\n\nexport default GraphDisplay;","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { mapEdgeProps } from './SideBarContent';\nimport {mapNodeProps} from './GraphViz';\n\n\nconst useStyles = makeStyles({\n    root: {\n        fontSize: \"1em\"\n    },\n    table: {\n        minWidth: 450,\n    }, \n    tableHeader: {\n        fontSize: \"18px\", \n        color: \"#EAFDFF\", \n    }\n});\n\nfunction innerTable(node: any, classes: any) {\n    if(node) {\n        return (\n        <TableHead >\n            <TableRow>\n                <TableCell \n                    align=\"left\" \n                    className={classes.tableHeader}>\n                    <b> PROPERTY </b>\n                </TableCell>\n                <TableCell \n                    align=\"left\"\n                    className={classes.tableHeader}\n                >\n                    <b> VALUE </b>\n                </TableCell>\n            </TableRow>\n        </TableHead>\n    )\n    } else {\n        return <div></div>\n    }\n}\n\nfunction NodeTable({node}:any){\n    const classes = useStyles();\n    const hidden = new Set(\n        ['id', 'dgraph.type', '__indexColor', 'risks','uid', 'scope', 'name', 'nodeType', 'nodeLabel', 'x', 'y', 'index', 'vy', 'vx', 'fx', 'fy']\n    );\n\n    mapEdgeProps(node, (edgeName: string, _neighbor: any) => {\n        hidden.add(edgeName)\n    });\n\n    const displayNode = {} as any; \n\n    mapNodeProps(\n        node, \n        (propName: string) => {\n            const prop = node[propName];\n\n            if(!hidden.has(propName)){\n                if (prop) {\n                    if (propName.includes('_time')) {\n                        displayNode[propName] = new Date(prop).toLocaleString()\n                    } else {\n                        displayNode[propName] = prop;\n                    }\n                }\n            }           \n        }\n    )\n\n        return(\n            <TableContainer>\n                <Table className={classes.table}>\n                {\n                    innerTable(node, classes)\n                }\n                <TableBody>\n                        {\n                            Object.entries(displayNode).map((entry) => {\n                                const [key, value] = entry;\n                                \n                                return(\n                                    <TableRow>\n                                        <TableCell align=\"left\"><b>{key}</b></TableCell>\n                                        <TableCell align=\"left\">{value as any}</TableCell>\n                                    </TableRow>\n                                ) \n                            })\n                        }\n                </TableBody>\n                </Table>\n            </TableContainer>\n        ) || \"no no\"\n        \n    \n}\n\n\nexport default  NodeTable ","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport NodeTable from './NodeTable'\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport LensIcon from '@material-ui/icons/Lens';\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst useStyles = makeStyles({\n    root:{\n        fontSize: \"1rem\",\n    },\n    button: {\n        width: \".005%\",\n        color: \"white\",\n        backgroundColor:\"#424242\",\n    },\n    title: {\n        fontSize: \"25px\",\n        color: \"#ffffff\",\n    },\n    icon:{\n        color: \"#42C6FF\",\n        margin: \"15px 0 0 10px\",\n    }, \n    expand:{\n        color: \"#42C6FF\",\n        margin: \"0px\"\n    },\n    header:{\n        display: \"flex\"\n    }, \n    table: {\n        minWidth: 450\n    },\n});\n\nfunction createData(name: string) {\n    return { name };\n}\n\nfunction SelectLens(props: any) {\n    const classes = useStyles(); \n    // lensRows.push(createData(props.setLens(props.lens) ))\n    return (\n        <>\n                <TableRow key={props.lens}>\n                        <TableCell component=\"th\" scope=\"row\">\n                        <Button \n                            onClick={\n                                () => { \n                                    props.setLens(props.lens)    \n                                }\n                        }>\n                            {props.lens + \"\\t\\t\" + props.score}\n                        </Button>\n                        </TableCell>\n                    </TableRow>\n        </>\n    )\n}\n\nfunction ToggleLensTable({setLens}: any) {\n    const [state, setState] = useState({\n        toggled: true,\n        lenses: [],\n    });\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            console.log(\"Fetching lenses\");\n            getLenses()\n                .then((response) => {\n                    if (response.lenses && response.lenses !== state.lenses) {\n                        setState({\n                            ...state,\n                            lenses: response.lenses || [],\n                        })\n                    }\n                })\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n\n    return (\n        <>\n            <div className={classes.header}>\n                <b className={classes.title}>\n                    <BubbleChartIcon className = {classes.icon} />\n                    LENSES \n                </b>\n                <Button\n                    className = {classes.button}\n                    onClick={() => { \n                        setState({\n                            ...state,\n                            toggled: !state.toggled,\n                        }) \n                    }}> \n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n\n            <div className=\"lensToggle\">\n                {state.toggled && state.lenses &&\n                    state.lenses.map(\n                        (_lens) => {\n                            const lens = _lens as any;\n                            // lensRows.push(lens);\n                            return(\n                                <TableContainer>\n                                    <Table className={classes.table} aria-label=\"lens table\">\n                                        <TableBody>\n                                            <SelectLens \n                                                key={new Number(lens.uid)}\n                                                uid={lens.uid}\n                                                lens={lens.lens}\n                                                score={lens.score}\n                                                setLens={setLens}\n                                            />\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            )\n                            \n                        }\n                    )\n                }\n            </div>\n            \n            <Divider />\n        </>\n    )\n}\n\nconst engagement_edge = \"http://localhost:8900/\";\n\nconst getLenses = async () => {\n    const res = await fetch(`${engagement_edge}getLenses`,\n        {\n            method: 'post',\n            body: JSON.stringify({\n                'prefix': '',\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        });\n    const jres = await res.json();\n\n    return jres['success'];\n};\n\nexport const mapEdgeProps = (node: any, f: any) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            if(Array.isArray(node[prop])) {\n                for (const neighbor of node[prop]) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            }\n        }\n    }\n};\n\nconst NodeDetails = ({node}: any) => {\n    // #TODO: Remove hidden fields from our node before displaying\n    // Display remaining fields of node in our component=\"div\"\n\n    return (\n        <>\n            <NodeTable node={node} />\n        </>\n    )\n}\n\n\nfunction ToggleNodeTable({curNode}: any) {\n    const [toggled, toggle] = useState(true);\n    const classes = useStyles();\n    return (\n        <>\n        <div>\n            <div className={classes.header}>\n                <b className={classes.title}><LensIcon className={classes.icon}/> NODE</b>\n                <Button\n                    className = {classes.button}\n                    onClick={\n                        () => { toggle(toggled => !toggled) }\n                    }> \t\n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n\n            <div className=\"nodeToggle\">\n                {\n                    toggled && \n                        <>\n                            { <NodeDetails node={curNode}/> }\n                        </>\n                }\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default function SideBarContent({setLens, curNode}: any) {\n    return (\n        <>\n            <ToggleLensTable setLens={setLens} />\n            <ToggleNodeTable curNode={curNode} />\n        </>\n    );\n}\n\n","import GraphDisplay from \"./GraphViz\";\nimport React from \"react\";\nimport {useState} from \"react\";\nimport SideBarContent from './SideBarContent'\nimport clsx from \"clsx\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport Button from \"@material-ui/core/Button\";\n\nconst drawerWidth = 500;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      color: \"#42C6FF\"\n    },\n    hide: {\n      display: \"none\"\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0\n    },\n    drawerPaper: {\n      width: drawerWidth\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\"\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      marginLeft: -drawerWidth\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen\n      }),\n      marginLeft: 0,\n    },\n    lensName:{\n      color:\"#EAFDFF\",\n      fontSize: \"2rem\", \n      margin: \"10px 15px 0px 0px\"\n    },\n    header:{\n      fontSize: \"35px\"\n    }, \n    close:{\n      color:\"#42C6FF\",\n    }\n  })\n);\n\nexport default function SideBar({setLens, curLens, curNode}: any) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      {/* <CssBaseline /> */}\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            {/* // Menu Icon  */}\n            &#9776;\n          </IconButton>\n          <Typography \n            variant=\"h5\" \n            noWrap\n          >\n            <b className={classes.header}> GRAPL</b>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <Button onClick={handleDrawerClose}><KeyboardArrowLeftIcon className={classes.close}/></Button>\n        </div>\n\n        <Divider />\n\n        <SideBarContent \n        setLens={setLens} \n        curNode={curNode}\n      />\n\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={ classes.drawerHeader } />\n      <h3 className={ classes.lensName }>\n        {/* selected lens name */}\n        {curLens || \"\"} \n      </h3>\n\n        <Typography paragraph></Typography>\n      </main>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n// const darkTheme = createMuiTheme({\n//   palette: {\n//     type: 'dark',\n//     primary: {\n//       main: '#73DEFF',\n//     }, \n//     secondary: {\n//       main: '#81d4fa',\n//     },\n//   }\n// })\n\n// const useStyles = makeStyles({\n//   list: {\n//     width: 500,\n//   },\n//   heading: {\n//     margin: \"1em\",\n//     color: \"#B15DFF\"\n//   },\n//   button:{\n//     margin: \"1em\",\n//   }\n// });\n\n\n\n// export default function SideBar({setLens, curLens, curNode}: any) {\n//   const classes = useStyles();\n//   const [state, setState] = React.useState({\n//     left: false,\n//   });\n\n//   const toggleDrawer = (anchor: Anchor, open: boolean) => (\n//     event: React.KeyboardEvent | React.MouseEvent\n//   ) => {\n//     if (\n//       event.type === \"keydown\" &&\n//       ((event as React.KeyboardEvent).key === \"Tab\" ||\n//         (event as React.KeyboardEvent).key === \"Shift\")\n//     ) {\n//       return;\n//     }\n\n//     setState({ ...state, [anchor]: open });\n//   };\n\n//   const list = (anchor: Anchor) => (\n//     <div\n//       className={clsx(classes.list, {})}\n//       role=\"presentation\"\n//       //#TODO: Make onclick below an X button\n//       // onClick={toggleDrawer(anchor, false)}\n//       onKeyDown={toggleDrawer(anchor, false)}\n//     >\n//       <SideBarContent \n//         setLens={setLens} \n//         curNode={curNode}\n//       />\n//     </div>\n//   );\n\n//   return (\n//     <>\n//       <ThemeProvider theme={darkTheme}>\n//       {([\"left\"] as Anchor[]).map((anchor) => (\n//         <React.Fragment key={anchor}>\n//           <Button></Button>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             className={classes.button}\n//             onClick={toggleDrawer(anchor, true)}\n//           >\n//             Engagements\n//           </Button>\n\n//           <Drawer\n//             anchor={anchor}\n//             open={state[anchor]}\n//             onClose={toggleDrawer(anchor, false)}\n//           >\n//             {list(anchor)}\n//           </Drawer>\n          \n//           <h3 className = {classes.heading}>{curLens || \"\"} </h3>\n          \n\n//         </React.Fragment>\n//       ))}\n//     </ThemeProvider>\n//     </>\n//   );\n// }\n\nexport const EngagementUx = () => {\n    \n    const [state, setState] = React.useState({\n        curLens: \"\",\n        curNode: null,\n    });\n    \n    console.log('EngagementUX: curLens, ', state.curLens);\n\n    return (\n        <>\n            <SideBar \n                setLens={\n                    (lens: any) => setState({\n                        ...state,\n                        curLens: lens,\n                    })\n                }\n                curLens={state.curLens}\n                curNode={state.curNode}\n            />\n\n            <GraphDisplay \n                lensName={state.curLens} \n                setCurNode={(node: any) => {\n                    setState({\n                        ...state,\n                        curNode: node,\n                    })\n                }}\n            />\n        </>\n    )\n}","import React, {useEffect} from 'react';\nimport './LogIn.css';\nimport {checkLogin, LogIn} from './Login';\nimport {EngagementUx} from \"./components/SideBar\";\n// import {PageNotFound} from \"./components/PageNotFound\";\n\nconsole.log(\"App loading\");\n\n// Updates our react state, as well as localStorage state, to reflect the page\n// we should render\nconst redirectTo = (routeState: any, setRouteState: any, page_name: string) => {\n    setRouteState({\n        curPage: page_name,\n    })\n    localStorage.setItem(\"grapl_curPage\", page_name)\n}\n\nconst Router = ({}: any) => {\n    // By default, load either the last page we were on, or the login page\n    // if there is no last page\n    const [routeState, setRouteState] = React.useState({\n        curPage: localStorage.getItem(\"grapl_curPage\") || \"login\",\n        lastCheckLoginCheck: Date.now(),\n    })\n\n\n\n    useEffect(() => {\n        if (routeState.curPage !== \"login\") {\n            if (Date.now() - routeState.lastCheckLoginCheck > 1000) {\n                checkLogin()\n                    .then((loggedIn) => {\n                        console.log('Not logged in, redirecting.');\n                        if (!loggedIn && routeState.curPage !== \"login\") {\n                            redirectTo(routeState, setRouteState, \"login\")\n                        }\n                    })\n            }}\n    });\n\n    if (routeState.curPage === \"login\") {\n        console.log(\"routing to engagement_ux page\");\n        return (\n            <LogIn loginSuccess={\n                () => redirectTo(routeState, setRouteState, \"engagement_ux\")\n            }></LogIn>\n        )\n    }\n\n    if (routeState.curPage === \"engagement_ux\") {\n        console.log(\"routing to login page\");\n        return <EngagementUx/>\n    }\n\n    // #TODO: This should be a nice landing page explaining that something has gone\n    // wrong, and give a redirect back to the login page\n    console.warn(\"Invalid Page State\");\n    return <div>Invalid Page State</div>\n    // <PageNotFound />\n}\n\n\nexport default function App() {\n    console.log(\"App loaded\");\n    return (\n        <>\n            <Router></Router>\n        </>\n    )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#373740',\n        }\n    }\n})\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n    <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n        <App />, \n    </ThemeProvider>\n    </React.StrictMode>\n    ,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}