---
env:
  PANTS_CONFIG_FILES: "['pants.toml', 'pants.ci.toml']"
  BUILDKITE_PLUGIN_VAULT_ENV_SECRET_PREFIX: "secret/data/buildkite/env"

steps:
  - label: ":docker: Build Docker Containers"
    command:
      # Note: all these images are uploaded to the `raw`
      # repository. If they all get built successfully, then we'll
      # promote them as a group later.
      - ".buildkite/scripts/build_and_upload_images.sh"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - CLOUDSMITH_API_KEY
            - grapl/TOOLCHAIN_AUTH_TOKEN
      - docker-login#v2.0.1:
          username: grapl-cicd
          password-env: CLOUDSMITH_API_KEY
          server: docker.cloudsmith.io
    agents:
      queue: "docker"
    retry:
      automatic:
        - exit_status: 42 # Special status for "buildx --push failed"
          limit: 2
    artifact_paths:
      - "*.grapl-artifacts.json"

  - group: ":firecracker: Build and upload Firecracker packages"
    steps:
      # Artifacts consumed by "Upload Firecracker Packages"
      - label: ":firecracker: Build Kernel"
        command:
          - "make dist/firecracker_kernel.tar.gz"
        retry:
          automatic: true
        artifact_paths:
          - "dist/*"
        agents:
          queue: "beefy"

      # Artifacts consumed by "Upload Firecracker Packages"
      - label: ":firecracker: Build RootFS"
        command:
          - "make dist/firecracker_rootfs.tar.gz"
        retry:
          automatic: true
        artifact_paths:
          - "dist/*"
        agents:
          queue: "packer"

      - wait

      - label: ":firecracker: Upload Firecracker packages"
        command:
          # Note: these packages are uploaded to the `raw`
          # repository. If they all get built successfully, then we'll
          # promote them as a group later.
          - ".buildkite/scripts/upload_firecracker_packages.sh"
        plugins:
          - artifacts#v1.6.0:
              download:
                - "dist/*"
          - grapl-security/vault-login#v0.1.3
          - grapl-security/vault-env#v0.2.0:
              secrets:
                # We need access to the CLOUDSMITH_API_KEY so we can upload
                # to Cloudsmith.
                - CLOUDSMITH_API_KEY
        agents:
          # the "docker" queue has access to the CLOUDSMITH_API_KEY
          queue: "docker"
        artifact_paths:
          - "*.grapl-artifacts.json"

  - wait

  # Downloads and operates on all the *.grapl-artifacts.json files
  # that were uploaded in any previous steps of this pipeline.
  - label: "Merge artifacts files"
    command:
      - .buildkite/scripts/merge_artifact_files.sh

  - wait

  # If we have some artifacts to promote in Cloudsmith, then upload
  # the promotion step. If we have nothing, then the promotion step
  # will fail.
  - label: ":thinking_face: Anything to promote?"
    plugins:
      - artifacts#v1.6.0:
          download: all_artifacts.json
    command:
      - .buildkite/scripts/upload_promotion_step_if_needed.sh

  - wait

  - label: ":medal: Create new release candidate"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
      - grapl-security/grapl-rc#v0.1.7:
          artifact_file: all_artifacts.json
          stacks:
            - grapl/grapl/testing
            - grapl/rust-integration-tests/testing
    env:
      # We're going to be doing some git manipulation, so it's best if
      # we have a clean slate.
      BUILDKITE_CLEAN_CHECKOUT: true
      # TODO: set these more centrally
      GIT_AUTHOR_NAME: "Grapl CI/CD"
      GIT_AUTHOR_EMAIL: "grapl-cicd@graplsecurity.com"
    agents:
      queue: "rc"

  - wait

  - label: ":writing_hand: Record successful build"
    command:
      - record_successful_pipeline_run.sh
    plugins:
      - grapl-security/grapl-release#v0.1.2
