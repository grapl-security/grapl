---
env:
  PANTS_CONFIG_FILES: "['pants.toml', 'pants.ci.toml']"

steps:
  - label: ":aws-lambda::rust: Build Rust Lambdas"
    key: "rust-lambdas"
    plugins:
      - chronotc/monorepo-diff#v2.0.4:
          diff: .buildkite/shared/scripts/diff.sh
          log_level: "debug"
          watch:
            - path:
                - "src/rust/" # This is not minimal, obviously
                - "docker-compose.lambda-zips.rust.yml"
              config:
                command:
                  - "make build-lambda-zips-rust"
                artifact_paths:
                  - "dist/*-lambda.zip"
                agents:
                  queue: "docker"

  - label: ":aws-lambda::typescript: Build Typescript Lambdas"
    key: "js-lambdas"
    plugins:
      - chronotc/monorepo-diff#v2.0.4:
          diff: .buildkite/shared/scripts/diff.sh
          log_level: "debug"
          watch:
            - path:
                - "src/js/" # This is not minimal, obviously
                - "docker-compose.lambda-zips.js.yml"
              config:
                command:
                  - "make build-lambda-zips-js"
                artifact_paths:
                  - "dist/*-lambda.zip"
                agents:
                  queue: "docker"

  - label: ":aws-lambda::python: Build Python Lambdas"
    key: "python-lambdas"
    command:
      # Strictly speaking, this would also build Python wheels, but
      # those aren't named *-lambda.zip
      - "./pants --changed-since=internal/last-successful-merge --changed-dependees=transitive package"
    artifact_paths:
      - "dist/*-lambda.zip"

  - label: ":docker: Build Docker Containers"
    command:
      - ".buildkite/scripts/build_and_upload_containers.sh"
    key: "docker-containers"
    plugins:
      - seek-oss/aws-sm#v2.3.1:
          env:
            CLOUDSMITH_API_KEY: "cloudsmith-token"
      - docker-login#v2.0.1:
          username: grapl-cicd
          password-env: CLOUDSMITH_API_KEY
          server: docker.cloudsmith.io
    agents:
      queue: "docker"
    artifact_paths:
      - "*.grapl-artifacts.json"

  - label: ":aws-lambda::cloudsmith: Upload Lambda ZIPs"
    command:
      - ".buildkite/scripts/upload_lambda_artifacts.sh"
    depends_on:
      - "rust-lambdas"
      - "js-lambdas"
      - "python-lambdas"
    plugins:
      - seek-oss/aws-sm#v2.3.1:
          env:
            CLOUDSMITH_API_KEY: "cloudsmith-token"
    agents:
      queue: "artifact-uploaders"
    artifact_paths:
      - "*.grapl-artifacts.json"

  - label: ":thinking_face: UX Build?"
    plugins:
      - chronotc/monorepo-diff#v2.0.4:
          diff: .buildkite/shared/scripts/diff.sh
          log_level: "debug"
          watch:
            - path:
                - "src/js/engagement_view/"
                - ".buildkite/scripts/upload_ux_assets.sh"
                - ".buildkite/pipeline.merge.ux-build.yml"
              config:
                label: ":pipeline: Upload UX Build"
                command: "buildkite-agent pipeline upload .buildkite/pipeline.merge.ux-build.yml"

  - wait

  # Downloads and operates on all the *.grapl-artifacts.json files
  # that were uploaded in any previous steps of this pipeline.
  - label: "Merge artifacts files"
    command:
      - .buildkite/scripts/merge_artifact_files.sh

  - wait

  - label: ":medal: Create new release candidate"
    command:
      - .buildkite/scripts/create_new_rc.sh
    plugins:
      - seek-oss/aws-sm#v2.3.1:
          env:
            PULUMI_ACCESS_TOKEN: "pulumi-token"
    env:
      # We're going to be doing some git manipulation, so it's best if
      # we have a clean slate.
      BUILDKITE_CLEAN_CHECKOUT: true
    agents:
      queue: "rc"

  - wait

  - label: ":writing_hand: Record successful build"
    command:
      - .buildkite/shared/steps/record_successful_pipeline_run.sh
