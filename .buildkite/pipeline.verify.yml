---
env:
  PANTS_CONFIG_FILES: "['pants.toml', 'pants.ci.toml']"
  TAG: ci-pipeline

# TODO: Cache for JS, Rust deps

# TODO: Will want to use sccache for Rust, I think

# TODO: possibly just us Docker for caching?

steps:
  - label: ":github: Validate CODEOWNERS"
    command: ".buildkite/scripts/validate_codeowners.sh"
    plugins:
      - docker#v3.8.0:
          image: "node"
          entrypoint: "bash"

  - label: ":large_blue_square::lint-roller: Lint Protobuf"
    command:
      - make lint-proto

  - label: ":large_blue_square::face_with_symbols_on_mouth: Protobuf Breaking Changes"
    command:
      - make lint-proto-breaking

  - label: ":rust: rustfmt"
    command:
      - cd src/rust
      - rustup set profile default
      - bin/format --check

  - label: ":rust: Linting"
    command:
      - cd src/rust
      - bin/lint
    agents:
      queue: "beefy"

  - label: ":rust: Unit Tests"
    command:
      - make test-unit-rust
    plugins:
      - grapl-security/codecov#v0.1.0
    agents:
      queue: "beefy"

  - label: ":writing_hand: Test Grapl Template Generator"
    command:
      - make test-grapl-template-generator
    agents:
      queue: "beefy"

  - label: ":python::jeans: Linting"
    command:
      - make lint-python

  - label: ":bash::jeans: Linting"
    command:
      - make lint-shell

  - label: ":python::jeans: Unit Tests"
    command:
      - make test-unit-python
    plugins:
      - grapl-security/codecov#v0.1.0

  - label: ":python::jeans: Typechecking"
    command:
      - make test-typecheck

  # TODO: Consider beefy queue
  - label: ":typescript::docker: Unit Tests"
    command:
      - make test-unit-js
    plugins:
      - grapl-security/codecov#v0.1.0

  - label: ":typescript::yaml::lint-roller: Lint using Prettier"
    command:
      - make lint-prettier

  - label: "Build docs :book:"
    command:
      - make build-docs

  - label: ":yarn: Build UX"
    command: make build-ux
    plugins:
      - docker#v3.8.0:
          # This container actually contains `make`, too!
          image: "node:16.5.0"

  - label: ":aws-lambda::package: Create Lambda Zips"
    command:
      - make build-lambda-zips
    agents:
      queue: "beefy"
    # There are some issues with the docker nature of this step at the
    # moment that can cause this to spuriously fail; we'll just
    # automatically retry it for the time being.
    retry:
      automatic:
        limit: 2

  - label: ":hammer: Integration Tests"
    command:
      - make run-registry
      - make test-integration
    env:
      GRAPL_LOG_LEVEL: "DEBUG"
    agents:
      queue: "beefy"
    artifact_paths:
      - "test_artifacts/**/*"

  - label: ":hammer: E2E Tests"
    command:
      - make test-e2e
    env:
      GRAPL_LOG_LEVEL: "DEBUG"
      DUMP_ARTIFACTS: "True"
    agents:
      queue: "beefy"
    artifact_paths:
      - "test_artifacts/**/*"
    retry:
      automatic:
        limit: 5

  - label: ":lint-roller::nomad: Lint HCL files"
    command:
      - make lint-hcl

  - label: ":thinking_face::rust: Cargo Audit?"
    plugins:
      - chronotc/monorepo-diff#v2.0.4:
          diff: .buildkite/shared/scripts/diff.sh
          log_level: "debug"
          watch:
            - path:
                - "**/Cargo.toml"
                - "**/Cargo.lock"
              config:
                label: ":pipeline: Upload Cargo Audit"
                command: ".buildkite/pipeline.cargo-audit.sh | buildkite-agent pipeline upload"

    # The preview mainly functions as a kind of smoke test here more
    # than actually trying to do a meaningful preview. If we can do a
    # successful preview, our code at least "compiles".
  - label: ":pulumi: Pulumi Preview grapl/testing environment"
    command:
      # This is slightly hacky, but means we don't need to build packages locally first
      - git fetch origin rc
      - git show origin/rc:pulumi/grapl/Pulumi.testing.yaml > pulumi/grapl/Pulumi.testing.yaml
      - pulumi/bin/prepare_grapl_ux_dependency.sh grapl/testing
      - .buildkite/shared/steps/pulumi_preview.sh grapl/testing
    plugins:
      - seek-oss/aws-sm#v2.3.1:
          env:
            PULUMI_ACCESS_TOKEN: "pulumi-token"
    agents:
      queue: "pulumi-staging"
