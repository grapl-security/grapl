---
env:
  PANTS_CONFIG_FILES: "['pants.toml', 'pants.ci.toml']"
  BUILDKITE_PLUGIN_VAULT_ENV_SECRET_PREFIX: "secret/data/buildkite/env"
  # TODO: Figure out a way for this to be sourced from our
  # rust-toolchain file
  RUST_VERSION: 1.61.0

steps:
  - group: ":white_check_mark: Validation"
    # Validations are basic sanity checks, mostly around ensuring
    # various configuration files are in proper working order.
    key: validation
    steps:
      - label: ":github: Validate CODEOWNERS"
        command: ".buildkite/scripts/validate_codeowners.sh"
        plugins:
          - docker#v3.12.0:
              image: "node"
              entrypoint: "bash"

      - label: ":codecov: Validate codecov.yml"
        command: curl --proto "=https" --tlsv1.2 --fail-with-body --verbose --data-binary @codecov.yml https://codecov.io/validate

      - label: ":python: Ensure regenerated constraints.txt"
        command:
          - .buildkite/scripts/ensure_regenerated_constraints.sh

      - label: ":jeans: All files are covered by Pants"
        command:
          - ./pants tailor --check

  - group: ":lint-roller: Lints"
    # Lints are various code quality checks; formatting, style guide
    # enforcement, typechecking, etc.
    key: lints
    steps:
      - label: ":jeans: BUILD Linting"
        command:
          - make lint-build

      - label: ":nomad: HCL Linting"
        command:
          - make lint-hcl

      - label: ":large_blue_square::lint-roller: Protobuf Linting"
        command:
          - make lint-proto

      - label: ":large_blue_square::face_with_symbols_on_mouth: Protobuf Breaking Changes"
        soft_fail: true
        command:
          - make lint-proto-breaking

      - label: ":python: Linting"
        command:
          - make lint-python
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/TOOLCHAIN_AUTH_TOKEN

      - label: ":python: Typechecking"
        command:
          - make typecheck
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/TOOLCHAIN_AUTH_TOKEN

      - label: ":rust::clippy: Linting"
        command:
          - make lint-rust-clippy
        agents:
          queue: "beefy"

      - label: ":rust: Formatting"
        command:
          - rustup set profile default
          - make lint-rust-rustfmt
        plugins:
          - docker#v3.12.0:
              image: "rust:${RUST_VERSION}"

      - label: ":bash: Linting"
        command:
          - make lint-shell
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/TOOLCHAIN_AUTH_TOKEN

      - label: ":docker: Linting"
        command:
          - make lint-docker
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/TOOLCHAIN_AUTH_TOKEN

      - label: ":typescript::yaml::markdown: Linting"
        command:
          - make lint-prettier

  - group: ":lock_with_ink_pen: Dependency Audits"
    # Audits are checks of dependencies: finding unused dependencies,
    # finding dependencies with reported security vulnerabilities,
    # etc.
    key: audit
    steps:
      - label: ":thinking_face::rust: Cargo Audit?"
        plugins:
          - grapl-security/grapl-release#v0.1.2
          - chronotc/monorepo-diff#v2.2.0:
              diff: grapl_diff.sh
              log_level: "debug"
              watch:
                - path:
                    - "**/Cargo.toml"
                    - "**/Cargo.lock"
                  config:
                    label: ":pipeline: Upload Cargo Audit"
                    group: ":lock_with_ink_pen: Dependency Audits"
                    command: ".buildkite/pipeline.cargo-audit.sh | buildkite-agent pipeline upload"

      - label: ":thinking_face::nodejs: NPM Audit?"
        plugins:
          - grapl-security/grapl-release#v0.1.2
          - chronotc/monorepo-diff#v2.2.0:
              diff: grapl_diff.sh
              log_level: "debug"
              watch:
                - path:
                    - "**/package.json"
                    - "**/package-lock.json"
                  config:
                    label: ":pipeline: Upload NPM Audit"
                    group: ":lock_with_ink_pen: Dependency Audits"
                    command: ".buildkite/pipeline.npm-audit.sh | buildkite-agent pipeline upload"

      - label: ":thinking_face::nodejs: Yarn Audit?"
        plugins:
          - grapl-security/grapl-release#v0.1.2
          - chronotc/monorepo-diff#v2.2.0:
              diff: grapl_diff.sh
              log_level: "debug"
              watch:
                - path:
                    - "**/package.json"
                    - "**/yarn.lock"
                  config:
                    label: ":pipeline: Upload Yarn Audit"
                    group: ":lock_with_ink_pen: Dependency Audits"
                    command: ".buildkite/pipeline.yarn-audit.sh | buildkite-agent pipeline upload"

      - label: ":thinking_face::rust: Cargo Udeps?"
        plugins:
          - grapl-security/grapl-release#v0.1.2
          - chronotc/monorepo-diff#v2.2.0:
              diff: grapl_diff.sh
              log_level: "debug"
              watch:
                - path:
                    - "**/Cargo.toml"
                    - "**/Cargo.lock"
                  config:
                    label: ":pipeline: Upload Cargo Udeps"
                    group: ":lock_with_ink_pen: Dependency Audits"
                    command: ".buildkite/pipeline.cargo-udeps.sh | buildkite-agent pipeline upload"

  - group: "Unit Tests"
    key: unit-tests
    steps:
      - label: ":python: Unit Tests"
        command:
          - make test-unit-python
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/TOOLCHAIN_AUTH_TOKEN
                - grapl/CODECOV_TOKEN
          - grapl-security/codecov#v0.1.6

      - label: ":rust: Unit Tests"
        command:
          - make test-unit-rust-coverage
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/CODECOV_TOKEN
          - grapl-security/codecov#v0.1.6
        agents:
          queue: "beefy"

      # TODO: Consider beefy queue
      - label: ":typescript: Unit Tests"
        command:
          - make test-unit-js
        plugins:
          - grapl-security/vault-login#v0.1.2
          - grapl-security/vault-env#v0.1.0:
              secrets:
                - grapl/CODECOV_TOKEN
          - grapl-security/codecov#v0.1.6

  - label: ":hammer: Python Integration Tests"
    command:
      - make test-integration-python
    plugins:
      - grapl-security/vault-login#v0.1.2
      - grapl-security/vault-env#v0.1.0:
          secrets:
            - grapl/TOOLCHAIN_AUTH_TOKEN
    env:
      GRAPL_LOG_LEVEL: "DEBUG"
    agents:
      queue: "beefy"
    artifact_paths:
      - "test_artifacts/**/*"
      # https://github.com/grapl-security/issue-tracker/issues/894
      - "src/js/engagement_view/source_map_explorer_result.html"

  - label: ":hammer: Rust Integration Tests"
    command:
      - make test-integration-rust
    plugins:
      - grapl-security/vault-login#v0.1.2
      - grapl-security/vault-env#v0.1.0:
          secrets:
            - grapl/TOOLCHAIN_AUTH_TOKEN
    env:
      GRAPL_LOG_LEVEL: "DEBUG"
    agents:
      queue: "beefy"
    artifact_paths:
      - "test_artifacts/**/*"

  - label: "Build docs :book:"
    command:
      - make build-docs

  - label: ":firecracker: Firecracker RootFS"
    command:
      - make dist/firecracker_rootfs.tar.gz
    agents:
      queue: "packer"
