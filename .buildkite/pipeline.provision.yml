---
env:
  PANTS_CONFIG_FILES: "['pants.toml', 'pants.ci.toml']"
  BUILDKITE_PLUGIN_VAULT_ENV_SECRET_PREFIX: "secret/data/buildkite/env"

steps:
  - label: ":pulumi: Preview grapl/testing environment changes in Staging account"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
      - grapl-security/pulumi#v0.1.5:
          command: preview
          project_dir: pulumi/grapl
          stack: grapl/testing
    agents:
      queue: "pulumi-staging"

  - wait

  - label: ":pulumi: Destroy stateful resources in Staging account"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
    command:
      - .buildkite/scripts/grapl_testing_stack/destroy_stateful_resources.sh grapl/grapl/testing
    agents:
      queue: "pulumi-staging"

  - wait

  - label: ":pulumi: Update grapl/testing environment in Staging account"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
            # dump_artifacts.sh uses Pants; let's benefit from the cache
            - grapl/TOOLCHAIN_AUTH_TOKEN
      - improbable-eng/metahook#v0.4.1:
          post-command: |
            .buildkite/scripts/grapl_testing_stack/dump_artifacts.sh
      - grapl-security/pulumi#v0.1.5:
          command: update
          project_dir: pulumi/grapl
          stack: grapl/testing
    agents:
      queue: "pulumi-staging"
    artifact_paths:
      - "test_artifacts/**/*"

  - wait

  - label: ":pulumi: Preview grapl/rust-integration-tests/testing environment changes in Staging account"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
      - grapl-security/pulumi#v0.1.5:
          command: preview
          project_dir: pulumi/rust_integration_tests
          stack: grapl/testing
    agents:
      queue: "pulumi-staging"

  - wait

  - label: ":pulumi: Update grapl/rust-integration-tests/testing environment in Staging account"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
      - grapl-security/pulumi#v0.1.5:
          command: update
          project_dir: pulumi/rust_integration_tests
          stack: grapl/testing
    agents:
      queue: "pulumi-staging"

  - wait

  - trigger: "grapl-testing"
    label: ":rocket: Trigger testing pipeline"
    # Since this is asynchronous, this pipeline will pass or fail
    # based on whether the triggered pipeline passes or fails.
    async: false
    build:
      commit: "${BULIDKITE_COMMIT}"
      branch: "${BUILDKITE_BRANCH}"

  - wait

  # This makes use of the Pulumi binary installed on our agents, and
  # uses it *only* to extract information from the Pulumi YAML stack
  # file.
  #
  # This is in a separate step because nothing has access to both the
  # PULUMI_ACCESS_TOKEN and CLOUDSMITH_API_KEY secrets.
  - label: ":pulumi: Extract current artifacts from stack"
    command:
      - .buildkite/scripts/extract_artifacts.sh grapl/testing
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - PULUMI_ACCESS_TOKEN
    agents:
      queue: "pulumi-staging"

  - wait

  # Take the stack artifacts we just extracted and use it to drive
  # promotions in Cloudsmith.
  #
  # We must use copy, rather than move, because we don't want to
  # remove packages that future runs of this pipeline might need.
  - label: ":cloudsmith: Promote validated packages"
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - CLOUDSMITH_API_KEY
      - artifacts#v1.6.0:
          download: current_artifacts.json
      - grapl-security/cloudsmith#v0.1.4:
          promote:
            org: grapl
            action: copy
            from: testing
            to: validated
            packages_file: current_artifacts.json
    agents:
      queue: "docker"

  - wait

  - label: ":writing_hand: Record successful build"
    command:
      - record_successful_pipeline_run.sh
    plugins:
      - grapl-security/grapl-release#v0.1.2
