version: "3.8"

# environment variable PWD is assumed to be grapl root directory

services:
  rust-node-identifier-integration-tests:
    image: grapl/rust-integration-tests:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: rust/Dockerfile
      target: build-test
      args:
        - RUST_BUILD=test-integration
    command: cargo test --features node-identifier/integration --test '*'
    environment:
      - AWS_REGION
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - RUST_LOG=INFO
      - RUST_BACKTRACE=1
      - DEPLOYMENT_NAME
      - IS_LOCAL=True
      - MG_ALPHAS
      - SOURCE_QUEUE_URL=${SQS_ENDPOINT}/queue/${DEPLOYMENT_NAME}-node-identifier-retry-queue
      - GRAPH_MERGER_QUEUE_URL=${SQS_ENDPOINT}/queue/${DEPLOYMENT_NAME}-graph-merger-queue
      - STATIC_MAPPING_TABLE=${DEPLOYMENT_NAME}-static_mapping_table
      - DYNAMIC_SESSION_TABLE=${DEPLOYMENT_NAME}-dynamic_session_table
      - PROCESS_HISTORY_TABLE=${DEPLOYMENT_NAME}-process_history_table
      - FILE_HISTORY_TABLE=${DEPLOYMENT_NAME}-file_history_table
      - INBOUND_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-inbound_connection_history_table
      - OUTBOUND_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-outbound_connection_history_table
      - NETWORK_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-network_connection_history_table
      - IP_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-ip_connection_history_table
      - ASSET_ID_MAPPINGS=${DEPLOYMENT_NAME}-asset_id_mappings
      - DYNAMODB_ENDPOINT
      - DYNAMODB_ACCESS_KEY_ID
      - DYNAMODB_ACCESS_KEY_SECRET

  rust-sqs-executor-integration-tests:
    image: grapl/rust-integration-tests:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: rust/Dockerfile
      target: build-test
      args:
        - RUST_BUILD=test-integration
    command: cargo test --features sqs-executor/integration --test '*'
    environment:
      - REDIS_ENDPOINT

  grapl-analyzerlib-integration-tests:
    image: grapl/grapl-analyzerlib-test:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: ./python/Dockerfile
      target: grapl-analyzerlib-test
    command: bash -c '
      source venv/bin/activate &&
      cd grapl_analyzerlib &&
      py.test -v -n auto -m "integration_test"'
    environment:
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - DEPLOYMENT_NAME
      - IS_LOCAL=True
      - MG_ALPHAS

  # grapl-analyzer-deployer-integration-tests:

  analyzer-executor-integration-tests:
    image: grapl/grapl-analyzer-executor-test:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: ./python/Dockerfile
      target: analyzer-executor-test
    command: bash -c '
      source venv/bin/activate &&
      cd analyzer_executor &&
      export PYTHONPATH="$${PYTHONPATH}:$$(pwd)/src" &&
      py.test -n auto -m "integration_test"'
    environment:
      - HITCACHE_ADDR=${REDIS_HOST}
      - HITCACHE_PORT=${REDIS_PORT}
      - MESSAGECACHE_ADDR=${REDIS_HOST}
      - MESSAGECACHE_PORT=${REDIS_PORT}
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - IS_RETRY=False

  engagement-edge-integration-tests:
    image: grapl/grapl-engagement-edge-test:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: ./python/Dockerfile
      target: engagement-edge-test
    command: bash -c '
      source venv/bin/activate &&
      cd engagement_edge &&
      py.test -n auto -m "integration_test"'
    environment:
      - AWS_REGION
      - IS_LOCAL=True
      - DEPLOYMENT_NAME
      - UX_BUCKET_URL="ux_bucket_url"
      - GRAPL_API_HOST
      - GRAPL_TEST_USER_NAME
      - SECRETSMANAGER_ACCESS_KEY_ID
      - SECRETSMANAGER_ACCESS_KEY_SECRET
      - SECRETSMANAGER_ENDPOINT

  # TODO: Re-enable these tests after the following issues are resolved:
  # - https://github.com/grapl-security/issue-tracker/issues/385
  # - https://github.com/grapl-security/issue-tracker/issues/386
  # - https://github.com/grapl-security/issue-tracker/issues/387
  # cypress-integration-tests:
  #   image: grapl/grapl-cypress:${TAG:-latest}
  #   build:
  #     context: ${PWD}/test
  #     dockerfile: ./Dockerfile.cypress
  #     target: grapl-cypress
  #   user: ${UID}:${GID}
  #   volumes:
  #     - "./integration-outputs/screenshots:/test/cypress/screenshots"
  #     - "./integration-outputs/videos:/test/cypress/videos"
  #   command: |
  #     /bin/bash -c "
  #       CYPRESS_BASE_URL=http://${GRAPL_API_HOST}:${GRAPL_HTTP_FRONTEND_PORT} cypress run --browser chrome --headless
  #     "
  #   environment:
  #     - GRAPL_API_HOST

  graphql-endpoint-tests:
    image: grapl/graphql-endpoint-tests:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: ./python/Dockerfile
      target: graphql-endpoint-tests
    command: |
      /bin/bash -c '
        source venv/bin/activate &&
        cd graphql_endpoint_tests &&
        py.test --capture=no -n 1 -m "integration_test"
      '
    environment:
      - AWS_REGION
      - DEBUG_SERVICES=${DEBUG_SERVICES:-}
      - DEPLOYMENT_NAME
      - DYNAMODB_ENDPOINT
      - DYNAMODB_ACCESS_KEY_ID
      - DYNAMODB_ACCESS_KEY_SECRET
      - GRAPL_API_HOST
      - GRAPL_TEST_USER_NAME
      - SECRETSMANAGER_ACCESS_KEY_ID
      - SECRETSMANAGER_ACCESS_KEY_SECRET
      - SECRETSMANAGER_ENDPOINT
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - MG_ALPHAS
      - VSC_DEBUGGER_PORT=${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}
    ports:
      - ${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}:${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}

networks:
  default:
    name: grapl-network
