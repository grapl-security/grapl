version: "3.8"

# environment variable PWD is assumed to be grapl root directory

volumes:
  # This is the same as defined in docker-compose.yml, and is provided
  # here so we can have access to outputs from the stack in our tests.
  pulumi_outputs:

x-common-variables:
  read-only-pulumi-mnt: &read-only-pulumi-mnt
    type: volume
    source: pulumi_outputs
    target: /mnt/pulumi-outputs
    read_only: true

services:
  rust-integration-tests:
    image: grapl/rust-integration-tests:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: rust/Dockerfile
      target: build-test
      args:
        - RUST_BUILD=test-integration
    entrypoint: ["/bin/bash", "-o", "errexit", "-o", "nounset", "-c"]
    command:
      - |
        export GRAPL_DYNAMIC_SESSION_TABLE=$$(cat /mnt/pulumi-outputs/dynamic-session-table)
        export GRAPL_STATIC_MAPPING_TABLE=$$(cat /mnt/pulumi-outputs/static-mapping-table)

        cargo test --features "$$RUST_INTEGRATION_TEST_FEATURES" --test "*"
    environment:
      - AWS_REGION
      - DEPLOYMENT_NAME
      - GRAPL_AWS_ACCESS_KEY_ID
      - GRAPL_AWS_ACCESS_KEY_SECRET
      - GRAPL_AWS_ENDPOINT
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - MG_ALPHAS
      - RUST_BACKTRACE=1
      - RUST_LOG=INFO
      - REDIS_ENDPOINT
    volumes:
      - *read-only-pulumi-mnt

  analyzerlib-integration-tests:
    image: grapl/analyzerlib-test:${TAG:-latest}
    build:
      context: ${PWD}
      dockerfile: ./src/python/Dockerfile
      target: grapl-analyzerlib-test
    entrypoint: ["/bin/bash", "-o", "errexit", "-o", "nounset", "-c"]
    command:
      - |
        cd grapl_analyzerlib
        py.test -v -n auto -m "integration_test"
    environment:
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - DEPLOYMENT_NAME
      - MG_ALPHAS
    extra_hosts:
      # Refer to the Dgraph Zero running in Nomad with this DNS
      - "${DGRAPH_HOST}:host-gateway"

  analyzer-executor-integration-tests:
    image: grapl/analyzer-executor-test:${TAG:-latest}
    build:
      context: ${PWD}
      dockerfile: ./src/python/Dockerfile
      target: analyzer-executor-test
    entrypoint: ["/bin/bash", "-o", "errexit", "-o", "nounset", "-c"]
    command:
      - |
        export GRAPL_ANALYZER_MATCHED_SUBGRAPHS_BUCKET=$$(cat /mnt/pulumi-outputs/analyzer-matched-subgraphs-bucket) &&
        export GRAPL_ANALYZERS_BUCKET=$$(cat /mnt/pulumi-outputs/analyzers-bucket)
        export GRAPL_MODEL_PLUGINS_BUCKET=$$(cat /mnt/pulumi-outputs/model-plugins-bucket)
        cd analyzer_executor
        export PYTHONPATH="$${PYTHONPATH:-}:$$(pwd)/src"
        py.test -n auto -m "integration_test"
    environment:
      - HITCACHE_ADDR=${REDIS_HOST}
      - HITCACHE_PORT=${REDIS_PORT}
      - MESSAGECACHE_ADDR=${REDIS_HOST}
      - MESSAGECACHE_PORT=${REDIS_PORT}
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - IS_RETRY=False
    # In other services in docker.compose.yml that need Pulumi
    # outputs, we use `depend_on` to declare this relationship (in
    # addition to mounting the `pulumi_outputs` volume). Our current
    # buildx setup does not permit this. In any event, the way we
    # currently run these tests takes care of that for us, since we
    # bring up the entire local Grapl instance first (which includes
    # running Pulumi), and _then_ execute these tests.
    volumes:
      - *read-only-pulumi-mnt

  engagement-edge-integration-tests:
    image: grapl/grapl-engagement-edge-test:${TAG:-latest}
    build:
      context: ${PWD}
      dockerfile: ./src/python/Dockerfile
      target: engagement-edge-test
    entrypoint: ["/bin/bash", "-o", "errexit", "-o", "nounset", "-c"]
    command:
      - |
        cd engagement_edge
        py.test -n auto -m "integration_test"
    environment:
      - AWS_REGION
      - DEPLOYMENT_NAME
      - GRAPL_API_HOST
      - GRAPL_AWS_ACCESS_KEY_ID
      - GRAPL_AWS_ACCESS_KEY_SECRET
      - GRAPL_AWS_ENDPOINT
      - GRAPL_HTTP_FRONTEND_PORT
      - GRAPL_TEST_USER_NAME
      - IS_LOCAL=True
      - UX_BUCKET_URL="ux_bucket_url"
      - GRAPL_NOTEBOOK_INSTANCE="local-grapl-Notebook"

  # TODO: Re-enable these tests after the following issues are resolved:
  # - https://github.com/grapl-security/issue-tracker/issues/385
  # - https://github.com/grapl-security/issue-tracker/issues/386
  # - https://github.com/grapl-security/issue-tracker/issues/387
  # cypress-integration-tests:
  #   image: grapl/grapl-cypress:${TAG:-latest}
  #   build:
  #     context: ${PWD}/test
  #     dockerfile: ./Dockerfile.cypress
  #     target: grapl-cypress
  #   user: ${UID}:${GID}
  #   volumes:
  #     - "./integration-outputs/screenshots:/test/cypress/screenshots"
  #     - "./integration-outputs/videos:/test/cypress/videos"
  #   command: |
  #     /bin/bash -c "
  #       CYPRESS_BASE_URL=http://${GRAPL_API_HOST}:${GRAPL_HTTP_FRONTEND_PORT} cypress run --browser chrome --headless
  #     "
  #   environment:
  #     - GRAPL_API_HOST

  graphql-endpoint-tests:
    image: grapl/graphql-endpoint-tests:${TAG:-latest}
    build:
      context: ${PWD}
      dockerfile: ./src/python/Dockerfile
      target: graphql-endpoint-tests
    entrypoint: ["/bin/bash", "-o", "errexit", "-o", "nounset", "-c"]
    command:
      - |
        export GRAPL_SCHEMA_PROPERTIES_TABLE=$$(cat /mnt/pulumi-outputs/schema-properties-table)

        cd graphql_endpoint_tests
        py.test --capture=no -n 1 -m "integration_test"
    environment:
      - AWS_REGION
      - DEBUG_SERVICES=${DEBUG_SERVICES:-}
      - DEPLOYMENT_NAME
      - GRAPL_API_HOST
      - GRAPL_AWS_ACCESS_KEY_ID
      - GRAPL_AWS_ACCESS_KEY_SECRET
      - GRAPL_AWS_ENDPOINT
      - GRAPL_HTTP_FRONTEND_PORT
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - GRAPL_TEST_USER_NAME
      - IS_LOCAL=True
      - MG_ALPHAS
      - VSC_DEBUGGER_PORT=${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}
    ports:
      - ${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}:${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}
    volumes:
      - *read-only-pulumi-mnt
networks:
  default:
    name: grapl-network
