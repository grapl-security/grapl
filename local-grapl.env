# Environment file used by our Docker Compose local environment /
# integration / end-to-end testing setup.

# Ports
########################################################################

# Dgraph default ports
# https://dgraph.io/docs/deploy/ports-usage/
DGRAPH_ALPHA_GRPC_EXTERNAL_PUBLIC_PORT=9080
DGRAPH_ALPHA_HTTP_EXTERNAL_PUBLIC_PORT=8080
DGRAPH_RATEL_HTTP_EXTERNAL_PUBLIC_PORT=8000
DGRAPH_ZERO_GRPC_PRIVATE_PORT=5080

# DynamoDB Local default port
DYNAMODB_PORT=8000

# Grapl Ports!
GRAPL_AUTH_PORT=8900
GRAPL_DGRAPH_TTL_PORT=8124
GRAPL_GRAPHQL_PORT=5000
GRAPL_MODEL_PLUGIN_DEPLOYER_PORT=8123
GRAPL_NOTEBOOK_PORT=8888
GRAPL_UX_ROUTER_PORT=8901

# Redis default port
REDIS_PORT=6379

# Zookeeper port
ZOOKEEPER_PORT=2181

# Kafka broker ports
KAFKA_BROKER_PORT=9092
KAFKA_JMX_PORT=9101

# MinIO default port
S3_PORT=9000

# Localstack Secretsmanager
SECRETSMANAGER_PORT=4584
SECRETSMANAGER_WEB_UI_PORT=8099

# Localstack SQS
SQS_PORT=9324

# TODO: This may be a different port for different services
VSC_DEBUGGER=8401

# Local-only "signaling" port
#
# We'll often start up a simple HTTP server with
#
#     python -m http.server
#
# to use as a signaling mechanism between containers
# using `wait-for-it`... this is the port we'll use.
WAIT_PORT=1337


# Hosts
#
# We use Docker network aliases to set these up, and then ultimately
# pass them into our services.
########################################################################
AWS_REGION=us-east-1

DGRAPH_HOST=dgraph.grapl.test
DYNAMODB_HOST=dynamodb.${AWS_REGION}.amazonaws.com
GRAPL_API_HOST=api.grapl.test
REDIS_HOST=redis.grapl.test
ZOOKEEPER_0_HOST=zookeeper-0
KAFKA_BROKER_0_HOST=kafka-broker-0
S3_HOST=s3.${AWS_REGION}.amazonaws.com
SECRETSMANAGER_HOST=secretsmanager.${AWS_REGION}.amazonaws.com
SQS_HOST=sqs.${AWS_REGION}.amazonaws.com

# Lambda "Hosts"
########################################################################
# These are currently presented as services in local grapl, but
# they're really lambda functions... when we can run them as lambdas
# locally, these host names should probably go away.
GRAPL_AUTH_HOST=auth.grapl.test
GRAPL_MODEL_PLUGIN_DEPLOYER_HOST=model-plugin-deployer.grapl.test
GRAPL_GRAPHQL_HOST=graphql.grapl.test
GRAPL_UX_ROUTER_HOST=ux-router.grapl.test

# Endpoints
#
# NOTE: Endpoints have a protocol and port
########################################################################
DYNAMODB_ENDPOINT=http://${DYNAMODB_HOST}:${DYNAMODB_PORT}
REDIS_ENDPOINT=http://${REDIS_HOST}:${REDIS_PORT}
S3_ENDPOINT=http://${S3_HOST}:${S3_PORT}
SQS_ENDPOINT=http://${SQS_HOST}:${SQS_PORT}

# Logging
########################################################################
GRAPL_LOG_LEVEL=DEBUG
# Python buffers output by default, which means it can swallow
# information that we might like to actually see in our container
# logs. This turns that buffering off.
PYTHONUNBUFFERED=1
RUST_BACKTRACE=1
RUST_LOG=ERROR

# Kafka topics
########################################################################
IDENTIFIED_PREDICATES_TOPIC="identified_predicates"
IDENTIFIED_PREDICATES_RETRY_TOPIC="identified_predicates_retry"
IDENTIFIED_PREDICATES_FAILED_TOPIC="identified_predicates_failed"
MERGED_PREDICATES_TOPIC="merged_predicates"
MERGED_PREDICATES_RETRY_TOPIC="merged_predicates_retry"
MERGED_PREDICATES_FAILED_TOPIC="merged_predicates_failed"

# Miscellaneous
########################################################################
MG_ALPHAS=${DGRAPH_HOST}:${DGRAPH_ALPHA_GRPC_EXTERNAL_PUBLIC_PORT}
BUCKET_PREFIX=local-grapl
