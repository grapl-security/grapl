[GLOBAL]
pants_version = "2.6.0rc1"
backend_packages = [
  "pants.backend.awslambda.python",
  "pants.backend.codegen.protobuf.python",
  "pants.backend.python",
  "pants.backend.python.lint.flake8",
  "pants.backend.python.lint.isort",
  "pants.backend.python.lint.black",
  "pants.backend.python.typecheck.mypy",
  "pants.backend.shell",
  "pants.backend.shell.lint.shellcheck",
  "pants.backend.shell.lint.shfmt",
  "grapl_setup_py"
]

pythonpath = [
  "%(buildroot)s/pants-plugins"
]

build_file_prelude_globs = [
  "pants-plugins/macros.py",
]

pants_ignore = [
]

plugins = [
  "toolchain.pants.plugin==0.13.1"
]

remote_cache_read = true
remote_cache_write = true
remote_store_address = "grpcs://cache.toolchain.com:443"
remote_auth_plugin = "toolchain.pants.auth.plugin:toolchain_auth_plugin"

[toolchain-setup]
repo = "grapl"

[buildsense]
enable = true

# See https://www.pantsbuild.org/docs/anonymous-telemetry
[anonymous-telemetry]
enabled = true
# Randomly generated with `uuidgen --random`
repo_id = "f416be7b-e109-4915-8eba-940bcfa310c1"

# Given how our code is currently structured, with package and test
# code for every project in their own directory, I believe we have to
# list each of those top-level containing directories here in order
# for all the resolution to work out correctly.
#
# The '/' roots these at the same directory this `pants.toml` file is
# in.
[source]
root_patterns = [
  "/3rdparty",
  "/build-support",
  "/etc",  # Some of our tests use sample data from here
  "/pants-plugins",
  "/pulumi",
  "/src/aws-provision",
  "/src/proto/graplinc",
  "/src/python/analyzer_executor/src",
  "/src/python/analyzer_executor/tests",
  "/src/python/e2e-test-runner",
  "/src/python/engagement-creator",
  "/src/python/engagement_edge",
  "/src/python/graphql_endpoint_tests",
  "/src/python/grapl_analyzerlib",
  "/src/python/grapl-common",
  "/src/python/graplctl",
  "/src/python/grapl-dgraph-ttl",
  "/src/python/grapl_e2e_tests",
  "/src/python/graplinc/graplinc",
  "/src/python/grapl-model-plugin-deployer",
  "/src/python/grapl-template-generator",
  "/src/python/grapl-tests-common",
  "/src/python/grapl-ux-router",
  "/src/python/provisioner",
  "/src/python/python-proto",
  "/src/python/repl",
]

[python-setup]
# Use this as a lockfile; speeds up installation of dependencies
# To update it, see build-support/manage_virtualenv.sh
requirement_constraints = "3rdparty/python/constraints.txt"
interpreter_constraints = ["CPython==3.7.*"]

# We have at least one __init__.py file that has code in it.
# See https://www.pantsbuild.org/docs/python-backend
[python-infer]
inits = true

[python-protobuf]
runtime_dependencies = ["3rdparty/python:protobuf"]
mypy_plugin = true

[black]
config = "pyproject.toml"
version = "black==20.8b1"

[isort]
config = "pyproject.toml"
# This option is required to ensure the `skip_globs` configuration is
# honored for how Pants calls isort. If we ever get to the point where
# we can remove `skip_globs` from the `tool.isort` entry in
# `pyproject.toml`, then we can remove this argument as well.
args = [ "--filter-files" ]
version = "isort==5.6.4"

[pytest]
pytest_plugins = [
  "pytest-custom_exit_code",
  "pytest-cov"
]
# This comes from the pytest-custom_exit_code plugin, and is
# specifically for running tests with Pytest filtering, like:
#
#   -m 'not integration_test'
#
# Because of how Pants runs tests, we can get failures for test files
# that only contain integration tests. Longer term, we should think of
# other ways to divide tests into classes (unit, integration, etc.) so
# we can target things better with Pants tags.
args = [ "--suppress-no-test-exit-code" ]

[mypy]
version = "mypy==0.812"
config = "src/python/mypy.ini"
args = [ "--show-error-codes" ] #, "--verbose" ]

[ipython]
version = "ipython==7.20.0"

[flake8]
config = ".flake8"

[shfmt]
# Indent with 4 spaces
# Indent switch cases
# Redirect operators are followed by a space
args = ["-i 4", "-ci", "-sr"]

[test]
output = "all"
use_coverage = "true"

[coverage-py]
report = ["xml"]
# coverage.py only reports statistics based on the files it
# encounters, not on all the files in the repository; this counteracts
# that.
global_report = "true"

[shellcheck]
# Currently, Pants only knows about v0.7.1, but v0.7.2 has some nice
# relative sourcing features we'd like to take advantage of, namely,
# `script-path=SOURCEDIR`. In particular, this is required to "play
# nicely" with the `git subtree`-imported code from
# grapl-security/buildkite-common.
#
# Once Pants knows about v0.7.2 natively, we can remove these
# configuration values.
version = "v0.7.2"
known_versions = [
  "v0.7.2|linux|70423609f27b504d6c0c47e340f33652aea975e45f312324f2dbf91c95a3b188|1382204"
]
