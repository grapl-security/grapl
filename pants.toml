[GLOBAL]
pants_version = "2.2.0"
backend_packages = [
  "pants.backend.codegen.protobuf.python",
  "pants.backend.python",
  "pants.backend.python.lint.isort",
  "pants.backend.python.lint.black",
  "grapl_setup_py"
]

pythonpath = [
  "%(buildroot)s/pants-plugins"
]

build_file_prelude_globs = [
  "pants-plugins/macros.py",
]

# Given how our code is currently structured, with package and test
# code for every project in their own directory, I believe we have to
# list each of those top-level containing directories here in order
# for all the resolution to work out correctly.
#
# The '/' roots these at the same directory this `pants.toml` file is
# in.
[source]
root_patterns = [
  "/3rdparty",
  "/pants-plugins",
  "/src/proto",
  "/src/python/analyzer-deployer",
  "/src/python/analyzer_executor/src",
  "/src/python/analyzer_executor/tests",
  "/src/python/engagement-creator/src",
  "/src/python/engagement-creator/tests",
  "/src/python/engagement_edge",
  "/src/python/engagement_edge/tests",
  "/src/python/grapl_analyzerlib",
  "/src/python/grapl-common",
  "/src/python/grapl-dgraph-ttl",
  "/src/python/grapl_e2e_tests",
  "/src/python/graplctl",
  "/src/python/graplinc",
  "/src/python/grapl-model-plugin-deployer/src",
  "/src/python/grapl-model-plugin-deployer/tests",
  "/src/python/grapl_provision",
  "/src/python/grapl-tests-common",
  "/src/python/grapl-ux-router/src"
]

[python-setup]
# Use this as a lockfile; speeds up installation of dependencies
# To update it, run build-support/generate_constraints.sh
requirement_constraints = "3rdparty/python/constraints.txt"
interpreter_constraints = ["CPython==3.7.*"]

# We have at least one __init__.py file that has code in it.
# See https://www.pantsbuild.org/docs/python-backend
[python-infer]
inits = true

[python-protobuf]
runtime_dependencies = ["3rdparty/python:protobuf"]

[black]
config = "pyproject.toml"
version = "black==20.8b1"

[isort]
config = "pyproject.toml"
# This option is required to ensure the `skip_globs` configuration is
# honored for how Pants calls isort. If we ever get to the point where
# we can remove `skip_globs` from the `tool.isort` entry in
# `pyproject.toml`, then we can remove this argument as well.
args = [ "--filter-files" ]
version = "isort==5.6.4"

[pytest]
pytest_plugins = [
  "pytest-custom_exit_code"
]
# This comes from the pytest-custom_exit_code plugin, and is
# specifically for running tests with Pytest filtering, like:
#
#   -m 'not integration_test'
#
# Because of how Pants runs tests, we can get failures for test files
# that only contain integration tests. Longer term, we should think of
# other ways to divide tests into classes (unit, integration, etc.) so
# we can target things better with Pants tags.
args = [ "--suppress-no-test-exit-code" ]
