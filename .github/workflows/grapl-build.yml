name: Grapl Build

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - staging
      - master

jobs:
  cargo-audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cargo Audit
        run: |
          docker build -f .github/etc/cargo-audit/Dockerfile -t grapl/grapl-cargo-audit:latest src/rust
          docker run -t grapl/grapl-cargo-audit:latest cargo audit

  rust-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Build Rust services
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount rust

      - name: Rust unit tests
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount rust-unit-tests

  python-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Build Python services
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount python

      - name: Python unit tests
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount python-unit-tests

  python-typecheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Run dobi python-typecheck
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux python-typecheck

  js-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Build JS services
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount js

      - name: JS unit tests
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount js-unit-tests

  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Build Grapl
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount build

      - name: Run integration tests
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount integration-tests


  # In the future, this should probably be merged back into `dobi integration-tests`, but
  # since it's so timing-dependent I'm going to treat it separately until it stabilizes a bit.
  end-to-end-integration-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build Grapl
        run: |
          GRAPL_RELEASE_TARGET=debug TAG=latest ./dobi-linux --no-bind-mount build

      - name: Run end-to-end integration tests
        run: |
          GRAPL_RELEASE_TARGET=debug GRAPL_LOG_LEVEL=DEBUG TAG=latest ./dobi-linux --no-bind-mount run-e2e-integration-tests
       
      # NOTE: This requires >= py37
      - name: 'Collect e2e test logs'
        if: ${{ always() }}
        run: |
          python3 -V &&
          python3 ./etc/ci_scripts/dump_compose_artifacts.py --compose-project "grapl-integration-tests"
           
      - name: 'Upload e2e test logs'
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: e2e-test-logs
          # this path is specified in dump_compose_artifacts.py
          path: /tmp/compose_artifacts/
          retention-days: 7
