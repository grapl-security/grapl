name: Grapl Lint

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - staging
      - master

jobs:
  rust-format:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/rust
    steps:
      - uses: actions/checkout@v2
      - name: Check Rust code formatting
        # Github Workflow runners appear to already have rustup, but
        # using a minimal profile, which runs afoul of the
        # RUSTUP_TOOLCHAIN variable in bin/format, because `rustfmt`
        # isn't included in the minimal profile :(
        run: |
          rustup set profile default
          bin/format --check

  rust-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/rust
    steps:
      - uses: actions/checkout@v2
      - name: Lint Rust Code
        run: bin/lint

  python-lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run etc/ci/scripts/py_lint.sh --check-only
        run: |
          ./etc/ci_scripts/py_lint.sh --check-only
      
      - name: How to fix lint failure
        if: ${{ failure() }}
        run: echo "Run etc/ci_scripts/py_lint.sh without the flag. That's it!"


  check-pypi:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:

      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pypi-simple
        run: |
          python3 -mvenv venv && . venv/bin/activate
          pip install pypi-simple
          deactivate
      
      - name: Export CHECK_PYPI_VERSION_ARGS as "true" if channel is not latest
        # passing 'true' to check_pypi means "check test.pypi.org"
        run: |
          if [[ "$CHANNEL" == "latest" ]]; then
            echo "CHECK_PYPI_VERSION_ARGS=false" >> $GITHUB_ENV
          else
            echo "CHECK_PYPI_VERSION_ARGS=true" >> $GITHUB_ENV
          fi

      - name: Check whether grapl_graph_descriptions version has been bumped
        run: |
          . venv/bin/activate
          python etc/build_scripts/check_pypi_version.py \
            grapl_graph_descriptions \
            $(cat src/rust/graph-descriptions/VERSION) \
            $CHECK_PYPI_VERSION_ARGS
          deactivate

      - name: Check whether grapl_analyzerlib version has been bumped
        run: |
          . venv/bin/activate
          python etc/build_scripts/check_pypi_version.py \
            grapl_analyzerlib \
            $(cat src/python/grapl_analyzerlib/VERSION) \
            $CHECK_PYPI_VERSION_ARGS
          deactivate

      - name: Check whether grapl-common version has been bumped
        run: |
          . venv/bin/activate
          python etc/build_scripts/check_pypi_version.py \
            grapl-common \
            $(cat src/python/grapl-common/VERSION) \
            $CHECK_PYPI_VERSION_ARGS
          deactivate

      - name: Check whether grapl-tests-common version has been bumped
        run: |
          . venv/bin/activate
          python etc/build_scripts/check_pypi_version.py \
            grapl-tests-common \
            $(cat src/python/grapl-tests-common/VERSION) \
            $CHECK_PYPI_VERSION_ARGS
          deactivate
