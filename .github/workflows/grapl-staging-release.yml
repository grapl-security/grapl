name: Grapl Staging Release

on:
  # Every time we push to staging,
  # release that to Dockerhub with the tag 'staging'.
  push:
    branches:
    - staging

jobs:
  release-rust-services:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install dobi
        run: |
          wget https://github.com/dnephin/dobi/releases/download/v0.13.0/dobi-linux
          chmod +x dobi-linux

      - name: Export tag
        run: |
          echo "::set-env name=TAG::staging"

      - name: Build Rust services
        run: |
          GRAPL_RELEASE_TARGET=release ./dobi-linux --no-bind-mount rust

      - name: Extract artifacts from Rust build
        id: extract-rust-artifacts
        run: |
          cp dist/sysmon-subgraph-generator ./bootstrap
          zip -9 sysmon-subgraph-generator-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=sysmon-subgraph-generator::sysmon-subgraph-generator-$TAG.zip"

          cp dist/generic-subgraph-generator ./bootstrap
          zip -9 generic-subgraph-generator-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=generic-subgraph-generator::generic-subgraph-generator-$TAG.zip"

          cp dist/node-identifier ./bootstrap
          zip -9 node-identifier-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=node-identifier::node-identifier-$TAG.zip"

          cp dist/node-identifier-retry-handler ./bootstrap
          zip -9 node-identifier-retry-handler-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=node-identifier-retry-handler::node-identifier-retry-handler-$TAG.zip"

          cp dist/graph-merger ./bootstrap
          zip -9 graph-merger-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=graph-merger::graph-merger-$TAG.zip"

          cp dist/analyzer-dispatcher ./bootstrap
          zip -9 analyzer-dispatcher-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=analyzer-dispatcher::analyzer-dispatcher-$TAG.zip"

          cp dist/metric-forwarder ./bootstrap
          zip -9 metric-forwarder-$TAG.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=metric-forwarder::metric-forwarder-$TAG.zip"

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Publish Rust images to DockerHub
        run: |
          docker push grapl/grapl-sysmon-subgraph-generator:$TAG
          docker push grapl/grapl-generic-subgraph-generator:$TAG
          docker push grapl/grapl-node-identifier:$TAG
          docker push grapl/grapl-node-identifier-retry-handler:$TAG
          docker push grapl/grapl-graph-merger:$TAG
          docker push grapl/grapl-analyzer-dispatcher:$TAG
          docker push grapl/grapl-metric-forwarder:$TAG

      - name: Clean up dist
        run: |
          rm -rf dist

  release-python-services:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install dobi
        run: |
          wget https://github.com/dnephin/dobi/releases/download/v0.13.0/dobi-linux
          chmod +x dobi-linux

      - name: Export tag
        run: |
          echo "::set-env name=TAG::staging"

      - name: Build Python services
        run: |
          GRAPL_RELEASE_TARGET=release TAG="$TAG" ./dobi-linux --no-bind-mount python

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Publish Python images to DockerHub
        run: |
          docker push grapl/grapl-analyzer-executor:$TAG
          docker push grapl/grapl-engagement-creator:$TAG
          docker push grapl/grapl-notebook:$TAG
          docker push grapl/grapl-engagement-edge:$TAG
          docker push grapl/grapl-model-plugin-deployer:$TAG
          docker push grapl/grapl-graph-provision:$TAG
          docker push grapl/grapl-dynamodb-provision:$TAG
          docker push grapl/grapl-dgraph-ttl:$TAG

      - name: Extract Python artifacts from build
        id: extract-python-artifacts
        run: |
          cp dist/analyzer-executor/lambda.zip analyzer-executor-$TAG.zip
          echo "::set-output name=analyzer-executor::analyzer-executor-$TAG.zip"

          cp dist/engagement-creator/lambda.zip engagement-creator-$TAG.zip
          echo "::set-output name=engagement-creator::engagement-creator-$TAG.zip"

          cp dist/engagement-edge/lambda.zip engagement-edge-$TAG.zip
          echo "::set-output name=engagement-edge::engagement-edge-$TAG.zip"

          cp dist/model-plugin-deployer/lambda.zip model-plugin-deployer-$TAG.zip
          echo "::set-output name=model-plugin-deployer::model-plugin-deployer-$TAG.zip"

          cp dist/dgraph-ttl/lambda.zip dgraph-ttl-$TAG.zip
          echo "::set-output name=dgraph-ttl::dgraph-ttl-$TAG.zip"

      - name: Clean up dist
        run: |
          rm -rf dist


  release-js-services:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install dobi
        run: |
          wget https://github.com/dnephin/dobi/releases/download/v0.13.0/dobi-linux
          chmod +x dobi-linux
    
      - name: Export tag
        run: |
          echo "::set-env name=TAG::staging"

      - name: Build JS services
        env:
        run: |
          GRAPL_RELEASE_TARGET=release ./dobi-linux --no-bind-mount js

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Publish JS images to DockerHub
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          docker push grapl/grapl-engagement-view:$TAG
          docker push grapl/grapl-graphql-endpoint:$TAG