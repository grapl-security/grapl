name: Grapl Release

on:
  release:
    types: [released, prereleased]

jobs:
  rust-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Rust unit tests
        run: |
          make test-unit-rust

  python-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pants Cache
        uses: actions/cache@v2
        with:
          # We'll set up a new cache when our lock-file changes
          key: pants-${{ matrix.python-version }}-${{ hashFiles('3rdparty/python/constraints.txt') }}
          path: |
            ~/.cache/pants/setup
            ~/.cache/pants/named_caches
            ~/.cache/pants/lmdb_store

      - name: Python unit tests
        run: ./build-support/retry.sh --sleep=0 --tries=3 make test-unit-python

  js-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: JS unit tests
        run: |
          make test-unit-js

  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Run integration tests
        run: |
          make test-integration

  release-services:
    runs-on: ubuntu-latest
    needs: [rust-unit-tests, python-unit-tests, js-unit-tests, integration-tests]

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Export tag
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          echo "TAG=$VERSION" >> $GITHUB_ENV

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Build services
        run: |
          make PROFILE=release build-services

      - name: Publish images to DockerHub
        run: |
          make push
