name: Grapl Release

on:
  release:
    types: [released, prereleased]

jobs:
  rust-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Rust unit tests
        run: |
          make test-unit-rust

  python-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Python unit tests
        run: |
          make test-unit-python

  js-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: JS unit tests
        run: |
          make test-unit-js

  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Run integration tests
        run: |
          make test-integration

  check-pypi:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:

      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pypi-simple
        run: |
          python3 -mvenv venv && . venv/bin/activate
          pip install pypi-simple
          deactivate

      - name: Check whether grapl_graph_descriptions version has been bumped
        run: |
          . venv/bin/activate
          if [[ "$CHANNEL" == "latest" ]]; then
              python etc/build_scripts/check_pypi_version.py \
                grapl_graph_descriptions \
                $(cat src/rust/graph-descriptions/VERSION)
          else
              python etc/build_scripts/check_pypi_version.py \
                grapl_graph_descriptions \
                $(cat src/rust/graph-descriptions/VERSION) \
                true
          fi
          deactivate

      - name: Check whether grapl_analyzerlib version has been bumped
        run: |
          . venv/bin/activate
          if [[ "$CHANNEL" == "latest" ]]; then
              python etc/build_scripts/check_pypi_version.py \
                grapl_analyzerlib \
                $(cat src/python/grapl_analyzerlib/VERSION)
          else
              python etc/build_scripts/check_pypi_version.py \
                grapl_analyzerlib \
                $(cat src/python/grapl_analyzerlib/VERSION) \
                true
          fi
          deactivate

      - name: Check whether grapl-common version has been bumped
        run: |
          . venv/bin/activate
          if [[ "$CHANNEL" == "latest" ]]; then
              python etc/build_scripts/check_pypi_version.py \
                grapl-common \
                $(cat src/python/grapl-common/VERSION)
          else
              python etc/build_scripts/check_pypi_version.py \
                grapl-common \
                $(cat src/python/grapl-common/VERSION) \
                true
          fi
          deactivate

  release-services:
    runs-on: ubuntu-latest
    needs: [rust-unit-tests, python-unit-tests, js-unit-tests, integration-tests, check-pypi]

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Determine release channel
        run: |
          BRANCH=${{ github.event.release.target_commitish }}
          if [[ "$BRANCH" == "master" ]]; then
              CHANNEL="latest"
          else
              CHANNEL="beta"
          fi
          echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV

      - name: Export tag
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          echo "TAG=$VERSION-$CHANNEL" >> $GITHUB_ENV

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Build services
        run: |
          make PROFILE=release build-services

      - name: Publish images to DockerHub
        run: |
          docker-compose push
