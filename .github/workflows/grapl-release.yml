name: Grapl Release

on:
  release:
    types: [released, prereleased]

jobs:
  rust-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Rust unit tests
        run: |
          make test-unit-rust

  python-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Python unit tests
        run: |
          make test-unit-python

  js-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: JS unit tests
        run: |
          make test-unit-js

  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Run integration tests
        run: |
          make test-integration

  check-pypi:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:

      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pypi-simple
        run: |
          python3 -mvenv venv && . venv/bin/activate
          pip install pypi-simple
          deactivate
      
      - name: Export CHECK_PYPI_VERSION_ARGS as "check against prod pypi"
        # passing 'false' to check_pypi means "check prod pypi.org" not test
        run: |
          echo "CHECK_PYPI_VERSION_ARGS=false" >> $GITHUB_ENV

      # TODO: Reactivate this once the new graplinc-grapl-api package
      # has been pushed to PyPi
      #
      # - name: Check whether graplinc-grapl-api version has been bumped
      #   run: |
      #     . venv/bin/activate
      #     python etc/build_scripts/check_pypi_version.py \
      #       graplinc-grapl-api \
      #       $(cat src/python/graplinc-grapl-api/VERSION) \
      #       $CHECK_PYPI_VERSION_ARGS
      #     deactivate

    - name: Check whether grapl_analyzerlib version has been bumped
      run: |
        . venv/bin/activate
        python etc/build_scripts/check_pypi_version.py \
          grapl_analyzerlib \
          $(cat src/python/grapl_analyzerlib/VERSION) \
          $CHECK_PYPI_VERSION_ARGS
        deactivate

    - name: Check whether grapl-common version has been bumped
      run: |
        . venv/bin/activate
        python etc/build_scripts/check_pypi_version.py \
          grapl-common \
          $(cat src/python/grapl-common/VERSION) \
          $CHECK_PYPI_VERSION_ARGS
        deactivate

    - name: Check whether grapl-tests-common version has been bumped
      run: |
        . venv/bin/activate
        python etc/build_scripts/check_pypi_version.py \
          grapl-tests-common \
          $(cat src/python/grapl-tests-common/VERSION) \
          $CHECK_PYPI_VERSION_ARGS
        deactivate



  release-services:
    runs-on: ubuntu-latest
    needs: [rust-unit-tests, python-unit-tests, js-unit-tests, integration-tests, check-pypi]

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Github Actions CI
        run: |
          ./etc/ci_scripts/clean_gh_actions_space.sh
          ./etc/ci_scripts/install_requirements.sh

      - name: Export tag
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          echo "TAG=$VERSION" >> $GITHUB_ENV

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Build services
        run: |
          make PROFILE=release build-services

      - name: Publish images to DockerHub
        run: |
          make push
