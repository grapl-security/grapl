name: Grapl Release

on:
  release:
    types: [released, prereleased]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine release channel
        run: |
          BRANCH=${{ github.event.release.target_commitish }}
          if [[ "$BRANCH" == "master" ]]; then
              CHANNEL="latest"
          else
              CHANNEL="beta"
          fi
          echo "::set-env name=CHANNEL::$CHANNEL"

      - name: Build Grapl
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          TAG="$VERSION-$CHANNEL" docker-compose -f docker-compose.yml -f docker-compose.build.yml build --build-arg release_target=release
          docker system prune -f

      - name: Log in to Docker registry
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username grapl --password-stdin

      - name: Publish Grapl images to DockerHub
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          docker push grapl/grapl-sysmon-subgraph-generator:$VERSION-$CHANNEL
          docker push grapl/grapl-generic-subgraph-generator:$VERSION-$CHANNEL
          docker push grapl/grapl-node-identifier:$VERSION-$CHANNEL
          docker push grapl/grapl-node-identifier-retry-handler:$VERSION-$CHANNEL
          docker push grapl/grapl-graph-merger:$VERSION-$CHANNEL
          docker push grapl/grapl-analyzer-dispatcher:$VERSION-$CHANNEL
          docker push grapl/grapl-analyzer-executor:$VERSION-$CHANNEL
          docker push grapl/grapl-engagement-creator:$VERSION-$CHANNEL
          docker push grapl/grapl-notebook:$VERSION-$CHANNEL
          docker push grapl/grapl-engagement-edge:$VERSION-$CHANNEL
          docker push grapl/grapl-model-plugin-deployer:$VERSION-$CHANNEL
          docker push grapl/grapl-engagement-view:$VERSION-$CHANNEL
          docker push grapl/grapl-graphql-endpoint:$VERSION-$CHANNEL
          docker push grapl/grapl-graph-provision:$VERSION-$CHANNEL
          docker push grapl/grapl-dynamodb-provision:$VERSION-$CHANNEL

      - name: Extract Grapl artifacts from build
        id: extract-artifacts
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          docker create -ti --name cp-sysmon-subgraph-generator grapl/grapl-sysmon-subgraph-generator:$VERSION-$CHANNEL
          docker cp cp-sysmon-subgraph-generator:/sysmon-subgraph-generator ./bootstrap
          docker rm -f cp-sysmon-subgraph-generator
          zip -9 sysmon-subgraph-generator-$VERSION-$CHANNEL.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=sysmon-subgraph-generator::sysmon-subgraph-generator-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-generic-subgraph-generator grapl/grapl-generic-subgraph-generator:$VERSION-$CHANNEL
          docker cp cp-generic-subgraph-generator:/generic-subgraph-generator ./bootstrap
          docker rm -f cp-generic-subgraph-generator
          zip -9 generic-subgraph-generator-$VERSION-$CHANNEL.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=generic-subgraph-generator::generic-subgraph-generator-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-node-identifier grapl/grapl-node-identifier:$VERSION-$CHANNEL
          docker cp cp-node-identifier:/node-identifier ./bootstrap
          docker rm -f cp-node-identifier
          zip -9 node-identifier-$VERSION-$CHANNEL.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=node-identifier::node-identifier-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-node-identifier-retry-handler grapl/grapl-node-identifier-retry-handler:$VERSION-$CHANNEL
          docker cp cp-node-identifier-retry-handler:/node-identifier-retry-handler ./bootstrap
          docker rm -f cp-node-identifier-retry-handler
          zip -9 node-identifier-retry-handler-$VERSION-$CHANNEL.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=node-identifier-retry-handler::node-identifier-retry-handler-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-graph-merger grapl/grapl-graph-merger:$VERSION-$CHANNEL
          docker cp cp-graph-merger:/graph-merger ./bootstrap
          docker rm -f cp-graph-merger
          zip -9 graph-merger-$VERSION-$CHANNEL.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=graph-merger::graph-merger-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-analyzer-dispatcher grapl/grapl-analyzer-dispatcher:$VERSION-$CHANNEL
          docker cp cp-analyzer-dispatcher:/analyzer-dispatcher ./bootstrap
          docker rm -f cp-analyzer-dispatcher
          zip -9 analyzer-dispatcher-$VERSION-$CHANNEL.zip ./bootstrap
          rm ./bootstrap
          echo "::set-output name=analyzer-dispatcher::analyzer-dispatcher-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-analyzer-executor grapl/grapl-analyzer-executor:$VERSION-$CHANNEL
          docker cp cp-analyzer-executor:/home/grapl/lambda.zip analyzer-executor-$VERSION-$CHANNEL.zip
          docker rm -f cp-analyzer-executor
          echo "::set-output name=analyzer-executor::analyzer-executor-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-engagement-creator grapl/grapl-engagement-creator:$VERSION-$CHANNEL
          docker cp cp-engagement-creator:/home/grapl/lambda.zip engagement-creator-$VERSION-$CHANNEL.zip
          docker rm -f cp-engagement-creator
          echo "::set-output name=engagement-creator::engagement-creator-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-engagement-edge grapl/grapl-engagement-edge:$VERSION-$CHANNEL
          docker cp cp-engagement-edge:/home/grapl/lambda.zip engagement-edge-$VERSION-$CHANNEL.zip
          docker rm -f cp-engagement-edge
          echo "::set-output name=engagement-edge::engagement-edge-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-model-plugin-deployer grapl/grapl-model-plugin-deployer:$VERSION-$CHANNEL
          docker cp cp-model-plugin-deployer:/home/grapl/lambda.zip model-plugin-deployer-$VERSION-$CHANNEL.zip
          docker rm -f cp-model-plugin-deployer
          echo "::set-output name=model-plugin-deployer::model-plugin-deployer-$VERSION-$CHANNEL.zip"

          docker create -ti --name cp-graphql-endpoint grapl/grapl-graphql-endpoint:$VERSION-$CHANNEL
          docker cp cp-graphql-endpoint:/lambda.zip graphql-endpoint-$VERSION-$CHANNEL.zip
          docker rm -f cp-graphql-endpoint
          echo "::set-output name=graphql-endpoint::graphql-endpoint-$VERSION-$CHANNEL.zip"

      - name: Upload sysmon-subgraph-generator to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.sysmon-subgraph-generator }}
          asset_name: ${{ steps.extract-artifacts.outputs.sysmon-subgraph-generator }}
          asset_content_type: application/zip

      - name: Upload generic-subgraph-generator to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.generic-subgraph-generator }}
          asset_name: ${{ steps.extract-artifacts.outputs.generic-subgraph-generator }}
          asset_content_type: application/zip

      - name: Upload node-identifier to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.node-identifier }}
          asset_name: ${{ steps.extract-artifacts.outputs.node-identifier }}
          asset_content_type: application/zip

      - name: Upload node-identifier-retry-handler to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.node-identifier-retry-handler }}
          asset_name: ${{ steps.extract-artifacts.outputs.node-identifier-retry-handler }}
          asset_content_type: application/zip

      - name: Upload graph-merger to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.graph-merger }}
          asset_name: ${{ steps.extract-artifacts.outputs.graph-merger }}
          asset_content_type: application/zip

      - name: Upload analyzer-dispatcher to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.analyzer-dispatcher }}
          asset_name: ${{ steps.extract-artifacts.outputs.analyzer-dispatcher }}
          asset_content_type: application/zip

      - name: Upload analyzer-executor to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.analyzer-executor }}
          asset_name: ${{ steps.extract-artifacts.outputs.analyzer-executor }}
          asset_content_type: application/zip

      - name: Upload engagement-creator to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.engagement-creator }}
          asset_name: ${{ steps.extract-artifacts.outputs.engagement-creator }}
          asset_content_type: application/zip

      - name: Upload engagement-edge to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.engagement-edge }}
          asset_name: ${{ steps.extract-artifacts.outputs.engagement-edge }}
          asset_content_type: application/zip

      - name: Upload model-plugin-deployer to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.model-plugin-deployer }}
          asset_name: ${{ steps.extract-artifacts.outputs.model-plugin-deployer }}
          asset_content_type: application/zip

      - name: Upload graphql-endpoint to Github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.extract-artifacts.outputs.graphql-endpoint }}
          asset_name: ${{ steps.extract-artifacts.outputs.graphql-endpoint }}
          asset_content_type: application/zip

      - name: Prepare graph-descriptions dist
        run: |
          docker create -ti --name graph-descriptions grapl/grapl-graph-descriptions-python-build:latest
          docker cp graph-descriptions:/home/grapl/graph-descriptions/dist .
          docker rm -f graph-descriptions

      - name: Upload graph-descriptions to Test PyPI
        if: $CHANNEL == "beta"
        uses: pypa/gh-action-pypi-publish@v1
        with:
          user: __token__
          password: ${{ secrets.GRAPL_ANALYZERLIB_TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Upload graph-descriptions to PyPI
        if: $CHANNEL == "latest"
        uses: pypa/gh-action-pypi-publish@v1
        with:
          user: __token__
          password: ${{ secrets.GRAPL_ANALYZERLIB_PYPI_TOKEN }}

      - name: Clean up graph-descriptions dist
        run: |
          rm -rf dist

      - name: Prepare grapl_analyzerlib dist
        run: |
          docker create -ti --name grapl-analyzerlib grapl/grapl-analyzerlib-python-build:latest
          docker cp grapl-analyzerlib:/home/grapl/grapl_analyzerlib/dist .
          docker rm -f grapl-analyzerlib

      - name: Upload grapl_analyzerlib to Test PyPI
        if: $CHANNEL == "beta"
        uses: pypa/gh-action-pypi-publish@v1
        with:
          user: __token__
          password: ${{ secrets.GRAPL_ANALYZERLIB_TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Upload grapl_analzyerlib to PyPI
        if: $CHANNEL == "latest"
        uses: pypa/gh-action-pypi-publish@v1
        with:
          user: __token__
          password: ${{ secrets.GRAPL_ANALYZERLIB_PYPI_TOKEN }}

      - name: Clean up grapl_analyzerlib dist
        run: |
          rm -rf dist
